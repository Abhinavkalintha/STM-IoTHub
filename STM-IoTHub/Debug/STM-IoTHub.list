
STM-IoTHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a624  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800a7f4  0800a7f4  0000b7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab98  0800ab98  0000c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab98  0800ab98  0000bb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aba0  0800aba0  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aba0  0800aba0  0000bba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aba4  0800aba4  0000bba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800aba8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000514c  20000070  0800ac18  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051bc  0800ac18  0000c1bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e44c  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a1b  00000000  00000000  0002a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001349  00000000  00000000  00030838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027da6  00000000  00000000  00031b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218c1  00000000  00000000  00059927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a8a  00000000  00000000  0007b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cc72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f80  00000000  00000000  0015ccb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00163c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a7dc 	.word	0x0800a7dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800a7dc 	.word	0x0800a7dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b988 	b.w	8000950 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	468e      	mov	lr, r1
 8000660:	4604      	mov	r4, r0
 8000662:	4688      	mov	r8, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4617      	mov	r7, r2
 800066c:	d962      	bls.n	8000734 <__udivmoddi4+0xdc>
 800066e:	fab2 f682 	clz	r6, r2
 8000672:	b14e      	cbz	r6, 8000688 <__udivmoddi4+0x30>
 8000674:	f1c6 0320 	rsb	r3, r6, #32
 8000678:	fa01 f806 	lsl.w	r8, r1, r6
 800067c:	fa20 f303 	lsr.w	r3, r0, r3
 8000680:	40b7      	lsls	r7, r6
 8000682:	ea43 0808 	orr.w	r8, r3, r8
 8000686:	40b4      	lsls	r4, r6
 8000688:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800068c:	fa1f fc87 	uxth.w	ip, r7
 8000690:	fbb8 f1fe 	udiv	r1, r8, lr
 8000694:	0c23      	lsrs	r3, r4, #16
 8000696:	fb0e 8811 	mls	r8, lr, r1, r8
 800069a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800069e:	fb01 f20c 	mul.w	r2, r1, ip
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d909      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80006ac:	f080 80ea 	bcs.w	8000884 <__udivmoddi4+0x22c>
 80006b0:	429a      	cmp	r2, r3
 80006b2:	f240 80e7 	bls.w	8000884 <__udivmoddi4+0x22c>
 80006b6:	3902      	subs	r1, #2
 80006b8:	443b      	add	r3, r7
 80006ba:	1a9a      	subs	r2, r3, r2
 80006bc:	b2a3      	uxth	r3, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ce:	459c      	cmp	ip, r3
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0x8e>
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006d8:	f080 80d6 	bcs.w	8000888 <__udivmoddi4+0x230>
 80006dc:	459c      	cmp	ip, r3
 80006de:	f240 80d3 	bls.w	8000888 <__udivmoddi4+0x230>
 80006e2:	443b      	add	r3, r7
 80006e4:	3802      	subs	r0, #2
 80006e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ea:	eba3 030c 	sub.w	r3, r3, ip
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11d      	cbz	r5, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40f3      	lsrs	r3, r6
 80006f4:	2200      	movs	r2, #0
 80006f6:	e9c5 3200 	strd	r3, r2, [r5]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d905      	bls.n	800070e <__udivmoddi4+0xb6>
 8000702:	b10d      	cbz	r5, 8000708 <__udivmoddi4+0xb0>
 8000704:	e9c5 0100 	strd	r0, r1, [r5]
 8000708:	2100      	movs	r1, #0
 800070a:	4608      	mov	r0, r1
 800070c:	e7f5      	b.n	80006fa <__udivmoddi4+0xa2>
 800070e:	fab3 f183 	clz	r1, r3
 8000712:	2900      	cmp	r1, #0
 8000714:	d146      	bne.n	80007a4 <__udivmoddi4+0x14c>
 8000716:	4573      	cmp	r3, lr
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xc8>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 8105 	bhi.w	800092a <__udivmoddi4+0x2d2>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb6e 0203 	sbc.w	r2, lr, r3
 8000726:	2001      	movs	r0, #1
 8000728:	4690      	mov	r8, r2
 800072a:	2d00      	cmp	r5, #0
 800072c:	d0e5      	beq.n	80006fa <__udivmoddi4+0xa2>
 800072e:	e9c5 4800 	strd	r4, r8, [r5]
 8000732:	e7e2      	b.n	80006fa <__udivmoddi4+0xa2>
 8000734:	2a00      	cmp	r2, #0
 8000736:	f000 8090 	beq.w	800085a <__udivmoddi4+0x202>
 800073a:	fab2 f682 	clz	r6, r2
 800073e:	2e00      	cmp	r6, #0
 8000740:	f040 80a4 	bne.w	800088c <__udivmoddi4+0x234>
 8000744:	1a8a      	subs	r2, r1, r2
 8000746:	0c03      	lsrs	r3, r0, #16
 8000748:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800074c:	b280      	uxth	r0, r0
 800074e:	b2bc      	uxth	r4, r7
 8000750:	2101      	movs	r1, #1
 8000752:	fbb2 fcfe 	udiv	ip, r2, lr
 8000756:	fb0e 221c 	mls	r2, lr, ip, r2
 800075a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800075e:	fb04 f20c 	mul.w	r2, r4, ip
 8000762:	429a      	cmp	r2, r3
 8000764:	d907      	bls.n	8000776 <__udivmoddi4+0x11e>
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	f10c 38ff 	add.w	r8, ip, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x11c>
 800076e:	429a      	cmp	r2, r3
 8000770:	f200 80e0 	bhi.w	8000934 <__udivmoddi4+0x2dc>
 8000774:	46c4      	mov	ip, r8
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	fbb3 f2fe 	udiv	r2, r3, lr
 800077c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000780:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000784:	fb02 f404 	mul.w	r4, r2, r4
 8000788:	429c      	cmp	r4, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x144>
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x142>
 8000794:	429c      	cmp	r4, r3
 8000796:	f200 80ca 	bhi.w	800092e <__udivmoddi4+0x2d6>
 800079a:	4602      	mov	r2, r0
 800079c:	1b1b      	subs	r3, r3, r4
 800079e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0x98>
 80007a4:	f1c1 0620 	rsb	r6, r1, #32
 80007a8:	408b      	lsls	r3, r1
 80007aa:	fa22 f706 	lsr.w	r7, r2, r6
 80007ae:	431f      	orrs	r7, r3
 80007b0:	fa0e f401 	lsl.w	r4, lr, r1
 80007b4:	fa20 f306 	lsr.w	r3, r0, r6
 80007b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007c0:	4323      	orrs	r3, r4
 80007c2:	fa00 f801 	lsl.w	r8, r0, r1
 80007c6:	fa1f fc87 	uxth.w	ip, r7
 80007ca:	fbbe f0f9 	udiv	r0, lr, r9
 80007ce:	0c1c      	lsrs	r4, r3, #16
 80007d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007dc:	45a6      	cmp	lr, r4
 80007de:	fa02 f201 	lsl.w	r2, r2, r1
 80007e2:	d909      	bls.n	80007f8 <__udivmoddi4+0x1a0>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ea:	f080 809c 	bcs.w	8000926 <__udivmoddi4+0x2ce>
 80007ee:	45a6      	cmp	lr, r4
 80007f0:	f240 8099 	bls.w	8000926 <__udivmoddi4+0x2ce>
 80007f4:	3802      	subs	r0, #2
 80007f6:	443c      	add	r4, r7
 80007f8:	eba4 040e 	sub.w	r4, r4, lr
 80007fc:	fa1f fe83 	uxth.w	lr, r3
 8000800:	fbb4 f3f9 	udiv	r3, r4, r9
 8000804:	fb09 4413 	mls	r4, r9, r3, r4
 8000808:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800080c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000810:	45a4      	cmp	ip, r4
 8000812:	d908      	bls.n	8000826 <__udivmoddi4+0x1ce>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f103 3eff 	add.w	lr, r3, #4294967295
 800081a:	f080 8082 	bcs.w	8000922 <__udivmoddi4+0x2ca>
 800081e:	45a4      	cmp	ip, r4
 8000820:	d97f      	bls.n	8000922 <__udivmoddi4+0x2ca>
 8000822:	3b02      	subs	r3, #2
 8000824:	443c      	add	r4, r7
 8000826:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000832:	4564      	cmp	r4, ip
 8000834:	4673      	mov	r3, lr
 8000836:	46e1      	mov	r9, ip
 8000838:	d362      	bcc.n	8000900 <__udivmoddi4+0x2a8>
 800083a:	d05f      	beq.n	80008fc <__udivmoddi4+0x2a4>
 800083c:	b15d      	cbz	r5, 8000856 <__udivmoddi4+0x1fe>
 800083e:	ebb8 0203 	subs.w	r2, r8, r3
 8000842:	eb64 0409 	sbc.w	r4, r4, r9
 8000846:	fa04 f606 	lsl.w	r6, r4, r6
 800084a:	fa22 f301 	lsr.w	r3, r2, r1
 800084e:	431e      	orrs	r6, r3
 8000850:	40cc      	lsrs	r4, r1
 8000852:	e9c5 6400 	strd	r6, r4, [r5]
 8000856:	2100      	movs	r1, #0
 8000858:	e74f      	b.n	80006fa <__udivmoddi4+0xa2>
 800085a:	fbb1 fcf2 	udiv	ip, r1, r2
 800085e:	0c01      	lsrs	r1, r0, #16
 8000860:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000864:	b280      	uxth	r0, r0
 8000866:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800086a:	463b      	mov	r3, r7
 800086c:	4638      	mov	r0, r7
 800086e:	463c      	mov	r4, r7
 8000870:	46b8      	mov	r8, r7
 8000872:	46be      	mov	lr, r7
 8000874:	2620      	movs	r6, #32
 8000876:	fbb1 f1f7 	udiv	r1, r1, r7
 800087a:	eba2 0208 	sub.w	r2, r2, r8
 800087e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000882:	e766      	b.n	8000752 <__udivmoddi4+0xfa>
 8000884:	4601      	mov	r1, r0
 8000886:	e718      	b.n	80006ba <__udivmoddi4+0x62>
 8000888:	4610      	mov	r0, r2
 800088a:	e72c      	b.n	80006e6 <__udivmoddi4+0x8e>
 800088c:	f1c6 0220 	rsb	r2, r6, #32
 8000890:	fa2e f302 	lsr.w	r3, lr, r2
 8000894:	40b7      	lsls	r7, r6
 8000896:	40b1      	lsls	r1, r6
 8000898:	fa20 f202 	lsr.w	r2, r0, r2
 800089c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a0:	430a      	orrs	r2, r1
 80008a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008a6:	b2bc      	uxth	r4, r7
 80008a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008ac:	0c11      	lsrs	r1, r2, #16
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb08 f904 	mul.w	r9, r8, r4
 80008b6:	40b0      	lsls	r0, r6
 80008b8:	4589      	cmp	r9, r1
 80008ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008be:	b280      	uxth	r0, r0
 80008c0:	d93e      	bls.n	8000940 <__udivmoddi4+0x2e8>
 80008c2:	1879      	adds	r1, r7, r1
 80008c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008c8:	d201      	bcs.n	80008ce <__udivmoddi4+0x276>
 80008ca:	4589      	cmp	r9, r1
 80008cc:	d81f      	bhi.n	800090e <__udivmoddi4+0x2b6>
 80008ce:	eba1 0109 	sub.w	r1, r1, r9
 80008d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008d6:	fb09 f804 	mul.w	r8, r9, r4
 80008da:	fb0e 1119 	mls	r1, lr, r9, r1
 80008de:	b292      	uxth	r2, r2
 80008e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e4:	4542      	cmp	r2, r8
 80008e6:	d229      	bcs.n	800093c <__udivmoddi4+0x2e4>
 80008e8:	18ba      	adds	r2, r7, r2
 80008ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ee:	d2c4      	bcs.n	800087a <__udivmoddi4+0x222>
 80008f0:	4542      	cmp	r2, r8
 80008f2:	d2c2      	bcs.n	800087a <__udivmoddi4+0x222>
 80008f4:	f1a9 0102 	sub.w	r1, r9, #2
 80008f8:	443a      	add	r2, r7
 80008fa:	e7be      	b.n	800087a <__udivmoddi4+0x222>
 80008fc:	45f0      	cmp	r8, lr
 80008fe:	d29d      	bcs.n	800083c <__udivmoddi4+0x1e4>
 8000900:	ebbe 0302 	subs.w	r3, lr, r2
 8000904:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000908:	3801      	subs	r0, #1
 800090a:	46e1      	mov	r9, ip
 800090c:	e796      	b.n	800083c <__udivmoddi4+0x1e4>
 800090e:	eba7 0909 	sub.w	r9, r7, r9
 8000912:	4449      	add	r1, r9
 8000914:	f1a8 0c02 	sub.w	ip, r8, #2
 8000918:	fbb1 f9fe 	udiv	r9, r1, lr
 800091c:	fb09 f804 	mul.w	r8, r9, r4
 8000920:	e7db      	b.n	80008da <__udivmoddi4+0x282>
 8000922:	4673      	mov	r3, lr
 8000924:	e77f      	b.n	8000826 <__udivmoddi4+0x1ce>
 8000926:	4650      	mov	r0, sl
 8000928:	e766      	b.n	80007f8 <__udivmoddi4+0x1a0>
 800092a:	4608      	mov	r0, r1
 800092c:	e6fd      	b.n	800072a <__udivmoddi4+0xd2>
 800092e:	443b      	add	r3, r7
 8000930:	3a02      	subs	r2, #2
 8000932:	e733      	b.n	800079c <__udivmoddi4+0x144>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	443b      	add	r3, r7
 800093a:	e71c      	b.n	8000776 <__udivmoddi4+0x11e>
 800093c:	4649      	mov	r1, r9
 800093e:	e79c      	b.n	800087a <__udivmoddi4+0x222>
 8000940:	eba1 0109 	sub.w	r1, r1, r9
 8000944:	46c4      	mov	ip, r8
 8000946:	fbb1 f9fe 	udiv	r9, r1, lr
 800094a:	fb09 f804 	mul.w	r8, r9, r4
 800094e:	e7c4      	b.n	80008da <__udivmoddi4+0x282>

08000950 <__aeabi_idiv0>:
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <BME680_Init>:

/**
 * @brief Initializes the BME680 sensor with appropriate settings
 */
void BME680_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
    int8_t rslt;

    // 🔌 Interface setup
    gas_sensor.intf = BME68X_I2C_INTF;
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <BME680_Init+0x98>)
 800095c:	2201      	movs	r2, #1
 800095e:	731a      	strb	r2, [r3, #12]
    gas_sensor.read = user_i2c_read;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <BME680_Init+0x98>)
 8000962:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <BME680_Init+0x9c>)
 8000964:	641a      	str	r2, [r3, #64]	@ 0x40
    gas_sensor.write = user_i2c_write;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <BME680_Init+0x98>)
 8000968:	4a22      	ldr	r2, [pc, #136]	@ (80009f4 <BME680_Init+0xa0>)
 800096a:	645a      	str	r2, [r3, #68]	@ 0x44
    gas_sensor.delay_us = user_delay_us;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <BME680_Init+0x98>)
 800096e:	4a22      	ldr	r2, [pc, #136]	@ (80009f8 <BME680_Init+0xa4>)
 8000970:	649a      	str	r2, [r3, #72]	@ 0x48
    gas_sensor.intf_ptr = &hi2c1;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <BME680_Init+0x98>)
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <BME680_Init+0xa8>)
 8000976:	605a      	str	r2, [r3, #4]
    gas_sensor.amb_temp = 25;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <BME680_Init+0x98>)
 800097a:	2219      	movs	r2, #25
 800097c:	739a      	strb	r2, [r3, #14]

    // 🚀 Initialize the BME680 sensor
    rslt = bme68x_init(&gas_sensor);
 800097e:	481b      	ldr	r0, [pc, #108]	@ (80009ec <BME680_Init+0x98>)
 8000980:	f000 f8be 	bl	8000b00 <bme68x_init>
 8000984:	4603      	mov	r3, r0
 8000986:	77fb      	strb	r3, [r7, #31]
    if (rslt != BME68X_OK) return;
 8000988:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d126      	bne.n	80009de <BME680_Init+0x8a>

    // ⚙️ Sensor configuration
    struct bme68x_conf conf;
    conf.os_hum  = BME68X_OS_2X;
 8000990:	2302      	movs	r3, #2
 8000992:	763b      	strb	r3, [r7, #24]
    conf.os_pres = BME68X_OS_4X;
 8000994:	2303      	movs	r3, #3
 8000996:	76bb      	strb	r3, [r7, #26]
    conf.os_temp = BME68X_OS_8X;
 8000998:	2304      	movs	r3, #4
 800099a:	767b      	strb	r3, [r7, #25]
    conf.filter  = BME68X_FILTER_OFF;
 800099c:	2300      	movs	r3, #0
 800099e:	76fb      	strb	r3, [r7, #27]

    rslt = bme68x_set_conf(&conf, &gas_sensor);
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	4911      	ldr	r1, [pc, #68]	@ (80009ec <BME680_Init+0x98>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f9ee 	bl	8000d88 <bme68x_set_conf>
 80009ac:	4603      	mov	r3, r0
 80009ae:	77fb      	strb	r3, [r7, #31]
    if (rslt != BME68X_OK) return;
 80009b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d114      	bne.n	80009e2 <BME680_Init+0x8e>

    // 🔥 Heater configuration
    struct bme68x_heatr_conf heatr_conf;
    heatr_conf.enable     = BME68X_ENABLE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	713b      	strb	r3, [r7, #4]
    heatr_conf.heatr_temp = 300;      // Target heater temperature (°C)
 80009bc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80009c0:	80fb      	strh	r3, [r7, #6]
    heatr_conf.heatr_dur  = 100;      // Heating duration in milliseconds
 80009c2:	2364      	movs	r3, #100	@ 0x64
 80009c4:	813b      	strh	r3, [r7, #8]

    rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &gas_sensor);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <BME680_Init+0x98>)
 80009ca:	4619      	mov	r1, r3
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 fb66 	bl	800109e <bme68x_set_heatr_conf>
 80009d2:	4603      	mov	r3, r0
 80009d4:	77fb      	strb	r3, [r7, #31]
    if (rslt != BME68X_OK) return;
 80009d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	e002      	b.n	80009e4 <BME680_Init+0x90>
    if (rslt != BME68X_OK) return;
 80009de:	bf00      	nop
 80009e0:	e000      	b.n	80009e4 <BME680_Init+0x90>
    if (rslt != BME68X_OK) return;
 80009e2:	bf00      	nop
}
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	08000a39 	.word	0x08000a39
 80009f4:	08000a89 	.word	0x08000a89
 80009f8:	08000ad9 	.word	0x08000ad9
 80009fc:	20000534 	.word	0x20000534

08000a00 <BME680_ReadTemperature>:

/**
 * @brief Returns the last read temperature
 */
float BME680_ReadTemperature(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
    return g_temperature;
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <BME680_ReadTemperature+0x18>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	ee07 3a90 	vmov	s15, r3
}
 8000a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000528 	.word	0x20000528

08000a1c <BME680_ReadHumidity>:

/**
 * @brief Returns the last read humidity
 */
float BME680_ReadHumidity(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    return g_humidity;
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <BME680_ReadHumidity+0x18>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	ee07 3a90 	vmov	s15, r3
}
 8000a28:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	2000052c 	.word	0x2000052c

08000a38 <user_i2c_read>:

extern I2C_HandleTypeDef hi2c1;

// === I2C READ ===
int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af04      	add	r7, sp, #16
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
    uint8_t dev_addr = *((uint8_t *)intf_ptr);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	75fb      	strb	r3, [r7, #23]
    return (HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, 100) == HAL_OK) ? 0 : -1;
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	b299      	uxth	r1, r3
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	2064      	movs	r0, #100	@ 0x64
 8000a5c:	9002      	str	r0, [sp, #8]
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <user_i2c_read+0x4c>)
 8000a68:	f002 ffa8 	bl	80039bc <HAL_I2C_Mem_Read>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <user_i2c_read+0x3e>
 8000a72:	2300      	movs	r3, #0
 8000a74:	e001      	b.n	8000a7a <user_i2c_read+0x42>
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000534 	.word	0x20000534

08000a88 <user_i2c_write>:

// === I2C WRITE ===
int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4603      	mov	r3, r0
 8000a96:	73fb      	strb	r3, [r7, #15]
    uint8_t dev_addr = *((uint8_t *)intf_ptr);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	75fb      	strb	r3, [r7, #23]
    return (HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, 100) == HAL_OK) ? 0 : -1;
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	b299      	uxth	r1, r3
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	2064      	movs	r0, #100	@ 0x64
 8000aac:	9002      	str	r0, [sp, #8]
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <user_i2c_write+0x4c>)
 8000ab8:	f002 fe86 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <user_i2c_write+0x3e>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e001      	b.n	8000aca <user_i2c_write+0x42>
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000534 	.word	0x20000534

08000ad8 <user_delay_us>:

// === DELAY ===
void user_delay_us(uint32_t period, void *intf_ptr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    (void)intf_ptr;
    HAL_Delay(period / 1000); // crude conversion from us to ms
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <user_delay_us+0x24>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	099b      	lsrs	r3, r3, #6
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f971 	bl	8002dd4 <HAL_Delay>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	10624dd3 	.word	0x10624dd3

08000b00 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f8fa 	bl	8000d02 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	20d0      	movs	r0, #208	@ 0xd0
 8000b16:	f000 f8b0 	bl	8000c7a <bme68x_get_regs>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d114      	bne.n	8000b50 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b61      	cmp	r3, #97	@ 0x61
 8000b2c:	d10e      	bne.n	8000b4c <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 ff8d 	bl	8001a4e <read_variant_id>
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d107      	bne.n	8000b50 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 fe75 	bl	8001830 <get_calib_data>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e001      	b.n	8000b50 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000b4c:	23fd      	movs	r3, #253	@ 0xfd
 8000b4e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000b7a:	6838      	ldr	r0, [r7, #0]
 8000b7c:	f000 fcb0 	bl	80014e0 <null_ptr_check>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000b86:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d16c      	bne.n	8000c68 <bme68x_set_regs+0x10c>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d069      	beq.n	8000c68 <bme68x_set_regs+0x10c>
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d066      	beq.n	8000c68 <bme68x_set_regs+0x10c>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d05d      	beq.n	8000c5c <bme68x_set_regs+0x100>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b0a      	cmp	r3, #10
 8000ba4:	d85a      	bhi.n	8000c5c <bme68x_set_regs+0x100>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000baa:	e034      	b.n	8000c16 <bme68x_set_regs+0xba>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	7b1b      	ldrb	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d118      	bne.n	8000be6 <bme68x_set_regs+0x8a>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000bb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	6839      	ldr	r1, [r7, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fbcd 	bl	800135e <set_mem_page>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000bca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	3328      	adds	r3, #40	@ 0x28
 8000bde:	443b      	add	r3, r7
 8000be0:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000be4:	e009      	b.n	8000bfa <bme68x_set_regs+0x9e>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	441a      	add	r2, r3
 8000bec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	3328      	adds	r3, #40	@ 0x28
 8000bf4:	443b      	add	r3, r7
 8000bf6:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	441a      	add	r2, r3
 8000c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	3301      	adds	r3, #1
 8000c06:	7812      	ldrb	r2, [r2, #0]
 8000c08:	3328      	adds	r3, #40	@ 0x28
 8000c0a:	443b      	add	r3, r7
 8000c0c:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000c10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c12:	3301      	adds	r3, #1
 8000c14:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d8c6      	bhi.n	8000bac <bme68x_set_regs+0x50>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000c1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d11e      	bne.n	8000c64 <bme68x_set_regs+0x108>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8000c2a:	7c38      	ldrb	r0, [r7, #16]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1e5a      	subs	r2, r3, #1
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685d      	ldr	r5, [r3, #4]
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	1c59      	adds	r1, r3, #1
 8000c3c:	462b      	mov	r3, r5
 8000c3e:	47a0      	blx	r4
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <bme68x_set_regs+0x108>
                {
                    rslt = BME68X_E_COM_FAIL;
 8000c54:	23fe      	movs	r3, #254	@ 0xfe
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8000c5a:	e003      	b.n	8000c64 <bme68x_set_regs+0x108>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8000c5c:	23fc      	movs	r3, #252	@ 0xfc
 8000c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000c62:	e004      	b.n	8000c6e <bme68x_set_regs+0x112>
            if (rslt == BME68X_OK)
 8000c64:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000c66:	e002      	b.n	8000c6e <bme68x_set_regs+0x112>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000c68:	23ff      	movs	r3, #255	@ 0xff
 8000c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8000c6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}

08000c7a <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b087      	sub	sp, #28
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4603      	mov	r3, r0
 8000c88:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000c8a:	6838      	ldr	r0, [r7, #0]
 8000c8c:	f000 fc28 	bl	80014e0 <null_ptr_check>
 8000c90:	4603      	mov	r3, r0
 8000c92:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8000c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d12a      	bne.n	8000cf2 <bme68x_get_regs+0x78>
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d027      	beq.n	8000cf2 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	7b1b      	ldrb	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10e      	bne.n	8000cc8 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	6839      	ldr	r1, [r7, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fb55 	bl	800135e <set_mem_page>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8000cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cc6:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	7bf8      	ldrb	r0, [r7, #15]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	47a0      	blx	r4
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8000cec:	23fe      	movs	r3, #254	@ 0xfe
 8000cee:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8000cf0:	e001      	b.n	8000cf6 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000cf2:	23ff      	movs	r3, #255	@ 0xff
 8000cf4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	371c      	adds	r7, #28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}

08000d02 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8000d0a:	23e0      	movs	r3, #224	@ 0xe0
 8000d0c:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8000d0e:	23b6      	movs	r3, #182	@ 0xb6
 8000d10:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 fbe4 	bl	80014e0 <null_ptr_check>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8000d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d12b      	bne.n	8000d7c <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7b1b      	ldrb	r3, [r3, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 fb7b 	bl	8001428 <get_mem_page>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d11e      	bne.n	8000d7c <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000d3e:	f107 010d 	add.w	r1, r7, #13
 8000d42:	f107 000e 	add.w	r0, r7, #14
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f7ff ff07 	bl	8000b5c <bme68x_set_regs>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d110      	bne.n	8000d7c <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	6852      	ldr	r2, [r2, #4]
 8000d62:	4611      	mov	r1, r2
 8000d64:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d68:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7b1b      	ldrb	r3, [r3, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fb58 	bl	8001428 <get_mem_page>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	77bb      	strb	r3, [r7, #30]
 8000d96:	2301      	movs	r3, #1
 8000d98:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8000d9a:	4a7f      	ldr	r2, [pc, #508]	@ (8000f98 <bme68x_set_conf+0x210>)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da4:	6018      	str	r0, [r3, #0]
 8000da6:	3304      	adds	r3, #4
 8000da8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	711a      	strb	r2, [r3, #4]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f94f 	bl	800105e <bme68x_get_op_mode>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8000dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <bme68x_set_conf+0x50>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f8e4 	bl	8000f9c <bme68x_set_op_mode>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <bme68x_set_conf+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8000dde:	23ff      	movs	r3, #255	@ 0xff
 8000de0:	77fb      	strb	r3, [r7, #31]
 8000de2:	e0b7      	b.n	8000f54 <bme68x_set_conf+0x1cc>
    }
    else if (rslt == BME68X_OK)
 8000de4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f040 80b3 	bne.w	8000f54 <bme68x_set_conf+0x1cc>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8000dee:	7d38      	ldrb	r0, [r7, #20]
 8000df0:	f107 010c 	add.w	r1, r7, #12
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2205      	movs	r2, #5
 8000df8:	f7ff ff3f 	bl	8000c7a <bme68x_get_regs>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8000e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d108      	bne.n	8000e22 <bme68x_set_conf+0x9a>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3303      	adds	r3, #3
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	2107      	movs	r1, #7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fb34 	bl	8001486 <boundary_check>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8000e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d108      	bne.n	8000e3c <bme68x_set_conf+0xb4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	2105      	movs	r1, #5
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fb27 	bl	8001486 <boundary_check>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8000e3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <bme68x_set_conf+0xce>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3302      	adds	r3, #2
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fb1a 	bl	8001486 <boundary_check>
 8000e52:	4603      	mov	r3, r0
 8000e54:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8000e56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d107      	bne.n	8000e6e <bme68x_set_conf+0xe6>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	2105      	movs	r1, #5
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fb0e 	bl	8001486 <boundary_check>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8000e6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d108      	bne.n	8000e88 <bme68x_set_conf+0x100>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fb01 	bl	8001486 <boundary_check>
 8000e84:	4603      	mov	r3, r0
 8000e86:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8000e88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d161      	bne.n	8000f54 <bme68x_set_conf+0x1cc>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8000e90:	7c3b      	ldrb	r3, [r7, #16]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	f023 031c 	bic.w	r3, r3, #28
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	78db      	ldrb	r3, [r3, #3]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	f003 031c 	and.w	r3, r3, #28
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	b25a      	sxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	f023 031c 	bic.w	r3, r3, #28
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	789b      	ldrb	r3, [r3, #2]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f003 031c 	and.w	r3, r3, #28
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8000ef0:	7b7b      	ldrb	r3, [r7, #13]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f023 0307 	bic.w	r3, r3, #7
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	791b      	ldrb	r3, [r3, #4]
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d004      	beq.n	8000f20 <bme68x_set_conf+0x198>
            {
                odr20 = conf->odr;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	791b      	ldrb	r3, [r3, #4]
 8000f1a:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8000f20:	7c3b      	ldrb	r3, [r7, #16]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	b25a      	sxtb	r2, r3
 8000f2a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8000f3a:	7b3b      	ldrb	r3, [r7, #12]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f42:	b25a      	sxtb	r2, r3
 8000f44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8000f54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <bme68x_set_conf+0x1e8>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8000f5c:	f107 010c 	add.w	r1, r7, #12
 8000f60:	f107 0014 	add.w	r0, r7, #20
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2205      	movs	r2, #5
 8000f68:	f7ff fdf8 	bl	8000b5c <bme68x_set_regs>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8000f70:	7f3b      	ldrb	r3, [r7, #28]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00a      	beq.n	8000f8c <bme68x_set_conf+0x204>
 8000f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <bme68x_set_conf+0x204>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8000f7e:	7f3b      	ldrb	r3, [r7, #28]
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f80a 	bl	8000f9c <bme68x_set_op_mode>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8000f8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800a7f4 	.word	0x0800a7f4

08000f9c <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8000fac:	2374      	movs	r3, #116	@ 0x74
 8000fae:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8000fb0:	f107 010d 	add.w	r1, r7, #13
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2074      	movs	r0, #116	@ 0x74
 8000fba:	f7ff fe5e 	bl	8000c7a <bme68x_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11d      	bne.n	8001006 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d016      	beq.n	8001006 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000fe2:	f107 010d 	add.w	r1, r7, #13
 8000fe6:	f107 000c 	add.w	r0, r7, #12
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f7ff fdb5 	bl	8000b5c <bme68x_set_regs>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	6852      	ldr	r2, [r2, #4]
 8000ffe:	4611      	mov	r1, r2
 8001000:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001004:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <bme68x_set_op_mode+0x78>
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0cd      	beq.n	8000fb0 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01b      	beq.n	8001052 <bme68x_set_op_mode+0xb6>
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d117      	bne.n	8001052 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	b25a      	sxtb	r2, r3
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800103e:	f107 010d 	add.w	r1, r7, #13
 8001042:	f107 000c 	add.w	r0, r7, #12
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	f7ff fd87 	bl	8000b5c <bme68x_set_regs>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800106e:	f107 010e 	add.w	r1, r7, #14
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	2074      	movs	r0, #116	@ 0x74
 8001078:	f7ff fdff 	bl	8000c7a <bme68x_get_regs>
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	b2da      	uxtb	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e001      	b.n	8001092 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800108e:	23ff      	movs	r3, #255	@ 0xff
 8001090:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b088      	sub	sp, #32
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80010b4:	f247 1370 	movw	r3, #29040	@ 0x7170
 80010b8:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d070      	beq.n	80011a2 <bme68x_set_heatr_conf+0x104>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff ff6a 	bl	8000f9c <bme68x_set_op_mode>
 80010c8:	4603      	mov	r3, r0
 80010ca:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80010cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80010d4:	f107 021c 	add.w	r2, r7, #28
 80010d8:	7bf9      	ldrb	r1, [r7, #15]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f000 fa1e 	bl	800151e <set_conf>
 80010e2:	4603      	mov	r3, r0
 80010e4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80010e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d15b      	bne.n	80011a6 <bme68x_set_heatr_conf+0x108>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80010ee:	f107 0118 	add.w	r1, r7, #24
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	2070      	movs	r0, #112	@ 0x70
 80010f8:	f7ff fdbf 	bl	8000c7a <bme68x_get_regs>
 80010fc:	4603      	mov	r3, r0
 80010fe:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001100:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d14e      	bne.n	80011a6 <bme68x_set_heatr_conf+0x108>
            {
                if (conf->enable == BME68X_ENABLE)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10b      	bne.n	8001128 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001110:	2300      	movs	r3, #0
 8001112:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 800111c:	2302      	movs	r3, #2
 800111e:	777b      	strb	r3, [r7, #29]
 8001120:	e006      	b.n	8001130 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001122:	2301      	movs	r3, #1
 8001124:	777b      	strb	r3, [r7, #29]
 8001126:	e003      	b.n	8001130 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8001128:	2301      	movs	r3, #1
 800112a:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 800112c:	2300      	movs	r3, #0
 800112e:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001130:	7e3b      	ldrb	r3, [r7, #24]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f023 0308 	bic.w	r3, r3, #8
 8001138:	b25a      	sxtb	r2, r3
 800113a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	b25b      	sxtb	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b25b      	sxtb	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001150:	7e7b      	ldrb	r3, [r7, #25]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f023 030f 	bic.w	r3, r3, #15
 8001158:	b25a      	sxtb	r2, r3
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	b25b      	sxtb	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b25b      	sxtb	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800116c:	7e7b      	ldrb	r3, [r7, #25]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001174:	b25a      	sxtb	r2, r3
 8001176:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	b25b      	sxtb	r3, r3
 800117e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001182:	b25b      	sxtb	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800118c:	f107 0118 	add.w	r1, r7, #24
 8001190:	f107 0014 	add.w	r0, r7, #20
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f7ff fce0 	bl	8000b5c <bme68x_set_regs>
 800119c:	4603      	mov	r3, r0
 800119e:	77fb      	strb	r3, [r7, #31]
 80011a0:	e001      	b.n	80011a6 <bme68x_set_heatr_conf+0x108>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80011a2:	23ff      	movs	r3, #255	@ 0xff
 80011a4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80011a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b08b      	sub	sp, #44	@ 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80011c6:	d902      	bls.n	80011ce <calc_res_heat+0x1a>
    {
        temp = 400;
 80011c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80011cc:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80011e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80012f8 <calc_res_heat+0x144>
 80011e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80012fc <calc_res_heat+0x148>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001300 <calc_res_heat+0x14c>
 800120a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001304 <calc_res_heat+0x150>
 8001212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001216:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001228:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001308 <calc_res_heat+0x154>
 800122c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001230:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800124a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800124e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001268:	edd7 7a07 	vldr	s15, [r7, #28]
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	ed97 7a06 	vldr	s14, [r7, #24]
 8001274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001278:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800128e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001292:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800129a:	edd7 7a05 	vldr	s15, [r7, #20]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800130c <calc_res_heat+0x158>
 80012b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012bc:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80012c0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80012c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80012cc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80012d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80012d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001310 <calc_res_heat+0x15c>
 80012d8:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80012dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80012e4:	793b      	ldrb	r3, [r7, #4]
 80012e6:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	372c      	adds	r7, #44	@ 0x2c
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	42440000 	.word	0x42440000
 80012fc:	47000000 	.word	0x47000000
 8001300:	3a03126f 	.word	0x3a03126f
 8001304:	3b1a0275 	.word	0x3b1a0275
 8001308:	44800000 	.word	0x44800000
 800130c:	3b03126f 	.word	0x3b03126f
 8001310:	4059999a 	.word	0x4059999a

08001314 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8001328:	d308      	bcc.n	800133c <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800132a:	23ff      	movs	r3, #255	@ 0xff
 800132c:	73bb      	strb	r3, [r7, #14]
 800132e:	e00f      	b.n	8001350 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3301      	adds	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001340:	d8f6      	bhi.n	8001330 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8001350:	7bbb      	ldrb	r3, [r7, #14]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <set_mem_page>:
    return rslt;
}

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	6039      	str	r1, [r7, #0]
 8001368:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f000 f8b8 	bl	80014e0 <null_ptr_check>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d14f      	bne.n	800141c <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da02      	bge.n	800138a <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]
 8001388:	e001      	b.n	800138e <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800138a:	2310      	movs	r3, #16
 800138c:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	7b5b      	ldrb	r3, [r3, #13]
 8001392:	7bba      	ldrb	r2, [r7, #14]
 8001394:	429a      	cmp	r2, r3
 8001396:	d041      	beq.n	800141c <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	7bba      	ldrb	r2, [r7, #14]
 800139c:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f107 010d 	add.w	r1, r7, #13
 80013aa:	2201      	movs	r2, #1
 80013ac:	20f3      	movs	r0, #243	@ 0xf3
 80013ae:	47a0      	blx	r4
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80013c4:	23fe      	movs	r3, #254	@ 0xfe
 80013c6:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d125      	bne.n	800141c <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80013d0:	7b7b      	ldrb	r3, [r7, #13]
 80013d2:	f023 0310 	bic.w	r3, r3, #16
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7b5b      	ldrb	r3, [r3, #13]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f107 010d 	add.w	r1, r7, #13
 80013fe:	2201      	movs	r2, #1
 8001400:	2073      	movs	r0, #115	@ 0x73
 8001402:	47a0      	blx	r4
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001418:	23fe      	movs	r3, #254	@ 0xfe
 800141a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}

08001428 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f855 	bl	80014e0 <null_ptr_check>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11b      	bne.n	800147a <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f107 010e 	add.w	r1, r7, #14
 800144e:	2201      	movs	r2, #1
 8001450:	20f3      	movs	r0, #243	@ 0xf3
 8001452:	47a0      	blx	r4
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8001468:	23fe      	movs	r3, #254	@ 0xfe
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e005      	b.n	800147a <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	b2da      	uxtb	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}

08001486 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	460b      	mov	r3, r1
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f823 	bl	80014e0 <null_ptr_check>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d015      	beq.n	80014d0 <boundary_check+0x4a>
 80014a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	7afa      	ldrb	r2, [r7, #11]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d20e      	bcs.n	80014d4 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	7afa      	ldrb	r2, [r7, #11]
 80014ba:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 80014ce:	e001      	b.n	80014d4 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80014d0:	23ff      	movs	r3, #255	@ 0xff
 80014d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80014d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <null_ptr_check+0x2a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <null_ptr_check+0x2a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <null_ptr_check+0x2a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800150a:	23ff      	movs	r3, #255	@ 0xff
 800150c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 800151e:	b590      	push	{r4, r7, lr}
 8001520:	b093      	sub	sp, #76	@ 0x4c
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	460b      	mov	r3, r1
 800152c:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 800153a:	236e      	movs	r3, #110	@ 0x6e
 800153c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001540:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	811a      	strh	r2, [r3, #8]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800154c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	811a      	strh	r2, [r3, #8]

    switch (op_mode)
 8001570:	7afb      	ldrb	r3, [r7, #11]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d024      	beq.n	80015c0 <set_conf+0xa2>
 8001576:	2b03      	cmp	r3, #3
 8001578:	f300 80f9 	bgt.w	800176e <set_conf+0x250>
 800157c:	2b01      	cmp	r3, #1
 800157e:	d002      	beq.n	8001586 <set_conf+0x68>
 8001580:	2b02      	cmp	r3, #2
 8001582:	d07c      	beq.n	800167e <set_conf+0x160>
 8001584:	e0f3      	b.n	800176e <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8001586:	235a      	movs	r3, #90	@ 0x5a
 8001588:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	885b      	ldrh	r3, [r3, #2]
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe0e 	bl	80011b4 <calc_res_heat>
 8001598:	4603      	mov	r3, r0
 800159a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 800159e:	2364      	movs	r3, #100	@ 0x64
 80015a0:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	889b      	ldrh	r3, [r3, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff feb3 	bl	8001314 <calc_gas_wait>
 80015ae:	4603      	mov	r3, r0
 80015b0:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 80015be:	e0db      	b.n	8001778 <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <set_conf+0xb2>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80015d0:	23ff      	movs	r3, #255	@ 0xff
 80015d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80015d6:	e0cf      	b.n	8001778 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80015de:	e03f      	b.n	8001660 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80015e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80015e4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80015e8:	325a      	adds	r2, #90	@ 0x5a
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	3348      	adds	r3, #72	@ 0x48
 80015ee:	443b      	add	r3, r7
 80015f0:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fdd3 	bl	80011b4 <calc_res_heat>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001616:	443b      	add	r3, r7
 8001618:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800161c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001620:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001624:	3264      	adds	r2, #100	@ 0x64
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	3348      	adds	r3, #72	@ 0x48
 800162a:	443b      	add	r3, r7
 800162c:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe66 	bl	8001314 <calc_gas_wait>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001650:	443b      	add	r3, r7
 8001652:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8001656:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800165a:	3301      	adds	r3, #1
 800165c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	7c1b      	ldrb	r3, [r3, #16]
 8001664:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001668:	429a      	cmp	r2, r3
 800166a:	d3b9      	bcc.n	80015e0 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	7c1a      	ldrb	r2, [r3, #16]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	7c1b      	ldrb	r3, [r3, #16]
 8001678:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 800167c:	e07c      	b.n	8001778 <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <set_conf+0x170>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 800168e:	23ff      	movs	r3, #255	@ 0xff
 8001690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8001694:	e070      	b.n	8001778 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8a5b      	ldrh	r3, [r3, #18]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 800169e:	2303      	movs	r3, #3
 80016a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80016aa:	e03a      	b.n	8001722 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80016ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80016b0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80016b4:	325a      	adds	r2, #90	@ 0x5a
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	3348      	adds	r3, #72	@ 0x48
 80016ba:	443b      	add	r3, r7
 80016bc:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fd6d 	bl	80011b4 <calc_res_heat>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80016e2:	443b      	add	r3, r7
 80016e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80016e8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80016ec:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80016f0:	3264      	adds	r2, #100	@ 0x64
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	3348      	adds	r3, #72	@ 0x48
 80016f6:	443b      	add	r3, r7
 80016f8:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	3348      	adds	r3, #72	@ 0x48
 8001712:	443b      	add	r3, r7
 8001714:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8001718:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800171c:	3301      	adds	r3, #1
 800171e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	7c1b      	ldrb	r3, [r3, #16]
 8001726:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800172a:	429a      	cmp	r2, r3
 800172c:	d3be      	bcc.n	80016ac <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	7c1a      	ldrb	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	7c1b      	ldrb	r3, [r3, #16]
 800173a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8a5b      	ldrh	r3, [r3, #18]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f83e 	bl	80017c4 <calc_heatr_dur_shared>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 800174e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8001756:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800175a:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	f7ff f9fb 	bl	8000b5c <bme68x_set_regs>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 800176c:	e003      	b.n	8001776 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001774:	e000      	b.n	8001778 <set_conf+0x25a>
            break;
 8001776:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8001778:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10b      	bne.n	8001798 <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8001780:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8001784:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001788:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f7ff f9e5 	bl	8000b5c <bme68x_set_regs>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 8001798:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80017a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80017a4:	f107 0114 	add.w	r1, r7, #20
 80017a8:	f107 0020 	add.w	r0, r7, #32
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f7ff f9d5 	bl	8000b5c <bme68x_set_regs>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80017b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80017bc:	4618      	mov	r0, r3
 80017be:	374c      	adds	r7, #76	@ 0x4c
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}

080017c4 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	f240 7282 	movw	r2, #1922	@ 0x782
 80017d8:	4293      	cmp	r3, r2
 80017da:	d902      	bls.n	80017e2 <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 80017dc:	23ff      	movs	r3, #255	@ 0xff
 80017de:	73bb      	strb	r3, [r7, #14]
 80017e0:	e01d      	b.n	800181e <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017e8:	fb03 f202 	mul.w	r2, r3, r2
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <calc_heatr_dur_shared+0x68>)
 80017ee:	fba3 1302 	umull	r1, r3, r3, r2
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	0852      	lsrs	r2, r2, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 80017fc:	e005      	b.n	800180a <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3301      	adds	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b3f      	cmp	r3, #63	@ 0x3f
 800180e:	d8f6      	bhi.n	80017fe <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	019b      	lsls	r3, r3, #6
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 800181e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	12c8b89f 	.word	0x12c8b89f

08001830 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	@ 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8001838:	f107 010c 	add.w	r1, r7, #12
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2217      	movs	r2, #23
 8001840:	208a      	movs	r0, #138	@ 0x8a
 8001842:	f7ff fa1a 	bl	8000c7a <bme68x_get_regs>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 800184c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	f103 0117 	add.w	r1, r3, #23
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	220e      	movs	r2, #14
 8001860:	20e1      	movs	r0, #225	@ 0xe1
 8001862:	f7ff fa0a 	bl	8000c7a <bme68x_get_regs>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 800186c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10b      	bne.n	800188c <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2205      	movs	r2, #5
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff f9fa 	bl	8000c7a <bme68x_get_regs>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 800188c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 80d6 	bne.w	8001a42 <get_calib_data+0x212>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8001896:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800189a:	b21b      	sxth	r3, r3
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21a      	sxth	r2, r3
 80018a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 80018b0:	7b7b      	ldrb	r3, [r7, #13]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	7b3b      	ldrb	r3, [r7, #12]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 80018ce:	7c7b      	ldrb	r3, [r7, #17]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	7c3b      	ldrb	r3, [r7, #16]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21b      	sxth	r3, r3
 80018de:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 80018e4:	7cfb      	ldrb	r3, [r7, #19]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7cbb      	ldrb	r3, [r7, #18]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80018f8:	7d3b      	ldrb	r3, [r7, #20]
 80018fa:	b25a      	sxtb	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	b21b      	sxth	r3, r3
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8001916:	7e7b      	ldrb	r3, [r7, #25]
 8001918:	b21b      	sxth	r3, r3
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	7e3b      	ldrb	r3, [r7, #24]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 800192a:	7efb      	ldrb	r3, [r7, #27]
 800192c:	b25a      	sxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8001934:	7ebb      	ldrb	r3, [r7, #26]
 8001936:	b25a      	sxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	b21b      	sxth	r3, r3
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b21a      	sxth	r2, r3
 8001946:	7fbb      	ldrb	r3, [r7, #30]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8001952:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001956:	b21b      	sxth	r3, r3
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 800196a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001974:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001978:	b21b      	sxth	r3, r3
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 800197e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001982:	b21b      	sxth	r3, r3
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800198a:	4313      	orrs	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8001994:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001998:	b21b      	sxth	r3, r3
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	b21a      	sxth	r2, r3
 800199e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 80019b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 80019bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019c0:	b25a      	sxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 80019c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ca:	b25a      	sxtb	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 80019d0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 80019d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80019dc:	b25a      	sxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 80019e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019e6:	b25a      	sxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 80019ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8001a04:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8001a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da00      	bge.n	8001a1c <get_calib_data+0x1ec>
 8001a1a:	330f      	adds	r3, #15
 8001a1c:	111b      	asrs	r3, r3, #4
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8001a26:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001a2a:	b25a      	sxtb	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8001a32:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	111b      	asrs	r3, r3, #4
 8001a3a:	b25a      	sxtb	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8001a42:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3738      	adds	r7, #56	@ 0x38
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8001a5a:	f107 010e 	add.w	r1, r7, #14
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	20f0      	movs	r0, #240	@ 0xf0
 8001a64:	f7ff f909 	bl	8000c7a <bme68x_get_regs>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <PZEM_Init>:
        }
    }
    return crc;
}

void PZEM_Init(UART_HandleTypeDef *huart) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(huart, rxBuffer, PZEM_RESPONSE_SIZE);
 8001a90:	2207      	movs	r2, #7
 8001a92:	4904      	ldr	r1, [pc, #16]	@ (8001aa4 <PZEM_Init+0x1c>)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 fa29 	bl	8005eec <HAL_UART_Receive_IT>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200000dc 	.word	0x200000dc

08001aa8 <PZEM_RequestVoltage>:

// ========== Request Commands ==========

void PZEM_RequestVoltage(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
    uint8_t cmd[] = {0x01, 0x04, 0x00, 0x00, 0x00, 0x02, 0x71, 0xCB};
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <PZEM_RequestVoltage+0x28>)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab6:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001aba:	4639      	mov	r1, r7
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <PZEM_RequestVoltage+0x2c>)
 8001ac4:	f004 f987 	bl	8005dd6 <HAL_UART_Transmit>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	0800a884 	.word	0x0800a884
 8001ad4:	20000654 	.word	0x20000654

08001ad8 <PZEM_RequestCurrent>:

void PZEM_RequestCurrent(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
    uint8_t cmd[] = {0x01, 0x04, 0x00, 0x02, 0x00, 0x02, 0x90, 0x0A};
 8001ade:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <PZEM_RequestCurrent+0x28>)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae6:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001aea:	4639      	mov	r1, r7
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	2208      	movs	r2, #8
 8001af2:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <PZEM_RequestCurrent+0x2c>)
 8001af4:	f004 f96f 	bl	8005dd6 <HAL_UART_Transmit>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	0800a88c 	.word	0x0800a88c
 8001b04:	20000654 	.word	0x20000654

08001b08 <PZEM_RequestPower>:

void PZEM_RequestPower(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
    uint8_t cmd[] = {0x01, 0x04, 0x00, 0x04, 0x00, 0x02, 0x30, 0x0B};
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <PZEM_RequestPower+0x28>)
 8001b10:	463b      	mov	r3, r7
 8001b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b16:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b1a:	4639      	mov	r1, r7
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	2208      	movs	r2, #8
 8001b22:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <PZEM_RequestPower+0x2c>)
 8001b24:	f004 f957 	bl	8005dd6 <HAL_UART_Transmit>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	0800a894 	.word	0x0800a894
 8001b34:	20000654 	.word	0x20000654

08001b38 <PZEM_GetVoltage>:

// ========== Response Parsers ==========

float PZEM_GetVoltage(void) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
    uint16_t raw = (rxBuffer[3] << 8) | rxBuffer[4];
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <PZEM_GetVoltage+0x40>)
 8001b40:	78db      	ldrb	r3, [r3, #3]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <PZEM_GetVoltage+0x40>)
 8001b4a:	791b      	ldrb	r3, [r3, #4]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	80fb      	strh	r3, [r7, #6]
    return raw / 10.0f;
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b66:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	200000dc 	.word	0x200000dc

08001b7c <PZEM_GetCurrent>:

float PZEM_GetCurrent(void) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
    uint16_t raw = (rxBuffer[3] << 8) | rxBuffer[4];
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <PZEM_GetCurrent+0x40>)
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <PZEM_GetCurrent+0x40>)
 8001b8e:	791b      	ldrb	r3, [r3, #4]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	80fb      	strh	r3, [r7, #6]
    return raw / 100.0f;
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001bc0 <PZEM_GetCurrent+0x44>
 8001ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001baa:	eef0 7a66 	vmov.f32	s15, s13
}
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	200000dc 	.word	0x200000dc
 8001bc0:	42c80000 	.word	0x42c80000

08001bc4 <PZEM_GetPower>:

float PZEM_GetPower(void) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
    uint16_t raw = (rxBuffer[3] << 8) | rxBuffer[4];
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <PZEM_GetPower+0x40>)
 8001bcc:	78db      	ldrb	r3, [r3, #3]
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <PZEM_GetPower+0x40>)
 8001bd6:	791b      	ldrb	r3, [r3, #4]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	80fb      	strh	r3, [r7, #6]
    return raw / 10.0f;
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bf2:	eef0 7a66 	vmov.f32	s15, s13
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200000dc 	.word	0x200000dc

08001c08 <PZEM_ReadVoltage>:

// ========== High-Level APIs ==========

float PZEM_ReadVoltage(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    PZEM_RequestVoltage();
 8001c0c:	f7ff ff4c 	bl	8001aa8 <PZEM_RequestVoltage>
    HAL_Delay(100);  // Block until data arrives (use semaphore if RTOS)
 8001c10:	2064      	movs	r0, #100	@ 0x64
 8001c12:	f001 f8df 	bl	8002dd4 <HAL_Delay>
    return PZEM_GetVoltage();
 8001c16:	f7ff ff8f 	bl	8001b38 <PZEM_GetVoltage>
 8001c1a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <PZEM_ReadCurrent>:

float PZEM_ReadCurrent(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    PZEM_RequestCurrent();
 8001c28:	f7ff ff56 	bl	8001ad8 <PZEM_RequestCurrent>
    HAL_Delay(100);
 8001c2c:	2064      	movs	r0, #100	@ 0x64
 8001c2e:	f001 f8d1 	bl	8002dd4 <HAL_Delay>
    return PZEM_GetCurrent();
 8001c32:	f7ff ffa3 	bl	8001b7c <PZEM_GetCurrent>
 8001c36:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <PZEM_ReadPower>:

float PZEM_ReadPower(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    PZEM_RequestPower();
 8001c44:	f7ff ff60 	bl	8001b08 <PZEM_RequestPower>
    HAL_Delay(100);
 8001c48:	2064      	movs	r0, #100	@ 0x64
 8001c4a:	f001 f8c3 	bl	8002dd4 <HAL_Delay>
    return PZEM_GetPower();
 8001c4e:	f7ff ffb9 	bl	8001bc4 <PZEM_GetPower>
 8001c52:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c56:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <PZEM_ReadFrequency>:
float PZEM_ReadFrequency(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
    uint8_t cmd[] = {0x01, 0x04, 0x00, 0x46, 0x00, 0x02, 0xf1, 0x9a}; // Standard read frequency cmd
 8001c62:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <PZEM_ReadFrequency+0x5c>)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6a:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c6e:	1d39      	adds	r1, r7, #4
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	2208      	movs	r2, #8
 8001c76:	4811      	ldr	r0, [pc, #68]	@ (8001cbc <PZEM_ReadFrequency+0x60>)
 8001c78:	f004 f8ad 	bl	8005dd6 <HAL_UART_Transmit>
    HAL_Delay(100);  // wait for response
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	f001 f8a9 	bl	8002dd4 <HAL_Delay>
    uint16_t raw = (rxBuffer[3] << 8) | rxBuffer[4];
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <PZEM_ReadFrequency+0x64>)
 8001c84:	78db      	ldrb	r3, [r3, #3]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <PZEM_ReadFrequency+0x64>)
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	81fb      	strh	r3, [r7, #14]
    return raw / 10.0f;
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ca6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001caa:	eef0 7a66 	vmov.f32	s15, s13
}
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	0800a89c 	.word	0x0800a89c
 8001cbc:	20000654 	.word	0x20000654
 8001cc0:	200000dc 	.word	0x200000dc

08001cc4 <PZEM_ReadEnergy>:

float PZEM_ReadEnergy(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
    uint8_t cmd[] = {0x01, 0x04, 0x00, 0x08, 0x00, 0x02, 0xF1, 0x98};
 8001cca:	4a12      	ldr	r2, [pc, #72]	@ (8001d14 <PZEM_ReadEnergy+0x50>)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd2:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001cd6:	1d39      	adds	r1, r7, #4
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	2208      	movs	r2, #8
 8001cde:	480e      	ldr	r0, [pc, #56]	@ (8001d18 <PZEM_ReadEnergy+0x54>)
 8001ce0:	f004 f879 	bl	8005dd6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001ce4:	2064      	movs	r0, #100	@ 0x64
 8001ce6:	f001 f875 	bl	8002dd4 <HAL_Delay>
    uint16_t raw = (rxBuffer[3] << 8) | rxBuffer[4];
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <PZEM_ReadEnergy+0x58>)
 8001cec:	78db      	ldrb	r3, [r3, #3]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <PZEM_ReadEnergy+0x58>)
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	81fb      	strh	r3, [r7, #14]
    return (float)raw; // Usually in Wh
 8001d00:	89fb      	ldrh	r3, [r7, #14]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0800a8a4 	.word	0x0800a8a4
 8001d18:	20000654 	.word	0x20000654
 8001d1c:	200000dc 	.word	0x200000dc

08001d20 <PZEM_ReadPowerFactor>:

float PZEM_ReadPowerFactor(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
    uint8_t cmd[] = {0x01, 0x04, 0x00, 0x0E, 0x00, 0x02, 0x31, 0x9B};
 8001d26:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <PZEM_ReadPowerFactor+0x5c>)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d2e:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001d32:	1d39      	adds	r1, r7, #4
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4811      	ldr	r0, [pc, #68]	@ (8001d80 <PZEM_ReadPowerFactor+0x60>)
 8001d3c:	f004 f84b 	bl	8005dd6 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001d40:	2064      	movs	r0, #100	@ 0x64
 8001d42:	f001 f847 	bl	8002dd4 <HAL_Delay>
    uint16_t raw = (rxBuffer[3] << 8) | rxBuffer[4];
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <PZEM_ReadPowerFactor+0x64>)
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <PZEM_ReadPowerFactor+0x64>)
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	81fb      	strh	r3, [r7, #14]
    return raw / 100.0f;
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d66:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001d88 <PZEM_ReadPowerFactor+0x68>
 8001d6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d6e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d72:	eeb0 0a67 	vmov.f32	s0, s15
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	0800a8ac 	.word	0x0800a8ac
 8001d80:	20000654 	.word	0x20000654
 8001d84:	200000dc 	.word	0x200000dc
 8001d88:	42c80000 	.word	0x42c80000

08001d8c <Relay_Init>:
#include "relay_control.h"

void Relay_Init(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <Relay_Init+0x5c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <Relay_Init+0x5c>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <Relay_Init+0x5c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;  // Example pins
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4806      	ldr	r0, [pc, #24]	@ (8001dec <Relay_Init+0x60>)
 8001dd2:	f001 f909 	bl	8002fe8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET); // Turn off relays
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2103      	movs	r1, #3
 8001dda:	4804      	ldr	r0, [pc, #16]	@ (8001dec <Relay_Init+0x60>)
 8001ddc:	f001 fa98 	bl	8003310 <HAL_GPIO_WritePin>
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400

08001df0 <USER_initialize>:

extern SPI_HandleTypeDef hspi1;

static DSTATUS Stat = STA_NOINIT;

DSTATUS USER_initialize(BYTE lun) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET); // Deselect SD
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	4808      	ldr	r0, [pc, #32]	@ (8001e20 <USER_initialize+0x30>)
 8001e00:	f001 fa86 	bl	8003310 <HAL_GPIO_WritePin>
    Stat &= ~STA_NOINIT;
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <USER_initialize+0x34>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <USER_initialize+0x34>)
 8001e10:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <USER_initialize+0x34>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40020000 	.word	0x40020000
 8001e24:	20000000 	.word	0x20000000

08001e28 <USER_status>:

DSTATUS USER_status(BYTE lun) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
    return Stat;
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <USER_status+0x1c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <USER_read>:

DRESULT USER_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4603      	mov	r3, r0
 8001e56:	73fb      	strb	r3, [r7, #15]
    // You need to implement actual SPI read here if required
    return RES_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <USER_write>:

DRESULT USER_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
#if _USE_WRITE == 1
    // You need to implement actual SPI write here if required
    return RES_OK;
 8001e76:	2300      	movs	r3, #0
#else
    return RES_PARERR;
#endif
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <USER_ioctl>:

DRESULT USER_ioctl(BYTE lun, BYTE cmd, void *buff) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	603a      	str	r2, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	460b      	mov	r3, r1
 8001e92:	71bb      	strb	r3, [r7, #6]
    return RES_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SSD1306_WriteCommand>:

static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];
static uint8_t SSD1306_CurrentX = 0;
static uint8_t SSD1306_CurrentY = 0;

static void SSD1306_WriteCommand(uint8_t cmd) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0x00, cmd};
 8001eae:	2300      	movs	r3, #0
 8001eb0:	733b      	strb	r3, [r7, #12]
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 8001eb6:	f107 020c 	add.w	r2, r7, #12
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	2178      	movs	r1, #120	@ 0x78
 8001ec4:	4803      	ldr	r0, [pc, #12]	@ (8001ed4 <SSD1306_WriteCommand+0x30>)
 8001ec6:	f001 fb81 	bl	80035cc <HAL_I2C_Master_Transmit>
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000534 	.word	0x20000534

08001ed8 <SSD1306_Init>:

void SSD1306_Init(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    HAL_Delay(100);  // Power-on delay
 8001edc:	2064      	movs	r0, #100	@ 0x64
 8001ede:	f000 ff79 	bl	8002dd4 <HAL_Delay>

    SSD1306_WriteCommand(0xAE); // Display off
 8001ee2:	20ae      	movs	r0, #174	@ 0xae
 8001ee4:	f7ff ffde 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x20); // Set memory addressing mode
 8001ee8:	2020      	movs	r0, #32
 8001eea:	f7ff ffdb 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00); // Horizontal addressing mode
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff ffd8 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xB0); // Page Start Address
 8001ef4:	20b0      	movs	r0, #176	@ 0xb0
 8001ef6:	f7ff ffd5 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xC8); // COM Output Scan Direction remapped
 8001efa:	20c8      	movs	r0, #200	@ 0xc8
 8001efc:	f7ff ffd2 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00); // Low column address
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff ffcf 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x10); // High column address
 8001f06:	2010      	movs	r0, #16
 8001f08:	f7ff ffcc 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x40); // Start line address
 8001f0c:	2040      	movs	r0, #64	@ 0x40
 8001f0e:	f7ff ffc9 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x81); // Contrast control
 8001f12:	2081      	movs	r0, #129	@ 0x81
 8001f14:	f7ff ffc6 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xFF);
 8001f18:	20ff      	movs	r0, #255	@ 0xff
 8001f1a:	f7ff ffc3 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA1); // Segment remap
 8001f1e:	20a1      	movs	r0, #161	@ 0xa1
 8001f20:	f7ff ffc0 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA6); // Normal display (not inverted)
 8001f24:	20a6      	movs	r0, #166	@ 0xa6
 8001f26:	f7ff ffbd 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA8); // Multiplex ratio
 8001f2a:	20a8      	movs	r0, #168	@ 0xa8
 8001f2c:	f7ff ffba 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x3F);
 8001f30:	203f      	movs	r0, #63	@ 0x3f
 8001f32:	f7ff ffb7 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA4); // Output RAM to display
 8001f36:	20a4      	movs	r0, #164	@ 0xa4
 8001f38:	f7ff ffb4 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD3); // Display offset
 8001f3c:	20d3      	movs	r0, #211	@ 0xd3
 8001f3e:	f7ff ffb1 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff ffae 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD5); // Display clock divide ratio/oscillator freq
 8001f48:	20d5      	movs	r0, #213	@ 0xd5
 8001f4a:	f7ff ffab 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xF0);
 8001f4e:	20f0      	movs	r0, #240	@ 0xf0
 8001f50:	f7ff ffa8 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD9); // Pre-charge period
 8001f54:	20d9      	movs	r0, #217	@ 0xd9
 8001f56:	f7ff ffa5 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x22);
 8001f5a:	2022      	movs	r0, #34	@ 0x22
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDA); // COM pins hardware config
 8001f60:	20da      	movs	r0, #218	@ 0xda
 8001f62:	f7ff ff9f 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x12);
 8001f66:	2012      	movs	r0, #18
 8001f68:	f7ff ff9c 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDB); // VCOMH deselect level
 8001f6c:	20db      	movs	r0, #219	@ 0xdb
 8001f6e:	f7ff ff99 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x20);
 8001f72:	2020      	movs	r0, #32
 8001f74:	f7ff ff96 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x8D); // Charge pump setting
 8001f78:	208d      	movs	r0, #141	@ 0x8d
 8001f7a:	f7ff ff93 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x14);
 8001f7e:	2014      	movs	r0, #20
 8001f80:	f7ff ff90 	bl	8001ea4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xAF); // Display ON
 8001f84:	20af      	movs	r0, #175	@ 0xaf
 8001f86:	f7ff ff8d 	bl	8001ea4 <SSD1306_WriteCommand>

    SSD1306_Fill(Black);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f000 f808 	bl	8001fa0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001f90:	f000 f81e 	bl	8001fd0 <SSD1306_UpdateScreen>
    SSD1306_SetCursor(0, 0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f84c 	bl	8002034 <SSD1306_SetCursor>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR color) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == White) ? 0xFF : 0x00, sizeof(SSD1306_Buffer));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <SSD1306_Fill+0x14>
 8001fb0:	23ff      	movs	r3, #255	@ 0xff
 8001fb2:	e000      	b.n	8001fb6 <SSD1306_Fill+0x16>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <SSD1306_Fill+0x2c>)
 8001fbe:	f007 ff2b 	bl	8009e18 <memset>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200000e4 	.word	0x200000e4

08001fd0 <SSD1306_UpdateScreen>:

void SSD1306_Clear(void) {
    SSD1306_Fill(Black);
}

void SSD1306_UpdateScreen(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af04      	add	r7, sp, #16
    for (uint8_t page = 0; page < 8; page++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e01e      	b.n	800201a <SSD1306_UpdateScreen+0x4a>
        SSD1306_WriteCommand(0xB0 + page);
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3b50      	subs	r3, #80	@ 0x50
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff5e 	bl	8001ea4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff ff5b 	bl	8001ea4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x10);
 8001fee:	2010      	movs	r0, #16
 8001ff0:	f7ff ff58 	bl	8001ea4 <SSD1306_WriteCommand>

        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1,
                          &SSD1306_Buffer[SSD1306_WIDTH * page],
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	01db      	lsls	r3, r3, #7
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1,
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800202c <SSD1306_UpdateScreen+0x5c>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	9202      	str	r2, [sp, #8]
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	9201      	str	r2, [sp, #4]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	2240      	movs	r2, #64	@ 0x40
 800200c:	2178      	movs	r1, #120	@ 0x78
 800200e:	4808      	ldr	r0, [pc, #32]	@ (8002030 <SSD1306_UpdateScreen+0x60>)
 8002010:	f001 fbda 	bl	80037c8 <HAL_I2C_Mem_Write>
    for (uint8_t page = 0; page < 8; page++) {
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	3301      	adds	r3, #1
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b07      	cmp	r3, #7
 800201e:	d9dd      	bls.n	8001fdc <SSD1306_UpdateScreen+0xc>
                          SSD1306_WIDTH, HAL_MAX_DELAY);
    }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200000e4 	.word	0x200000e4
 8002030:	20000534 	.word	0x20000534

08002034 <SSD1306_SetCursor>:
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |=  (1 << (y % 8));
    else
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
}

void SSD1306_SetCursor(uint8_t x, uint8_t y) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	460a      	mov	r2, r1
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	4613      	mov	r3, r2
 8002042:	71bb      	strb	r3, [r7, #6]
    SSD1306_CurrentX = x;
 8002044:	4a05      	ldr	r2, [pc, #20]	@ (800205c <SSD1306_SetCursor+0x28>)
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	7013      	strb	r3, [r2, #0]
    SSD1306_CurrentY = y;
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <SSD1306_SetCursor+0x2c>)
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	7013      	strb	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	200004e4 	.word	0x200004e4
 8002060:	200004e5 	.word	0x200004e5

08002064 <StartEnergyTask>:
#define OVER_VOLTAGE_THRESHOLD 250.0f
#define OVER_CURRENT_THRESHOLD 5.0f
#define HIGH_POWER_THRESHOLD   1000.0f

void StartEnergyTask(void *argument)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        // Local variables to store readings
        float voltage = PZEM_ReadVoltage();
 800206c:	f7ff fdcc 	bl	8001c08 <PZEM_ReadVoltage>
 8002070:	ed87 0a07 	vstr	s0, [r7, #28]
        float current = PZEM_ReadCurrent();
 8002074:	f7ff fdd6 	bl	8001c24 <PZEM_ReadCurrent>
 8002078:	ed87 0a06 	vstr	s0, [r7, #24]
        float power   = PZEM_ReadPower();
 800207c:	f7ff fde0 	bl	8001c40 <PZEM_ReadPower>
 8002080:	ed87 0a05 	vstr	s0, [r7, #20]
        float energy  = PZEM_ReadEnergy();
 8002084:	f7ff fe1e 	bl	8001cc4 <PZEM_ReadEnergy>
 8002088:	ed87 0a04 	vstr	s0, [r7, #16]
        float freq    = PZEM_ReadFrequency();
 800208c:	f7ff fde6 	bl	8001c5c <PZEM_ReadFrequency>
 8002090:	ed87 0a03 	vstr	s0, [r7, #12]
        float pf      = PZEM_ReadPowerFactor();
 8002094:	f7ff fe44 	bl	8001d20 <PZEM_ReadPowerFactor>
 8002098:	ed87 0a02 	vstr	s0, [r7, #8]

        // Thread-safe update of shared_data
        if (osMutexAcquire(shared_data.mutex_id, osWaitForever) == osOK)
 800209c:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <StartEnergyTask+0x128>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 fc4a 	bl	800693e <osMutexAcquire>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d116      	bne.n	80020de <StartEnergyTask+0x7a>
        {
            shared_data.pzem.voltage       = voltage;
 80020b0:	4a36      	ldr	r2, [pc, #216]	@ (800218c <StartEnergyTask+0x128>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	6153      	str	r3, [r2, #20]
            shared_data.pzem.current       = current;
 80020b6:	4a35      	ldr	r2, [pc, #212]	@ (800218c <StartEnergyTask+0x128>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6193      	str	r3, [r2, #24]
            shared_data.pzem.power         = power;
 80020bc:	4a33      	ldr	r2, [pc, #204]	@ (800218c <StartEnergyTask+0x128>)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	61d3      	str	r3, [r2, #28]
            shared_data.pzem.energy        = energy;
 80020c2:	4a32      	ldr	r2, [pc, #200]	@ (800218c <StartEnergyTask+0x128>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6213      	str	r3, [r2, #32]
            shared_data.pzem.frequency     = freq;
 80020c8:	4a30      	ldr	r2, [pc, #192]	@ (800218c <StartEnergyTask+0x128>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6253      	str	r3, [r2, #36]	@ 0x24
            shared_data.pzem.power_factor  = pf;
 80020ce:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <StartEnergyTask+0x128>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6293      	str	r3, [r2, #40]	@ 0x28
            osMutexRelease(shared_data.mutex_id);
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <StartEnergyTask+0x128>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fc7b 	bl	80069d4 <osMutexRelease>
        }

        // Debug print
        printf("⚡ Energy Readings:\r\n");
 80020de:	482c      	ldr	r0, [pc, #176]	@ (8002190 <StartEnergyTask+0x12c>)
 80020e0:	f007 fdba 	bl	8009c58 <puts>
        printf("  Voltage: %.2f V\r\n", voltage);
 80020e4:	69f8      	ldr	r0, [r7, #28]
 80020e6:	f7fe fa47 	bl	8000578 <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4829      	ldr	r0, [pc, #164]	@ (8002194 <StartEnergyTask+0x130>)
 80020f0:	f007 fd4a 	bl	8009b88 <iprintf>
        printf("  Current: %.2f A\r\n", current);
 80020f4:	69b8      	ldr	r0, [r7, #24]
 80020f6:	f7fe fa3f 	bl	8000578 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4826      	ldr	r0, [pc, #152]	@ (8002198 <StartEnergyTask+0x134>)
 8002100:	f007 fd42 	bl	8009b88 <iprintf>
        printf("  Power  : %.2f W\r\n", power);
 8002104:	6978      	ldr	r0, [r7, #20]
 8002106:	f7fe fa37 	bl	8000578 <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4823      	ldr	r0, [pc, #140]	@ (800219c <StartEnergyTask+0x138>)
 8002110:	f007 fd3a 	bl	8009b88 <iprintf>
        printf("  Energy : %.2f kWh\r\n", energy);
 8002114:	6938      	ldr	r0, [r7, #16]
 8002116:	f7fe fa2f 	bl	8000578 <__aeabi_f2d>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4820      	ldr	r0, [pc, #128]	@ (80021a0 <StartEnergyTask+0x13c>)
 8002120:	f007 fd32 	bl	8009b88 <iprintf>
        printf("  Freq   : %.2f Hz\r\n", freq);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7fe fa27 	bl	8000578 <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	481d      	ldr	r0, [pc, #116]	@ (80021a4 <StartEnergyTask+0x140>)
 8002130:	f007 fd2a 	bl	8009b88 <iprintf>
        printf("  PF     : %.2f\r\n", pf);
 8002134:	68b8      	ldr	r0, [r7, #8]
 8002136:	f7fe fa1f 	bl	8000578 <__aeabi_f2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	481a      	ldr	r0, [pc, #104]	@ (80021a8 <StartEnergyTask+0x144>)
 8002140:	f007 fd22 	bl	8009b88 <iprintf>

        // Fault detection
        if (voltage > OVER_VOLTAGE_THRESHOLD || current > OVER_CURRENT_THRESHOLD || power > HIGH_POWER_THRESHOLD)
 8002144:	edd7 7a07 	vldr	s15, [r7, #28]
 8002148:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80021ac <StartEnergyTask+0x148>
 800214c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	dc11      	bgt.n	800217a <StartEnergyTask+0x116>
 8002156:	edd7 7a06 	vldr	s15, [r7, #24]
 800215a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800215e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002166:	dc08      	bgt.n	800217a <StartEnergyTask+0x116>
 8002168:	edd7 7a05 	vldr	s15, [r7, #20]
 800216c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80021b0 <StartEnergyTask+0x14c>
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dd02      	ble.n	8002180 <StartEnergyTask+0x11c>
        {
            printf("⚠️ Energy Alert: Abnormal values detected!\r\n");
 800217a:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <StartEnergyTask+0x150>)
 800217c:	f007 fd6c 	bl	8009c58 <puts>
        }

        osDelay(2000); // Delay 2 seconds
 8002180:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002184:	f004 fbc0 	bl	8006908 <osDelay>
    {
 8002188:	e770      	b.n	800206c <StartEnergyTask+0x8>
 800218a:	bf00      	nop
 800218c:	200004e8 	.word	0x200004e8
 8002190:	0800a8b4 	.word	0x0800a8b4
 8002194:	0800a8cc 	.word	0x0800a8cc
 8002198:	0800a8e0 	.word	0x0800a8e0
 800219c:	0800a8f4 	.word	0x0800a8f4
 80021a0:	0800a908 	.word	0x0800a908
 80021a4:	0800a920 	.word	0x0800a920
 80021a8:	0800a938 	.word	0x0800a938
 80021ac:	437a0000 	.word	0x437a0000
 80021b0:	447a0000 	.word	0x447a0000
 80021b4:	0800a94c 	.word	0x0800a94c

080021b8 <StartSensorTask>:
#include "bme680_app.h"
#include "cmsis_os2.h"
#include "shared_data.h"  // 👈 Include shared global variables

void StartSensorTask(void *argument)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    g_temperature = BME680_ReadTemperature();
 80021c0:	f7fe fc1e 	bl	8000a00 <BME680_ReadTemperature>
 80021c4:	eef0 7a40 	vmov.f32	s15, s0
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <StartSensorTask+0x30>)
 80021ca:	edc3 7a00 	vstr	s15, [r3]
g_humidity    = BME680_ReadHumidity();
 80021ce:	f7fe fc25 	bl	8000a1c <BME680_ReadHumidity>
 80021d2:	eef0 7a40 	vmov.f32	s15, s0
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <StartSensorTask+0x34>)
 80021d8:	edc3 7a00 	vstr	s15, [r3]


    osDelay(1000);
 80021dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021e0:	f004 fb92 	bl	8006908 <osDelay>
    g_temperature = BME680_ReadTemperature();
 80021e4:	bf00      	nop
 80021e6:	e7eb      	b.n	80021c0 <StartSensorTask+0x8>
 80021e8:	20000528 	.word	0x20000528
 80021ec:	2000052c 	.word	0x2000052c

080021f0 <ESP_Init>:
    }
}

UART_HandleTypeDef *esp_uart;

void ESP_Init(UART_HandleTypeDef *huart) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    
    esp_uart = huart;
 80021f8:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <ESP_Init+0x30>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(esp_uart, (uint8_t *)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <ESP_Init+0x30>)
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	2204      	movs	r2, #4
 8002208:	4906      	ldr	r1, [pc, #24]	@ (8002224 <ESP_Init+0x34>)
 800220a:	f003 fde4 	bl	8005dd6 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800220e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002212:	f000 fddf 	bl	8002dd4 <HAL_Delay>
    
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000530 	.word	0x20000530
 8002224:	0800a98c 	.word	0x0800a98c

08002228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800222c:	f000 fd60 	bl	8002cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002230:	f000 f894 	bl	800235c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BME680_Init();          // Initialize BME680 sensor
 8002234:	f7fe fb8e 	bl	8000954 <BME680_Init>
  SSD1306_Init();         // Initialize OLED Display
 8002238:	f7ff fe4e 	bl	8001ed8 <SSD1306_Init>
  Relay_Init();           // Initialize Relay GPIOs
 800223c:	f7ff fda6 	bl	8001d8c <Relay_Init>
  PZEM_Init(&huart2);
 8002240:	482d      	ldr	r0, [pc, #180]	@ (80022f8 <main+0xd0>)
 8002242:	f7ff fc21 	bl	8001a88 <PZEM_Init>
  ESP_Init(&huart2);
 8002246:	482c      	ldr	r0, [pc, #176]	@ (80022f8 <main+0xd0>)
 8002248:	f7ff ffd2 	bl	80021f0 <ESP_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224c:	f000 fa2a 	bl	80026a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002250:	f000 f916 	bl	8002480 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002254:	f000 f9d2 	bl	80025fc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002258:	f004 f9d8 	bl	800660c <MX_FATFS_Init>
  MX_RTC_Init();
 800225c:	f000 f93e 	bl	80024dc <MX_RTC_Init>
  MX_I2C1_Init();
 8002260:	f000 f8e0 	bl	8002424 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002264:	f000 f994 	bl	8002590 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 8002268:	f000 f9f2 	bl	8002650 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800226c:	f004 fa70 	bl	8006750 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002270:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <main+0xd4>)
 8002272:	2100      	movs	r1, #0
 8002274:	4822      	ldr	r0, [pc, #136]	@ (8002300 <main+0xd8>)
 8002276:	f004 fab5 	bl	80067e4 <osThreadNew>
 800227a:	4603      	mov	r3, r0
 800227c:	4a21      	ldr	r2, [pc, #132]	@ (8002304 <main+0xdc>)
 800227e:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartSensorTask, NULL, &SensorTask_attributes);
 8002280:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <main+0xe0>)
 8002282:	2100      	movs	r1, #0
 8002284:	4821      	ldr	r0, [pc, #132]	@ (800230c <main+0xe4>)
 8002286:	f004 faad 	bl	80067e4 <osThreadNew>
 800228a:	4603      	mov	r3, r0
 800228c:	4a20      	ldr	r2, [pc, #128]	@ (8002310 <main+0xe8>)
 800228e:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8002290:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <main+0xec>)
 8002292:	2100      	movs	r1, #0
 8002294:	4820      	ldr	r0, [pc, #128]	@ (8002318 <main+0xf0>)
 8002296:	f004 faa5 	bl	80067e4 <osThreadNew>
 800229a:	4603      	mov	r3, r0
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <main+0xf4>)
 800229e:	6013      	str	r3, [r2, #0]

  /* creation of WiFiTask */
  WiFiTaskHandle = osThreadNew(StartWiFiTask, NULL, &WiFiTask_attributes);
 80022a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <main+0xf8>)
 80022a2:	2100      	movs	r1, #0
 80022a4:	481f      	ldr	r0, [pc, #124]	@ (8002324 <main+0xfc>)
 80022a6:	f004 fa9d 	bl	80067e4 <osThreadNew>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002328 <main+0x100>)
 80022ae:	6013      	str	r3, [r2, #0]

  /* creation of RelayTask */
  RelayTaskHandle = osThreadNew(StartRelayControlTask, NULL, &RelayTask_attributes);
 80022b0:	4a1e      	ldr	r2, [pc, #120]	@ (800232c <main+0x104>)
 80022b2:	2100      	movs	r1, #0
 80022b4:	481e      	ldr	r0, [pc, #120]	@ (8002330 <main+0x108>)
 80022b6:	f004 fa95 	bl	80067e4 <osThreadNew>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <main+0x10c>)
 80022be:	6013      	str	r3, [r2, #0]

  /* creation of EnergyTask */
  EnergyTaskHandle = osThreadNew(StartEnergyTask, NULL, &EnergyTask_attributes);
 80022c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002338 <main+0x110>)
 80022c2:	2100      	movs	r1, #0
 80022c4:	481d      	ldr	r0, [pc, #116]	@ (800233c <main+0x114>)
 80022c6:	f004 fa8d 	bl	80067e4 <osThreadNew>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <main+0x118>)
 80022ce:	6013      	str	r3, [r2, #0]

  /* creation of SDLogTask */
  SDLogTaskHandle = osThreadNew(StartSDLogTask, NULL, &SDLogTask_attributes);
 80022d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002344 <main+0x11c>)
 80022d2:	2100      	movs	r1, #0
 80022d4:	481c      	ldr	r0, [pc, #112]	@ (8002348 <main+0x120>)
 80022d6:	f004 fa85 	bl	80067e4 <osThreadNew>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a1b      	ldr	r2, [pc, #108]	@ (800234c <main+0x124>)
 80022de:	6013      	str	r3, [r2, #0]

  /* creation of SystemStatusTas */
  SystemStatusTasHandle = osThreadNew(StartSystemStatusTask, NULL, &SystemStatusTas_attributes);
 80022e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002350 <main+0x128>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	481b      	ldr	r0, [pc, #108]	@ (8002354 <main+0x12c>)
 80022e6:	f004 fa7d 	bl	80067e4 <osThreadNew>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <main+0x130>)
 80022ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80022f0:	f004 fa52 	bl	8006798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <main+0xcc>
 80022f8:	20000654 	.word	0x20000654
 80022fc:	0800aa2c 	.word	0x0800aa2c
 8002300:	08002745 	.word	0x08002745
 8002304:	200006e4 	.word	0x200006e4
 8002308:	0800aa50 	.word	0x0800aa50
 800230c:	080021b9 	.word	0x080021b9
 8002310:	200006e8 	.word	0x200006e8
 8002314:	0800aa74 	.word	0x0800aa74
 8002318:	08002755 	.word	0x08002755
 800231c:	200006ec 	.word	0x200006ec
 8002320:	0800aa98 	.word	0x0800aa98
 8002324:	08002765 	.word	0x08002765
 8002328:	200006f0 	.word	0x200006f0
 800232c:	0800aabc 	.word	0x0800aabc
 8002330:	08002775 	.word	0x08002775
 8002334:	200006f4 	.word	0x200006f4
 8002338:	0800aae0 	.word	0x0800aae0
 800233c:	08002065 	.word	0x08002065
 8002340:	200006f8 	.word	0x200006f8
 8002344:	0800ab04 	.word	0x0800ab04
 8002348:	08002785 	.word	0x08002785
 800234c:	200006fc 	.word	0x200006fc
 8002350:	0800ab28 	.word	0x0800ab28
 8002354:	08002795 	.word	0x08002795
 8002358:	20000700 	.word	0x20000700

0800235c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b094      	sub	sp, #80	@ 0x50
 8002360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	2234      	movs	r2, #52	@ 0x34
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f007 fd54 	bl	8009e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	4b25      	ldr	r3, [pc, #148]	@ (800241c <SystemClock_Config+0xc0>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	4a24      	ldr	r2, [pc, #144]	@ (800241c <SystemClock_Config+0xc0>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <SystemClock_Config+0xc0>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800239c:	2300      	movs	r3, #0
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <SystemClock_Config+0xc4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002420 <SystemClock_Config+0xc4>)
 80023aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <SystemClock_Config+0xc4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80023bc:	230a      	movs	r3, #10
 80023be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023c8:	2310      	movs	r3, #16
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80023cc:	2301      	movs	r3, #1
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 ff45 	bl	8005268 <HAL_RCC_OscConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80023e4:	f000 f9de 	bl	80027a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	230f      	movs	r3, #15
 80023ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f002 f942 	bl	800468c <HAL_RCC_ClockConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800240e:	f000 f9c9 	bl	80027a4 <Error_Handler>
  }
}
 8002412:	bf00      	nop
 8002414:	3750      	adds	r7, #80	@ 0x50
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000

08002424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <MX_I2C1_Init+0x50>)
 800242a:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <MX_I2C1_Init+0x54>)
 800242c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <MX_I2C1_Init+0x50>)
 8002430:	4a12      	ldr	r2, [pc, #72]	@ (800247c <MX_I2C1_Init+0x58>)
 8002432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002434:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <MX_I2C1_Init+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800243a:	4b0e      	ldr	r3, [pc, #56]	@ (8002474 <MX_I2C1_Init+0x50>)
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <MX_I2C1_Init+0x50>)
 8002442:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002448:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <MX_I2C1_Init+0x50>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <MX_I2C1_Init+0x50>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002454:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <MX_I2C1_Init+0x50>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <MX_I2C1_Init+0x50>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002460:	4804      	ldr	r0, [pc, #16]	@ (8002474 <MX_I2C1_Init+0x50>)
 8002462:	f000 ff6f 	bl	8003344 <HAL_I2C_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800246c:	f000 f99a 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000534 	.word	0x20000534
 8002478:	40005400 	.word	0x40005400
 800247c:	000186a0 	.word	0x000186a0

08002480 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <MX_I2C2_Init+0x50>)
 8002486:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <MX_I2C2_Init+0x54>)
 8002488:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_I2C2_Init+0x50>)
 800248c:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <MX_I2C2_Init+0x58>)
 800248e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <MX_I2C2_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_I2C2_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <MX_I2C2_Init+0x50>)
 800249e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <MX_I2C2_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <MX_I2C2_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <MX_I2C2_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <MX_I2C2_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	@ (80024d0 <MX_I2C2_Init+0x50>)
 80024be:	f000 ff41 	bl	8003344 <HAL_I2C_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024c8:	f000 f96c 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000588 	.word	0x20000588
 80024d4:	40005800 	.word	0x40005800
 80024d8:	000186a0 	.word	0x000186a0

080024dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024f0:	2300      	movs	r3, #0
 80024f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <MX_RTC_Init+0xac>)
 80024f6:	4a25      	ldr	r2, [pc, #148]	@ (800258c <MX_RTC_Init+0xb0>)
 80024f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024fa:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <MX_RTC_Init+0xac>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <MX_RTC_Init+0xac>)
 8002502:	227f      	movs	r2, #127	@ 0x7f
 8002504:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <MX_RTC_Init+0xac>)
 8002508:	22ff      	movs	r2, #255	@ 0xff
 800250a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800250c:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <MX_RTC_Init+0xac>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <MX_RTC_Init+0xac>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <MX_RTC_Init+0xac>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800251e:	481a      	ldr	r0, [pc, #104]	@ (8002588 <MX_RTC_Init+0xac>)
 8002520:	f003 f940 	bl	80057a4 <HAL_RTC_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800252a:	f000 f93b 	bl	80027a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800252e:	2300      	movs	r3, #0
 8002530:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002532:	2300      	movs	r3, #0
 8002534:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002536:	2300      	movs	r3, #0
 8002538:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	480f      	ldr	r0, [pc, #60]	@ (8002588 <MX_RTC_Init+0xac>)
 800254a:	f003 f9ac 	bl	80058a6 <HAL_RTC_SetTime>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002554:	f000 f926 	bl	80027a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002558:	2301      	movs	r3, #1
 800255a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800255c:	2301      	movs	r3, #1
 800255e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002560:	2301      	movs	r3, #1
 8002562:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002564:	2300      	movs	r3, #0
 8002566:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	2201      	movs	r2, #1
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	@ (8002588 <MX_RTC_Init+0xac>)
 8002570:	f003 fa33 	bl	80059da <HAL_RTC_SetDate>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800257a:	f000 f913 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200005dc 	.word	0x200005dc
 800258c:	40002800 	.word	0x40002800

08002590 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <MX_SPI2_Init+0x64>)
 8002596:	4a18      	ldr	r2, [pc, #96]	@ (80025f8 <MX_SPI2_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <MX_SPI2_Init+0x64>)
 800259c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ae:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025dc:	220a      	movs	r2, #10
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <MX_SPI2_Init+0x64>)
 80025e2:	f003 fb1f 	bl	8005c24 <HAL_SPI_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025ec:	f000 f8da 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200005fc 	.word	0x200005fc
 80025f8:	40003800 	.word	0x40003800

080025fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002602:	4a12      	ldr	r2, [pc, #72]	@ (800264c <MX_USART2_UART_Init+0x50>)
 8002604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800260c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	@ (8002648 <MX_USART2_UART_Init+0x4c>)
 8002634:	f003 fb7f 	bl	8005d36 <HAL_UART_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800263e:	f000 f8b1 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000654 	.word	0x20000654
 800264c:	40004400 	.word	0x40004400

08002650 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 8002656:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <MX_USART6_UART_Init+0x50>)
 8002658:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 800265c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002660:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	@ (800269c <MX_USART6_UART_Init+0x4c>)
 8002688:	f003 fb55 	bl	8005d36 <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002692:	f000 f887 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000069c 	.word	0x2000069c
 80026a0:	40011400 	.word	0x40011400

080026a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <MX_GPIO_Init+0x98>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a1e      	ldr	r2, [pc, #120]	@ (800273c <MX_GPIO_Init+0x98>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <MX_GPIO_Init+0x98>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <MX_GPIO_Init+0x98>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a17      	ldr	r2, [pc, #92]	@ (800273c <MX_GPIO_Init+0x98>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <MX_GPIO_Init+0x98>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_GPIO_Init+0x98>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a10      	ldr	r2, [pc, #64]	@ (800273c <MX_GPIO_Init+0x98>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <MX_GPIO_Init+0x98>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	21a0      	movs	r1, #160	@ 0xa0
 8002712:	480b      	ldr	r0, [pc, #44]	@ (8002740 <MX_GPIO_Init+0x9c>)
 8002714:	f000 fdfc 	bl	8003310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002718:	23a0      	movs	r3, #160	@ 0xa0
 800271a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271c:	2301      	movs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	4619      	mov	r1, r3
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <MX_GPIO_Init+0x9c>)
 8002730:	f000 fc5a 	bl	8002fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002734:	bf00      	nop
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000

08002744 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800274c:	2001      	movs	r0, #1
 800274e:	f004 f8db 	bl	8006908 <osDelay>
 8002752:	e7fb      	b.n	800274c <StartDefaultTask+0x8>

08002754 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800275c:	2001      	movs	r0, #1
 800275e:	f004 f8d3 	bl	8006908 <osDelay>
 8002762:	e7fb      	b.n	800275c <StartDisplayTask+0x8>

08002764 <StartWiFiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWiFiTask */
void StartWiFiTask(void *argument)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWiFiTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800276c:	2001      	movs	r0, #1
 800276e:	f004 f8cb 	bl	8006908 <osDelay>
 8002772:	e7fb      	b.n	800276c <StartWiFiTask+0x8>

08002774 <StartRelayControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRelayControlTask */
void StartRelayControlTask(void *argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRelayControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800277c:	2001      	movs	r0, #1
 800277e:	f004 f8c3 	bl	8006908 <osDelay>
 8002782:	e7fb      	b.n	800277c <StartRelayControlTask+0x8>

08002784 <StartSDLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDLogTask */
void StartSDLogTask(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f004 f8bb 	bl	8006908 <osDelay>
 8002792:	e7fb      	b.n	800278c <StartSDLogTask+0x8>

08002794 <StartSystemStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSystemStatusTask */
void StartSystemStatusTask(void *argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSystemStatusTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800279c:	2001      	movs	r0, #1
 800279e:	f004 f8b3 	bl	8006908 <osDelay>
 80027a2:	e7fb      	b.n	800279c <StartSystemStatusTask+0x8>

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <Error_Handler+0x8>

080027b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_MspInit+0x54>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a11      	ldr	r2, [pc, #68]	@ (8002804 <HAL_MspInit+0x54>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_MspInit+0x54>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_MspInit+0x54>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <HAL_MspInit+0x54>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_MspInit+0x54>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	210f      	movs	r1, #15
 80027f2:	f06f 0001 	mvn.w	r0, #1
 80027f6:	f000 fbce 	bl	8002f96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a32      	ldr	r2, [pc, #200]	@ (80028f0 <HAL_I2C_MspInit+0xe8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12c      	bne.n	8002884 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	4b31      	ldr	r3, [pc, #196]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a30      	ldr	r2, [pc, #192]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002846:	23c0      	movs	r3, #192	@ 0xc0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800284a:	2312      	movs	r3, #18
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002856:	2304      	movs	r3, #4
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	4619      	mov	r1, r3
 8002860:	4825      	ldr	r0, [pc, #148]	@ (80028f8 <HAL_I2C_MspInit+0xf0>)
 8002862:	f000 fbc1 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	4b22      	ldr	r3, [pc, #136]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a21      	ldr	r2, [pc, #132]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 8002870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002882:	e031      	b.n	80028e8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <HAL_I2C_MspInit+0xf4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d12c      	bne.n	80028e8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80028aa:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b0:	2312      	movs	r3, #18
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b8:	2303      	movs	r3, #3
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028bc:	2304      	movs	r3, #4
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <HAL_I2C_MspInit+0xf0>)
 80028c8:	f000 fb8e 	bl	8002fe8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	4a07      	ldr	r2, [pc, #28]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 80028d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028da:	6413      	str	r3, [r2, #64]	@ 0x40
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_I2C_MspInit+0xec>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3730      	adds	r7, #48	@ 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40005400 	.word	0x40005400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40005800 	.word	0x40005800

08002900 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b09a      	sub	sp, #104	@ 0x68
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	225c      	movs	r2, #92	@ 0x5c
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f007 fa81 	bl	8009e18 <memset>
  if(hrtc->Instance==RTC)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_RTC_MspInit+0x4c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002920:	2320      	movs	r3, #32
 8002922:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002928:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4618      	mov	r0, r3
 8002930:	f001 ffc6 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800293a:	f7ff ff33 	bl	80027a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800293e:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <HAL_RTC_MspInit+0x50>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002944:	bf00      	nop
 8002946:	3768      	adds	r7, #104	@ 0x68
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40002800 	.word	0x40002800
 8002950:	42470e3c 	.word	0x42470e3c

08002954 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	@ (80029d8 <HAL_SPI_MspInit+0x84>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12c      	bne.n	80029d0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <HAL_SPI_MspInit+0x88>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <HAL_SPI_MspInit+0x88>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_SPI_MspInit+0x88>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_SPI_MspInit+0x88>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <HAL_SPI_MspInit+0x88>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <HAL_SPI_MspInit+0x88>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029ae:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029bc:	2303      	movs	r3, #3
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c0:	2305      	movs	r3, #5
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <HAL_SPI_MspInit+0x8c>)
 80029cc:	f000 fb0c 	bl	8002fe8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	@ 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40003800 	.word	0x40003800
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020400 	.word	0x40020400

080029e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_UART_MspInit+0xe8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d12c      	bne.n	8002a60 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a3e:	230c      	movs	r3, #12
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a4e:	2307      	movs	r3, #7
 8002a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4619      	mov	r1, r3
 8002a58:	481e      	ldr	r0, [pc, #120]	@ (8002ad4 <HAL_UART_MspInit+0xf0>)
 8002a5a:	f000 fac5 	bl	8002fe8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a5e:	e030      	b.n	8002ac2 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_UART_MspInit+0xf4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d12b      	bne.n	8002ac2 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a74:	f043 0320 	orr.w	r3, r3, #32
 8002a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_UART_MspInit+0xec>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa2:	23c0      	movs	r3, #192	@ 0xc0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	4619      	mov	r1, r3
 8002abc:	4807      	ldr	r0, [pc, #28]	@ (8002adc <HAL_UART_MspInit+0xf8>)
 8002abe:	f000 fa93 	bl	8002fe8 <HAL_GPIO_Init>
}
 8002ac2:	bf00      	nop
 8002ac4:	3730      	adds	r7, #48	@ 0x30
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40004400 	.word	0x40004400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40011400 	.word	0x40011400
 8002adc:	40020800 	.word	0x40020800

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <HardFault_Handler+0x4>

08002af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <MemManage_Handler+0x4>

08002af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f000 f93b 	bl	8002d94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b1e:	f005 fd47 	bl	80085b0 <xTaskGetSchedulerState>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d001      	beq.n	8002b2c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b28:	f006 fc3e 	bl	80093a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e00a      	b.n	8002b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b42:	f3af 8000 	nop.w
 8002b46:	4601      	mov	r1, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	60ba      	str	r2, [r7, #8]
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbf0      	blt.n	8002b42 <_read+0x12>
  }

  return len;
 8002b60:	687b      	ldr	r3, [r7, #4]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e009      	b.n	8002b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60ba      	str	r2, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	dbf1      	blt.n	8002b7c <_write+0x12>
  }
  return len;
 8002b98:	687b      	ldr	r3, [r7, #4]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_close>:

int _close(int file)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bca:	605a      	str	r2, [r3, #4]
  return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_isatty>:

int _isatty(int file)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <_sbrk+0x5c>)
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <_sbrk+0x60>)
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c28:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <_sbrk+0x64>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <_sbrk+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c3c:	f007 f94a 	bl	8009ed4 <__errno>
 8002c40:	4603      	mov	r3, r0
 8002c42:	220c      	movs	r2, #12
 8002c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e009      	b.n	8002c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <_sbrk+0x64>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20020000 	.word	0x20020000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	20000704 	.word	0x20000704
 8002c74:	200051c0 	.word	0x200051c0

08002c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SystemInit+0x20>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <SystemInit+0x20>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ca0:	f7ff ffea 	bl	8002c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	@ (8002cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002cca:	f007 f909 	bl	8009ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cce:	f7ff faab 	bl	8002228 <main>
  bx  lr    
 8002cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ce0:	0800aba8 	.word	0x0800aba8
  ldr r2, =_sbss
 8002ce4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ce8:	200051bc 	.word	0x200051bc

08002cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC_IRQHandler>
	...

08002cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <HAL_Init+0x40>)
 8002cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <HAL_Init+0x40>)
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <HAL_Init+0x40>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d18:	2003      	movs	r0, #3
 8002d1a:	f000 f931 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1e:	200f      	movs	r0, #15
 8002d20:	f000 f808 	bl	8002d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d24:	f7ff fd44 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023c00 	.word	0x40023c00

08002d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_InitTick+0x54>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_InitTick+0x58>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f93b 	bl	8002fce <HAL_SYSTICK_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00e      	b.n	8002d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d80a      	bhi.n	8002d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f000 f911 	bl	8002f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d74:	4a06      	ldr	r2, [pc, #24]	@ (8002d90 <HAL_InitTick+0x5c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	2000000c 	.word	0x2000000c
 8002d90:	20000008 	.word	0x20000008

08002d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x20>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_IncTick+0x24>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <HAL_IncTick+0x24>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	2000000c 	.word	0x2000000c
 8002db8:	20000708 	.word	0x20000708

08002dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_GetTick+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000708 	.word	0x20000708

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff ffee 	bl	8002dbc <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000000c 	.word	0x2000000c

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	@ (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	@ (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	@ 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f4c:	d301      	bcc.n	8002f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <SysTick_Config+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f7ff ff8e 	bl	8002e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <SysTick_Config+0x40>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <SysTick_Config+0x40>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff47 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff5c 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff8e 	bl	8002ed4 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5d 	bl	8002e80 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffb0 	bl	8002f3c <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e165      	b.n	80032d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 8154 	bne.w	80032ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d005      	beq.n	800303a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	2b02      	cmp	r3, #2
 8003038:	d130      	bne.n	800309c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0201 	and.w	r2, r3, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d017      	beq.n	80030d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d123      	bne.n	800312c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80ae 	beq.w	80032ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b5d      	ldr	r3, [pc, #372]	@ (80032e8 <HAL_GPIO_Init+0x300>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4a5c      	ldr	r2, [pc, #368]	@ (80032e8 <HAL_GPIO_Init+0x300>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800317c:	6453      	str	r3, [r2, #68]	@ 0x44
 800317e:	4b5a      	ldr	r3, [pc, #360]	@ (80032e8 <HAL_GPIO_Init+0x300>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318a:	4a58      	ldr	r2, [pc, #352]	@ (80032ec <HAL_GPIO_Init+0x304>)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4f      	ldr	r2, [pc, #316]	@ (80032f0 <HAL_GPIO_Init+0x308>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d025      	beq.n	8003202 <HAL_GPIO_Init+0x21a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4e      	ldr	r2, [pc, #312]	@ (80032f4 <HAL_GPIO_Init+0x30c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <HAL_GPIO_Init+0x216>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4d      	ldr	r2, [pc, #308]	@ (80032f8 <HAL_GPIO_Init+0x310>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d019      	beq.n	80031fa <HAL_GPIO_Init+0x212>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4c      	ldr	r2, [pc, #304]	@ (80032fc <HAL_GPIO_Init+0x314>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003300 <HAL_GPIO_Init+0x318>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x20a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003304 <HAL_GPIO_Init+0x31c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x206>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a49      	ldr	r2, [pc, #292]	@ (8003308 <HAL_GPIO_Init+0x320>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x202>
 80031e6:	2306      	movs	r3, #6
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	4935      	ldr	r1, [pc, #212]	@ (80032ec <HAL_GPIO_Init+0x304>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b3a      	ldr	r3, [pc, #232]	@ (800330c <HAL_GPIO_Init+0x324>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a31      	ldr	r2, [pc, #196]	@ (800330c <HAL_GPIO_Init+0x324>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b2f      	ldr	r3, [pc, #188]	@ (800330c <HAL_GPIO_Init+0x324>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a26      	ldr	r2, [pc, #152]	@ (800330c <HAL_GPIO_Init+0x324>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003276:	4b25      	ldr	r3, [pc, #148]	@ (800330c <HAL_GPIO_Init+0x324>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329a:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_GPIO_Init+0x324>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_GPIO_Init+0x324>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c4:	4a11      	ldr	r2, [pc, #68]	@ (800330c <HAL_GPIO_Init+0x324>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f ae96 	bls.w	8003004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3724      	adds	r7, #36	@ 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40021400 	.word	0x40021400
 8003308:	40021800 	.word	0x40021800
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
 800331c:	4613      	mov	r3, r2
 800331e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003320:	787b      	ldrb	r3, [r7, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800332c:	e003      	b.n	8003336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	041a      	lsls	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e12b      	b.n	80035ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fa4c 	bl	8002808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	@ 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a8:	f001 fa62 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a81      	ldr	r2, [pc, #516]	@ (80035b8 <HAL_I2C_Init+0x274>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d807      	bhi.n	80033c8 <HAL_I2C_Init+0x84>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a80      	ldr	r2, [pc, #512]	@ (80035bc <HAL_I2C_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	bf94      	ite	ls
 80033c0:	2301      	movls	r3, #1
 80033c2:	2300      	movhi	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e006      	b.n	80033d6 <HAL_I2C_Init+0x92>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a7d      	ldr	r2, [pc, #500]	@ (80035c0 <HAL_I2C_Init+0x27c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bf94      	ite	ls
 80033d0:	2301      	movls	r3, #1
 80033d2:	2300      	movhi	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0e7      	b.n	80035ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a78      	ldr	r2, [pc, #480]	@ (80035c4 <HAL_I2C_Init+0x280>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9b      	lsrs	r3, r3, #18
 80033e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a6a      	ldr	r2, [pc, #424]	@ (80035b8 <HAL_I2C_Init+0x274>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d802      	bhi.n	8003418 <HAL_I2C_Init+0xd4>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3301      	adds	r3, #1
 8003416:	e009      	b.n	800342c <HAL_I2C_Init+0xe8>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	4a69      	ldr	r2, [pc, #420]	@ (80035c8 <HAL_I2C_Init+0x284>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	3301      	adds	r3, #1
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	430b      	orrs	r3, r1
 8003432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800343e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	495c      	ldr	r1, [pc, #368]	@ (80035b8 <HAL_I2C_Init+0x274>)
 8003448:	428b      	cmp	r3, r1
 800344a:	d819      	bhi.n	8003480 <HAL_I2C_Init+0x13c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e59      	subs	r1, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fbb1 f3f3 	udiv	r3, r1, r3
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003460:	400b      	ands	r3, r1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_I2C_Init+0x138>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e59      	subs	r1, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fbb1 f3f3 	udiv	r3, r1, r3
 8003474:	3301      	adds	r3, #1
 8003476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347a:	e051      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 800347c:	2304      	movs	r3, #4
 800347e:	e04f      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d111      	bne.n	80034ac <HAL_I2C_Init+0x168>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	440b      	add	r3, r1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e012      	b.n	80034d2 <HAL_I2C_Init+0x18e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1e58      	subs	r0, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	0099      	lsls	r1, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Init+0x196>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e022      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <HAL_I2C_Init+0x1bc>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e58      	subs	r0, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034fe:	e00f      	b.n	8003520 <HAL_I2C_Init+0x1dc>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	0099      	lsls	r1, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	6809      	ldr	r1, [r1, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800354e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6911      	ldr	r1, [r2, #16]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68d2      	ldr	r2, [r2, #12]
 800355a:	4311      	orrs	r1, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	000186a0 	.word	0x000186a0
 80035bc:	001e847f 	.word	0x001e847f
 80035c0:	003d08ff 	.word	0x003d08ff
 80035c4:	431bde83 	.word	0x431bde83
 80035c8:	10624dd3 	.word	0x10624dd3

080035cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	461a      	mov	r2, r3
 80035d8:	460b      	mov	r3, r1
 80035da:	817b      	strh	r3, [r7, #10]
 80035dc:	4613      	mov	r3, r2
 80035de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7ff fbec 	bl	8002dbc <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	f040 80e0 	bne.w	80037b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2319      	movs	r3, #25
 80035fa:	2201      	movs	r2, #1
 80035fc:	4970      	ldr	r1, [pc, #448]	@ (80037c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fe0e 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	e0d3      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_I2C_Master_Transmit+0x50>
 8003618:	2302      	movs	r3, #2
 800361a:	e0cc      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1ea>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d007      	beq.n	8003642 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2221      	movs	r2, #33	@ 0x21
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2210      	movs	r2, #16
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	893a      	ldrh	r2, [r7, #8]
 8003672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a50      	ldr	r2, [pc, #320]	@ (80037c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003682:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003684:	8979      	ldrh	r1, [r7, #10]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fbc8 	bl	8003e20 <I2C_MasterRequestWrite>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e08d      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036b0:	e066      	b.n	8003780 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	6a39      	ldr	r1, [r7, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fecc 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d107      	bne.n	80036da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06b      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	781a      	ldrb	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d11b      	bne.n	8003754 <HAL_I2C_Master_Transmit+0x188>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d017      	beq.n	8003754 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	6a39      	ldr	r1, [r7, #32]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fec3 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b04      	cmp	r3, #4
 800376a:	d107      	bne.n	800377c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e01a      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d194      	bne.n	80036b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e000      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	00100002 	.word	0x00100002
 80037c4:	ffff0000 	.word	0xffff0000

080037c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e2:	f7ff faeb 	bl	8002dbc <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 80d9 	bne.w	80039a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2319      	movs	r3, #25
 80037fc:	2201      	movs	r2, #1
 80037fe:	496d      	ldr	r1, [pc, #436]	@ (80039b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fd0d 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e0cc      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2C_Mem_Write+0x56>
 800381a:	2302      	movs	r3, #2
 800381c:	e0c5      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d007      	beq.n	8003844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	@ 0x21
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	@ 0x40
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a4d      	ldr	r2, [pc, #308]	@ (80039b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	88f8      	ldrh	r0, [r7, #6]
 8003888:	893a      	ldrh	r2, [r7, #8]
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4603      	mov	r3, r0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fb44 	bl	8003f24 <I2C_RequestMemoryWrite>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d052      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e081      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fdd2 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d107      	bne.n	80038ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06b      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d11b      	bne.n	8003948 <HAL_I2C_Mem_Write+0x180>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1aa      	bne.n	80038a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fdc5 	bl	80044e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e016      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000

080039bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	@ 0x30
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7ff f9f1 	bl	8002dbc <HAL_GetTick>
 80039da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 8214 	bne.w	8003e12 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	497b      	ldr	r1, [pc, #492]	@ (8003be0 <HAL_I2C_Mem_Read+0x224>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fc13 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	e207      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x56>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e200      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d007      	beq.n	8003a38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2222      	movs	r2, #34	@ 0x22
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	@ 0x40
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a5b      	ldr	r2, [pc, #364]	@ (8003be4 <HAL_I2C_Mem_Read+0x228>)
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7a:	88f8      	ldrh	r0, [r7, #6]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fae0 	bl	8004050 <I2C_RequestMemoryRead>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1bc      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e190      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d11b      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e170      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d11b      	bne.n	8003b4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	e150      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b60:	e144      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	f200 80f1 	bhi.w	8003d4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d123      	bne.n	8003bbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fcfb 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e145      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bba:	e117      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d14e      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4906      	ldr	r1, [pc, #24]	@ (8003be8 <HAL_I2C_Mem_Read+0x22c>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fb26 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e11a      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000
 8003be8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c60:	e0c4      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	2200      	movs	r2, #0
 8003c6a:	496c      	ldr	r1, [pc, #432]	@ (8003e1c <HAL_I2C_Mem_Read+0x460>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fad7 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cb      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4955      	ldr	r1, [pc, #340]	@ (8003e1c <HAL_I2C_Mem_Read+0x460>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 faa9 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e09d      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d4c:	e04e      	b.n	8003dec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fc0e 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e058      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d124      	bne.n	8003dec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d107      	bne.n	8003dba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f aeb6 	bne.w	8003b62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3728      	adds	r7, #40	@ 0x28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	00010004 	.word	0x00010004

08003e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d006      	beq.n	8003e4a <I2C_MasterRequestWrite+0x2a>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d003      	beq.n	8003e4a <I2C_MasterRequestWrite+0x2a>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e48:	d108      	bne.n	8003e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e00b      	b.n	8003e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	2b12      	cmp	r3, #18
 8003e62:	d107      	bne.n	8003e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f9cd 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00d      	beq.n	8003ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9a:	d103      	bne.n	8003ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e035      	b.n	8003f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb0:	d108      	bne.n	8003ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eb2:	897b      	ldrh	r3, [r7, #10]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	e01b      	b.n	8003efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ec4:	897b      	ldrh	r3, [r7, #10]
 8003ec6:	11db      	asrs	r3, r3, #7
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 0306 	and.w	r3, r3, #6
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f063 030f 	orn	r3, r3, #15
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	490e      	ldr	r1, [pc, #56]	@ (8003f1c <I2C_MasterRequestWrite+0xfc>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa16 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e010      	b.n	8003f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ef2:	897b      	ldrh	r3, [r7, #10]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4907      	ldr	r1, [pc, #28]	@ (8003f20 <I2C_MasterRequestWrite+0x100>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa06 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	00010008 	.word	0x00010008
 8003f20:	00010002 	.word	0x00010002

08003f24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f960 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f74:	d103      	bne.n	8003f7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e05f      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	492d      	ldr	r1, [pc, #180]	@ (800404c <I2C_RequestMemoryWrite+0x128>)
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f9bb 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04c      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa46 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d107      	bne.n	8003fe6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e02b      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff0:	893b      	ldrh	r3, [r7, #8]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]
 8003ffa:	e021      	b.n	8004040 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	b29b      	uxth	r3, r3
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fa20 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2b04      	cmp	r3, #4
 8004020:	d107      	bne.n	8004032 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e005      	b.n	8004042 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004036:	893b      	ldrh	r3, [r7, #8]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	00010002 	.word	0x00010002

08004050 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004078:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004088:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2200      	movs	r2, #0
 8004092:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8c2 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b0:	d103      	bne.n	80040ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0aa      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	4952      	ldr	r1, [pc, #328]	@ (800421c <I2C_RequestMemoryRead+0x1cc>)
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f91d 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e097      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	6a39      	ldr	r1, [r7, #32]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f9a8 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e076      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800412c:	893b      	ldrh	r3, [r7, #8]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	e021      	b.n	800417c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004138:	893b      	ldrh	r3, [r7, #8]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b29b      	uxth	r3, r3
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004148:	6a39      	ldr	r1, [r7, #32]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f982 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	2b04      	cmp	r3, #4
 800415c:	d107      	bne.n	800416e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e050      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004172:	893b      	ldrh	r3, [r7, #8]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	6a39      	ldr	r1, [r7, #32]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f967 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	2b04      	cmp	r3, #4
 8004192:	d107      	bne.n	80041a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e035      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	2200      	movs	r2, #0
 80041c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f82b 	bl	8004220 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041de:	d103      	bne.n	80041e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e013      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	4906      	ldr	r1, [pc, #24]	@ (800421c <I2C_RequestMemoryRead+0x1cc>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f886 	bl	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	00010002 	.word	0x00010002

08004220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004230:	e048      	b.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d044      	beq.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe fdbf 	bl	8002dbc <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d139      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10d      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x56>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	e00c      	b.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	43da      	mvns	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	429a      	cmp	r2, r3
 8004294:	d116      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e023      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10d      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	e00c      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	43da      	mvns	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d093      	beq.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004322:	e071      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d123      	bne.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800434c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e067      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d041      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fe fd1a 	bl	8002dbc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d136      	bne.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e00b      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e021      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10c      	bne.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e00b      	b.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f af6d 	bne.w	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	e034      	b.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f8e3 	bl	800462e <I2C_IsAcknowledgeFailed>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e034      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d028      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe fc9f 	bl	8002dbc <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11d      	bne.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449a:	2b80      	cmp	r3, #128	@ 0x80
 800449c:	d016      	beq.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d1c3      	bne.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	e034      	b.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f89b 	bl	800462e <I2C_IsAcknowledgeFailed>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e034      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d028      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe fc57 	bl	8002dbc <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11d      	bne.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d016      	beq.n	800455c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e007      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d1c3      	bne.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004580:	e049      	b.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b10      	cmp	r3, #16
 800458e:	d119      	bne.n	80045c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0210 	mvn.w	r2, #16
 8004598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e030      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c4:	f7fe fbfa 	bl	8002dbc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11d      	bne.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d016      	beq.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d1ae      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004644:	d11b      	bne.n	800467e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800464e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f043 0204 	orr.w	r2, r3, #4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cc      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b68      	ldr	r3, [pc, #416]	@ (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d90c      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b65      	ldr	r3, [pc, #404]	@ (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b63      	ldr	r3, [pc, #396]	@ (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b8      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b59      	ldr	r3, [pc, #356]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a58      	ldr	r2, [pc, #352]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f8:	4b53      	ldr	r3, [pc, #332]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a52      	ldr	r2, [pc, #328]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b50      	ldr	r3, [pc, #320]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	494d      	ldr	r1, [pc, #308]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d044      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b47      	ldr	r3, [pc, #284]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d119      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e07f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	2b03      	cmp	r3, #3
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b3f      	ldr	r3, [pc, #252]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3b      	ldr	r3, [pc, #236]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e067      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b37      	ldr	r3, [pc, #220]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4934      	ldr	r1, [pc, #208]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7fe fb1e 	bl	8002dbc <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fe fb1a 	bl	8002dbc <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e04f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b25      	ldr	r3, [pc, #148]	@ (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d20c      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b22      	ldr	r3, [pc, #136]	@ (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e032      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b19      	ldr	r3, [pc, #100]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4916      	ldr	r1, [pc, #88]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fe:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	490e      	ldr	r1, [pc, #56]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004812:	f000 fb7f 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	490a      	ldr	r1, [pc, #40]	@ (800484c <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	5ccb      	ldrb	r3, [r1, r3]
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	4a09      	ldr	r2, [pc, #36]	@ (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800482e:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fa7e 	bl	8002d34 <HAL_InitTick>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023c00 	.word	0x40023c00
 8004848:	40023800 	.word	0x40023800
 800484c:	0800ab4c 	.word	0x0800ab4c
 8004850:	20000004 	.word	0x20000004
 8004854:	20000008 	.word	0x20000008

08004858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800485c:	4b03      	ldr	r3, [pc, #12]	@ (800486c <HAL_RCC_GetHCLKFreq+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000004 	.word	0x20000004

08004870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004874:	f7ff fff0 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0a9b      	lsrs	r3, r3, #10
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4903      	ldr	r1, [pc, #12]	@ (8004894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	0800ab5c 	.word	0x0800ab5c

08004898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800489c:	f7ff ffdc 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0b5b      	lsrs	r3, r3, #13
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	0800ab5c 	.word	0x0800ab5c

080048c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80048f8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048fe:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	496c      	ldr	r1, [pc, #432]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004916:	2301      	movs	r3, #1
 8004918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004926:	4b64      	ldr	r3, [pc, #400]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800492c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	4960      	ldr	r1, [pc, #384]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004944:	2301      	movs	r3, #1
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d017      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004954:	4b58      	ldr	r3, [pc, #352]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	4955      	ldr	r1, [pc, #340]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004972:	d101      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004974:	2301      	movs	r3, #1
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004980:	2301      	movs	r3, #1
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004990:	4b49      	ldr	r3, [pc, #292]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004996:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499e:	4946      	ldr	r1, [pc, #280]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ae:	d101      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80049b0:	2301      	movs	r3, #1
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80049bc:	2301      	movs	r3, #1
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 808a 	beq.w	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	4b39      	ldr	r3, [pc, #228]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	4a38      	ldr	r2, [pc, #224]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049de:	4b36      	ldr	r3, [pc, #216]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049ea:	4b34      	ldr	r3, [pc, #208]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a33      	ldr	r2, [pc, #204]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049f6:	f7fe f9e1 	bl	8002dbc <HAL_GetTick>
 80049fa:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fe f9dd 	bl	8002dbc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e278      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a10:	4b2a      	ldr	r3, [pc, #168]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a1c:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a24:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02f      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d028      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a42:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a44:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a50:	4a19      	ldr	r2, [pc, #100]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a56:	4b18      	ldr	r3, [pc, #96]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d114      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe f9ab 	bl	8002dbc <HAL_GetTick>
 8004a66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fe f9a7 	bl	8002dbc <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e240      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ee      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a98:	d114      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004a9a:	4b07      	ldr	r3, [pc, #28]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aae:	4902      	ldr	r1, [pc, #8]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	42470e40 	.word	0x42470e40
 8004ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a49      	ldr	r2, [pc, #292]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004aca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ace:	6093      	str	r3, [r2, #8]
 8004ad0:	4b47      	ldr	r3, [pc, #284]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ad2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	4944      	ldr	r1, [pc, #272]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004af4:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004af6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004b04:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b12:	4937      	ldr	r1, [pc, #220]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b26:	4b32      	ldr	r3, [pc, #200]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b34:	492e      	ldr	r1, [pc, #184]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b48:	4b29      	ldr	r3, [pc, #164]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b56:	4926      	ldr	r1, [pc, #152]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b66:	d101      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004b78:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	491a      	ldr	r1, [pc, #104]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d011      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004b9a:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba8:	4911      	ldr	r1, [pc, #68]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bcc:	f040 80ff 	bne.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd6:	f7fe f8f1 	bl	8002dbc <HAL_GetTick>
 8004bda:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bdc:	e00e      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bde:	f7fe f8ed 	bl	8002dbc <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d907      	bls.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e188      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	424711e0 	.word	0x424711e0
 8004bf8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1ea      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d028      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d124      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004c30:	4b71      	ldr	r3, [pc, #452]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c42:	4b6d      	ldr	r3, [pc, #436]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c48:	0e1b      	lsrs	r3, r3, #24
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	071b      	lsls	r3, r3, #28
 8004c72:	4961      	ldr	r1, [pc, #388]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d035      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca4:	d130      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004ca6:	4b54      	ldr	r3, [pc, #336]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbe:	0f1b      	lsrs	r3, r3, #28
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	019b      	lsls	r3, r3, #6
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	071b      	lsls	r3, r3, #28
 8004ce8:	4943      	ldr	r1, [pc, #268]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cf0:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf6:	f023 021f 	bic.w	r2, r3, #31
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	493d      	ldr	r1, [pc, #244]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d029      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d1c:	d124      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d30:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	019b      	lsls	r3, r3, #6
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	3b01      	subs	r3, #1
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	431a      	orrs	r2, r3
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	071b      	lsls	r3, r3, #28
 8004d60:	4925      	ldr	r1, [pc, #148]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d016      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	4917      	ldr	r1, [pc, #92]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004da2:	4b16      	ldr	r3, [pc, #88]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004da8:	f7fe f808 	bl	8002dbc <HAL_GetTick>
 8004dac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004db0:	f7fe f804 	bl	8002dbc <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e09f      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	f040 8095 	bne.w	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ddc:	f7fd ffee 	bl	8002dbc <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004de2:	e00f      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de4:	f7fd ffea 	bl	8002dbc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d908      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e085      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	42470068 	.word	0x42470068
 8004e00:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e04:	4b41      	ldr	r3, [pc, #260]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e10:	d0e8      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d02b      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d127      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004e3a:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	431a      	orrs	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	4928      	ldr	r1, [pc, #160]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e70:	4b26      	ldr	r3, [pc, #152]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e76:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	4922      	ldr	r1, [pc, #136]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01d      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e9e:	d118      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	0e1b      	lsrs	r3, r3, #24
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	4910      	ldr	r1, [pc, #64]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ed8:	f7fd ff70 	bl	8002dbc <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ee0:	f7fd ff6c 	bl	8002dbc <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e007      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004efe:	d1ef      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3730      	adds	r7, #48	@ 0x30
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	42470070 	.word	0x42470070

08004f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f18:	b0a6      	sub	sp, #152	@ 0x98
 8004f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f3a:	4bc8      	ldr	r3, [pc, #800]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	f200 817e 	bhi.w	8005244 <HAL_RCC_GetSysClockFreq+0x330>
 8004f48:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08005245 	.word	0x08005245
 8004f58:	08005245 	.word	0x08005245
 8004f5c:	08005245 	.word	0x08005245
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	08005245 	.word	0x08005245
 8004f68:	08005245 	.word	0x08005245
 8004f6c:	08005245 	.word	0x08005245
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08005245 	.word	0x08005245
 8004f78:	08005245 	.word	0x08005245
 8004f7c:	08005245 	.word	0x08005245
 8004f80:	080050ff 	.word	0x080050ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4bb6      	ldr	r3, [pc, #728]	@ (8005260 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004f8a:	e15f      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8c:	4bb5      	ldr	r3, [pc, #724]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004f92:	e15b      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f94:	4bb1      	ldr	r3, [pc, #708]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa0:	4bae      	ldr	r3, [pc, #696]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d031      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fac:	4bab      	ldr	r3, [pc, #684]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	099b      	lsrs	r3, r3, #6
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fc4:	4ba7      	ldr	r3, [pc, #668]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x350>)
 8004fc6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004fca:	462a      	mov	r2, r5
 8004fcc:	fb03 f202 	mul.w	r2, r3, r2
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	4aa2      	ldr	r2, [pc, #648]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x350>)
 8004fdc:	4621      	mov	r1, r4
 8004fde:	fba1 1202 	umull	r1, r2, r1, r2
 8004fe2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004fe8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004fea:	4413      	add	r3, r2
 8004fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ff6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ffc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005000:	f7fb fb12 	bl	8000628 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4613      	mov	r3, r2
 800500a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800500e:	e064      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005010:	4b92      	ldr	r3, [pc, #584]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	2200      	movs	r2, #0
 8005018:	653b      	str	r3, [r7, #80]	@ 0x50
 800501a:	657a      	str	r2, [r7, #84]	@ 0x54
 800501c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005024:	2300      	movs	r3, #0
 8005026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005028:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800502c:	4622      	mov	r2, r4
 800502e:	462b      	mov	r3, r5
 8005030:	f04f 0000 	mov.w	r0, #0
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	0159      	lsls	r1, r3, #5
 800503a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800503e:	0150      	lsls	r0, r2, #5
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4621      	mov	r1, r4
 8005046:	1a51      	subs	r1, r2, r1
 8005048:	6139      	str	r1, [r7, #16]
 800504a:	4629      	mov	r1, r5
 800504c:	eb63 0301 	sbc.w	r3, r3, r1
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505e:	4659      	mov	r1, fp
 8005060:	018b      	lsls	r3, r1, #6
 8005062:	4651      	mov	r1, sl
 8005064:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005068:	4651      	mov	r1, sl
 800506a:	018a      	lsls	r2, r1, #6
 800506c:	4651      	mov	r1, sl
 800506e:	ebb2 0801 	subs.w	r8, r2, r1
 8005072:	4659      	mov	r1, fp
 8005074:	eb63 0901 	sbc.w	r9, r3, r1
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005084:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005088:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800508c:	4690      	mov	r8, r2
 800508e:	4699      	mov	r9, r3
 8005090:	4623      	mov	r3, r4
 8005092:	eb18 0303 	adds.w	r3, r8, r3
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	462b      	mov	r3, r5
 800509a:	eb49 0303 	adc.w	r3, r9, r3
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ac:	4629      	mov	r1, r5
 80050ae:	028b      	lsls	r3, r1, #10
 80050b0:	4621      	mov	r1, r4
 80050b2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b6:	4621      	mov	r1, r4
 80050b8:	028a      	lsls	r2, r1, #10
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050c2:	2200      	movs	r2, #0
 80050c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050cc:	f7fb faac 	bl	8000628 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050da:	4b60      	ldr	r3, [pc, #384]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	3301      	adds	r3, #1
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80050ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80050fc:	e0a6      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fe:	4b57      	ldr	r3, [pc, #348]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800510a:	4b54      	ldr	r3, [pc, #336]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02a      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005116:	4b51      	ldr	r3, [pc, #324]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	2200      	movs	r2, #0
 800511e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005120:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005128:	2100      	movs	r1, #0
 800512a:	4b4e      	ldr	r3, [pc, #312]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x350>)
 800512c:	fb03 f201 	mul.w	r2, r3, r1
 8005130:	2300      	movs	r3, #0
 8005132:	fb00 f303 	mul.w	r3, r0, r3
 8005136:	4413      	add	r3, r2
 8005138:	4a4a      	ldr	r2, [pc, #296]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x350>)
 800513a:	fba0 1202 	umull	r1, r2, r0, r2
 800513e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005140:	460a      	mov	r2, r1
 8005142:	673a      	str	r2, [r7, #112]	@ 0x70
 8005144:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005146:	4413      	add	r3, r2
 8005148:	677b      	str	r3, [r7, #116]	@ 0x74
 800514a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800514e:	2200      	movs	r2, #0
 8005150:	633b      	str	r3, [r7, #48]	@ 0x30
 8005152:	637a      	str	r2, [r7, #52]	@ 0x34
 8005154:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005158:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800515c:	f7fb fa64 	bl	8000628 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800516a:	e05b      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516c:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	099b      	lsrs	r3, r3, #6
 8005172:	2200      	movs	r2, #0
 8005174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005176:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24
 8005184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0159      	lsls	r1, r3, #5
 8005196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519a:	0150      	lsls	r0, r2, #5
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4641      	mov	r1, r8
 80051a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c0:	ebb2 040a 	subs.w	r4, r2, sl
 80051c4:	eb63 050b 	sbc.w	r5, r3, fp
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	00eb      	lsls	r3, r5, #3
 80051d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d6:	00e2      	lsls	r2, r4, #3
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	4643      	mov	r3, r8
 80051de:	18e3      	adds	r3, r4, r3
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	464b      	mov	r3, r9
 80051e4:	eb45 0303 	adc.w	r3, r5, r3
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800520c:	2200      	movs	r2, #0
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	61fa      	str	r2, [r7, #28]
 8005212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005216:	f7fb fa07 	bl	8000628 <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4613      	mov	r3, r2
 8005220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005224:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <HAL_RCC_GetSysClockFreq+0x348>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	0f1b      	lsrs	r3, r3, #28
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005232:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005242:	e003      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800524a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800524c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005250:	4618      	mov	r0, r3
 8005252:	3798      	adds	r7, #152	@ 0x98
 8005254:	46bd      	mov	sp, r7
 8005256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	00f42400 	.word	0x00f42400
 8005264:	017d7840 	.word	0x017d7840

08005268 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e28d      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8083 	beq.w	800538e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005288:	4b94      	ldr	r3, [pc, #592]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	2b04      	cmp	r3, #4
 8005292:	d019      	beq.n	80052c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005294:	4b91      	ldr	r3, [pc, #580]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030c 	and.w	r3, r3, #12
        || \
 800529c:	2b08      	cmp	r3, #8
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052a0:	4b8e      	ldr	r3, [pc, #568]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ac:	d00c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ae:	4b8b      	ldr	r3, [pc, #556]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d112      	bne.n	80052e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4b88      	ldr	r3, [pc, #544]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4b84      	ldr	r3, [pc, #528]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d05b      	beq.n	800538c <HAL_RCC_OscConfig+0x124>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d157      	bne.n	800538c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e25a      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_OscConfig+0x90>
 80052ea:	4b7c      	ldr	r3, [pc, #496]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7b      	ldr	r2, [pc, #492]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e01d      	b.n	8005334 <HAL_RCC_OscConfig+0xcc>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0xb4>
 8005302:	4b76      	ldr	r3, [pc, #472]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a75      	ldr	r2, [pc, #468]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b73      	ldr	r3, [pc, #460]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a72      	ldr	r2, [pc, #456]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0xcc>
 800531c:	4b6f      	ldr	r3, [pc, #444]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a6e      	ldr	r2, [pc, #440]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b6c      	ldr	r3, [pc, #432]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6b      	ldr	r2, [pc, #428]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800532e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fd fd3e 	bl	8002dbc <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005344:	f7fd fd3a 	bl	8002dbc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	@ 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e21f      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	4b61      	ldr	r3, [pc, #388]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0xdc>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fd fd2a 	bl	8002dbc <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800536c:	f7fd fd26 	bl	8002dbc <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	@ 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e20b      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	4b57      	ldr	r3, [pc, #348]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x104>
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800538c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d06f      	beq.n	800547a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800539a:	4b50      	ldr	r3, [pc, #320]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d017      	beq.n	80053d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053a6:	4b4d      	ldr	r3, [pc, #308]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d105      	bne.n	80053be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053b2:	4b4a      	ldr	r3, [pc, #296]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053be:	4b47      	ldr	r3, [pc, #284]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d11c      	bne.n	8005404 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ca:	4b44      	ldr	r3, [pc, #272]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d116      	bne.n	8005404 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	4b41      	ldr	r3, [pc, #260]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <HAL_RCC_OscConfig+0x186>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e1d3      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ee:	4b3b      	ldr	r3, [pc, #236]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4937      	ldr	r1, [pc, #220]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005402:	e03a      	b.n	800547a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d020      	beq.n	800544e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800540c:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <HAL_RCC_OscConfig+0x278>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fd fcd3 	bl	8002dbc <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541a:	f7fd fccf 	bl	8002dbc <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1b4      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542c:	4b2b      	ldr	r3, [pc, #172]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005438:	4b28      	ldr	r3, [pc, #160]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4925      	ldr	r1, [pc, #148]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
 800544c:	e015      	b.n	800547a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544e:	4b24      	ldr	r3, [pc, #144]	@ (80054e0 <HAL_RCC_OscConfig+0x278>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd fcb2 	bl	8002dbc <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545c:	f7fd fcae 	bl	8002dbc <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e193      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546e:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d036      	beq.n	80054f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800548e:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005490:	2201      	movs	r2, #1
 8005492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005494:	f7fd fc92 	bl	8002dbc <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549c:	f7fd fc8e 	bl	8002dbc <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e173      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ae:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_RCC_OscConfig+0x274>)
 80054b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x234>
 80054ba:	e01b      	b.n	80054f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054bc:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fd fc7b 	bl	8002dbc <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c8:	e00e      	b.n	80054e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ca:	f7fd fc77 	bl	8002dbc <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d907      	bls.n	80054e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e15c      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
 80054dc:	40023800 	.word	0x40023800
 80054e0:	42470000 	.word	0x42470000
 80054e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80054ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ea      	bne.n	80054ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8097 	beq.w	8005630 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005506:	4b83      	ldr	r3, [pc, #524]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	4b7f      	ldr	r3, [pc, #508]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	4a7e      	ldr	r2, [pc, #504]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005520:	6413      	str	r3, [r2, #64]	@ 0x40
 8005522:	4b7c      	ldr	r3, [pc, #496]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	4b79      	ldr	r3, [pc, #484]	@ (8005718 <HAL_RCC_OscConfig+0x4b0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d118      	bne.n	8005570 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553e:	4b76      	ldr	r3, [pc, #472]	@ (8005718 <HAL_RCC_OscConfig+0x4b0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a75      	ldr	r2, [pc, #468]	@ (8005718 <HAL_RCC_OscConfig+0x4b0>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554a:	f7fd fc37 	bl	8002dbc <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fd fc33 	bl	8002dbc <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e118      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	4b6c      	ldr	r3, [pc, #432]	@ (8005718 <HAL_RCC_OscConfig+0x4b0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d106      	bne.n	8005586 <HAL_RCC_OscConfig+0x31e>
 8005578:	4b66      	ldr	r3, [pc, #408]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	4a65      	ldr	r2, [pc, #404]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	6713      	str	r3, [r2, #112]	@ 0x70
 8005584:	e01c      	b.n	80055c0 <HAL_RCC_OscConfig+0x358>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b05      	cmp	r3, #5
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x340>
 800558e:	4b61      	ldr	r3, [pc, #388]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	4a60      	ldr	r2, [pc, #384]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005594:	f043 0304 	orr.w	r3, r3, #4
 8005598:	6713      	str	r3, [r2, #112]	@ 0x70
 800559a:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559e:	4a5d      	ldr	r2, [pc, #372]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a6:	e00b      	b.n	80055c0 <HAL_RCC_OscConfig+0x358>
 80055a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ac:	4a59      	ldr	r2, [pc, #356]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b4:	4b57      	ldr	r3, [pc, #348]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b8:	4a56      	ldr	r2, [pc, #344]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80055ba:	f023 0304 	bic.w	r3, r3, #4
 80055be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d015      	beq.n	80055f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fd fbf8 	bl	8002dbc <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fd fbf4 	bl	8002dbc <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0d7      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ee      	beq.n	80055d0 <HAL_RCC_OscConfig+0x368>
 80055f2:	e014      	b.n	800561e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fd fbe2 	bl	8002dbc <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fd fbde 	bl	8002dbc <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0c1      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005612:	4b40      	ldr	r3, [pc, #256]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ee      	bne.n	80055fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d105      	bne.n	8005630 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005624:	4b3b      	ldr	r3, [pc, #236]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	4a3a      	ldr	r2, [pc, #232]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 800562a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800562e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80ad 	beq.w	8005794 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800563a:	4b36      	ldr	r3, [pc, #216]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b08      	cmp	r3, #8
 8005644:	d060      	beq.n	8005708 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d145      	bne.n	80056da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b33      	ldr	r3, [pc, #204]	@ (800571c <HAL_RCC_OscConfig+0x4b4>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fd fbb2 	bl	8002dbc <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd fbae 	bl	8002dbc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e093      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b29      	ldr	r3, [pc, #164]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	3b01      	subs	r3, #1
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	071b      	lsls	r3, r3, #28
 80056a6:	491b      	ldr	r1, [pc, #108]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ac:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <HAL_RCC_OscConfig+0x4b4>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fd fb83 	bl	8002dbc <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ba:	f7fd fb7f 	bl	8002dbc <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e064      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056cc:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x452>
 80056d8:	e05c      	b.n	8005794 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056da:	4b10      	ldr	r3, [pc, #64]	@ (800571c <HAL_RCC_OscConfig+0x4b4>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fd fb6c 	bl	8002dbc <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fd fb68 	bl	8002dbc <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e04d      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fa:	4b06      	ldr	r3, [pc, #24]	@ (8005714 <HAL_RCC_OscConfig+0x4ac>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x480>
 8005706:	e045      	b.n	8005794 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e040      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
 8005714:	40023800 	.word	0x40023800
 8005718:	40007000 	.word	0x40007000
 800571c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005720:	4b1f      	ldr	r3, [pc, #124]	@ (80057a0 <HAL_RCC_OscConfig+0x538>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d030      	beq.n	8005790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d129      	bne.n	8005790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d122      	bne.n	8005790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005758:	4293      	cmp	r3, r2
 800575a:	d119      	bne.n	8005790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	3b01      	subs	r3, #1
 800576a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d10f      	bne.n	8005790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800

080057a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e073      	b.n	800589e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7f5b      	ldrb	r3, [r3, #29]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fd f89a 	bl	8002900 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d055      	beq.n	800588c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	22ca      	movs	r2, #202	@ 0xca
 80057e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2253      	movs	r2, #83	@ 0x53
 80057ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f99d 	bl	8005b30 <RTC_EnterInitMode>
 80057f6:	4603      	mov	r3, r0
 80057f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d12c      	bne.n	800585a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800580e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005812:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68d2      	ldr	r2, [r2, #12]
 800583a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6919      	ldr	r1, [r3, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	041a      	lsls	r2, r3, #16
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f9a4 	bl	8005b9e <RTC_ExitInitMode>
 8005856:	4603      	mov	r3, r0
 8005858:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	22ff      	movs	r2, #255	@ 0xff
 8005888:	625a      	str	r2, [r3, #36]	@ 0x24
 800588a:	e001      	b.n	8005890 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058a6:	b590      	push	{r4, r7, lr}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	7f1b      	ldrb	r3, [r3, #28]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_RTC_SetTime+0x1c>
 80058be:	2302      	movs	r3, #2
 80058c0:	e087      	b.n	80059d2 <HAL_RTC_SetTime+0x12c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2202      	movs	r2, #2
 80058cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d126      	bne.n	8005922 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2200      	movs	r2, #0
 80058e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f97b 	bl	8005be8 <RTC_ByteToBcd2>
 80058f2:	4603      	mov	r3, r0
 80058f4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f974 	bl	8005be8 <RTC_ByteToBcd2>
 8005900:	4603      	mov	r3, r0
 8005902:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005904:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	789b      	ldrb	r3, [r3, #2]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f96c 	bl	8005be8 <RTC_ByteToBcd2>
 8005910:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005912:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e018      	b.n	8005954 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2200      	movs	r2, #0
 8005934:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005942:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005948:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	22ca      	movs	r2, #202	@ 0xca
 800595a:	625a      	str	r2, [r3, #36]	@ 0x24
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2253      	movs	r2, #83	@ 0x53
 8005962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8e3 	bl	8005b30 <RTC_EnterInitMode>
 800596a:	4603      	mov	r3, r0
 800596c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800596e:	7cfb      	ldrb	r3, [r7, #19]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d120      	bne.n	80059b6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800597e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005982:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005992:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f8f6 	bl	8005b9e <RTC_ExitInitMode>
 80059b2:	4603      	mov	r3, r0
 80059b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059b6:	7cfb      	ldrb	r3, [r7, #19]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	22ff      	movs	r2, #255	@ 0xff
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]

  return status;
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}

080059da <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059da:	b590      	push	{r4, r7, lr}
 80059dc:	b087      	sub	sp, #28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	7f1b      	ldrb	r3, [r3, #28]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_RTC_SetDate+0x1c>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e071      	b.n	8005ada <HAL_RTC_SetDate+0x100>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2202      	movs	r2, #2
 8005a00:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10e      	bne.n	8005a26 <HAL_RTC_SetDate+0x4c>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	330a      	adds	r3, #10
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11c      	bne.n	8005a66 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 f8d9 	bl	8005be8 <RTC_ByteToBcd2>
 8005a36:	4603      	mov	r3, r0
 8005a38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f8d2 	bl	8005be8 <RTC_ByteToBcd2>
 8005a44:	4603      	mov	r3, r0
 8005a46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	789b      	ldrb	r3, [r3, #2]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f8ca 	bl	8005be8 <RTC_ByteToBcd2>
 8005a54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e00e      	b.n	8005a84 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a72:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005a78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	22ca      	movs	r2, #202	@ 0xca
 8005a8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2253      	movs	r2, #83	@ 0x53
 8005a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f84b 	bl	8005b30 <RTC_EnterInitMode>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a9e:	7cfb      	ldrb	r3, [r7, #19]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10c      	bne.n	8005abe <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005aae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ab2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f872 	bl	8005b9e <RTC_ExitInitMode>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	22ff      	movs	r2, #255	@ 0xff
 8005ad0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]

  return status;
 8005ad8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd90      	pop	{r4, r7, pc}
	...

08005ae4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0d      	ldr	r2, [pc, #52]	@ (8005b2c <HAL_RTC_WaitForSynchro+0x48>)
 8005af6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005af8:	f7fd f960 	bl	8002dbc <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005afe:	e009      	b.n	8005b14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b00:	f7fd f95c 	bl	8002dbc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b0e:	d901      	bls.n	8005b14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e007      	b.n	8005b24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ee      	beq.n	8005b00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	00017f5f 	.word	0x00017f5f

08005b30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d122      	bne.n	8005b94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b5e:	f7fd f92d 	bl	8002dbc <HAL_GetTick>
 8005b62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b64:	e00c      	b.n	8005b80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b66:	f7fd f929 	bl	8002dbc <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b74:	d904      	bls.n	8005b80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2204      	movs	r2, #4
 8005b7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <RTC_EnterInitMode+0x64>
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d1e8      	bne.n	8005b66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff8b 	bl	8005ae4 <HAL_RTC_WaitForSynchro>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005bf6:	e005      	b.n	8005c04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	3b0a      	subs	r3, #10
 8005c02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d8f6      	bhi.n	8005bf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e07b      	b.n	8005d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d108      	bne.n	8005c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c46:	d009      	beq.n	8005c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	61da      	str	r2, [r3, #28]
 8005c4e:	e005      	b.n	8005c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc fe6c 	bl	8002954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce0:	ea42 0103 	orr.w	r1, r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	f003 0104 	and.w	r1, r3, #4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	f003 0210 	and.w	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e042      	b.n	8005dce <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fc fe41 	bl	80029e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2224      	movs	r2, #36	@ 0x24
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9d2 	bl	8006124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b08a      	sub	sp, #40	@ 0x28
 8005dda:	af02      	add	r7, sp, #8
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d175      	bne.n	8005ee2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_Transmit+0x2c>
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06e      	b.n	8005ee4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2221      	movs	r2, #33	@ 0x21
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e14:	f7fc ffd2 	bl	8002dbc <HAL_GetTick>
 8005e18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2e:	d108      	bne.n	8005e42 <HAL_UART_Transmit+0x6c>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e003      	b.n	8005e4a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e4a:	e02e      	b.n	8005eaa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2200      	movs	r2, #0
 8005e54:	2180      	movs	r1, #128	@ 0x80
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f86d 	bl	8005f36 <UART_WaitOnFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e03a      	b.n	8005ee4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	3302      	adds	r3, #2
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e007      	b.n	8005e9c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1cb      	bne.n	8005e4c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2140      	movs	r1, #64	@ 0x40
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f839 	bl	8005f36 <UART_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e006      	b.n	8005ee4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e000      	b.n	8005ee4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d112      	bne.n	8005f2c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_UART_Receive_IT+0x26>
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e00b      	b.n	8005f2e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f860 	bl	8005fe8 <UART_Start_Receive_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	e000      	b.n	8005f2e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f2c:	2302      	movs	r3, #2
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4613      	mov	r3, r2
 8005f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f46:	e03b      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d037      	beq.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f50:	f7fc ff34 	bl	8002dbc <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d302      	bcc.n	8005f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e03a      	b.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d023      	beq.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b80      	cmp	r3, #128	@ 0x80
 8005f7c:	d020      	beq.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b40      	cmp	r3, #64	@ 0x40
 8005f82:	d01d      	beq.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d116      	bne.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f857 	bl	800605c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e00f      	b.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d0b4      	beq.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2222      	movs	r2, #34	@ 0x22
 8006012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800602c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0220 	orr.w	r2, r2, #32
 800604c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b095      	sub	sp, #84	@ 0x54
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800607a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006084:	643a      	str	r2, [r7, #64]	@ 0x40
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800608a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d119      	bne.n	8006108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f4:	61ba      	str	r2, [r7, #24]
 80060f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6979      	ldr	r1, [r7, #20]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	613b      	str	r3, [r7, #16]
   return(result);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006116:	bf00      	nop
 8006118:	3754      	adds	r7, #84	@ 0x54
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006128:	b0c0      	sub	sp, #256	@ 0x100
 800612a:	af00      	add	r7, sp, #0
 800612c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	68d9      	ldr	r1, [r3, #12]
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	ea40 0301 	orr.w	r3, r0, r1
 800614c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	431a      	orrs	r2, r3
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	431a      	orrs	r2, r3
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800617c:	f021 010c 	bic.w	r1, r1, #12
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800618a:	430b      	orrs	r3, r1
 800618c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	6999      	ldr	r1, [r3, #24]
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	ea40 0301 	orr.w	r3, r0, r1
 80061aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b8f      	ldr	r3, [pc, #572]	@ (80063f0 <UART_SetConfig+0x2cc>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d005      	beq.n	80061c4 <UART_SetConfig+0xa0>
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b8d      	ldr	r3, [pc, #564]	@ (80063f4 <UART_SetConfig+0x2d0>)
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d104      	bne.n	80061ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061c4:	f7fe fb68 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 80061c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061cc:	e003      	b.n	80061d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ce:	f7fe fb4f 	bl	8004870 <HAL_RCC_GetPCLK1Freq>
 80061d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e0:	f040 810c 	bne.w	80063fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	1891      	adds	r1, r2, r2
 80061fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061fe:	415b      	adcs	r3, r3
 8006200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006206:	4621      	mov	r1, r4
 8006208:	eb12 0801 	adds.w	r8, r2, r1
 800620c:	4629      	mov	r1, r5
 800620e:	eb43 0901 	adc.w	r9, r3, r1
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800621e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006226:	4690      	mov	r8, r2
 8006228:	4699      	mov	r9, r3
 800622a:	4623      	mov	r3, r4
 800622c:	eb18 0303 	adds.w	r3, r8, r3
 8006230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006234:	462b      	mov	r3, r5
 8006236:	eb49 0303 	adc.w	r3, r9, r3
 800623a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800623e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800624a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800624e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006252:	460b      	mov	r3, r1
 8006254:	18db      	adds	r3, r3, r3
 8006256:	653b      	str	r3, [r7, #80]	@ 0x50
 8006258:	4613      	mov	r3, r2
 800625a:	eb42 0303 	adc.w	r3, r2, r3
 800625e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006268:	f7fa f9de 	bl	8000628 <__aeabi_uldivmod>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4b61      	ldr	r3, [pc, #388]	@ (80063f8 <UART_SetConfig+0x2d4>)
 8006272:	fba3 2302 	umull	r2, r3, r3, r2
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	011c      	lsls	r4, r3, #4
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006294:	415b      	adcs	r3, r3
 8006296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800629c:	4641      	mov	r1, r8
 800629e:	eb12 0a01 	adds.w	sl, r2, r1
 80062a2:	4649      	mov	r1, r9
 80062a4:	eb43 0b01 	adc.w	fp, r3, r1
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062bc:	4692      	mov	sl, r2
 80062be:	469b      	mov	fp, r3
 80062c0:	4643      	mov	r3, r8
 80062c2:	eb1a 0303 	adds.w	r3, sl, r3
 80062c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ca:	464b      	mov	r3, r9
 80062cc:	eb4b 0303 	adc.w	r3, fp, r3
 80062d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062fe:	f7fa f993 	bl	8000628 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4611      	mov	r1, r2
 8006308:	4b3b      	ldr	r3, [pc, #236]	@ (80063f8 <UART_SetConfig+0x2d4>)
 800630a:	fba3 2301 	umull	r2, r3, r3, r1
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	2264      	movs	r2, #100	@ 0x64
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	1acb      	subs	r3, r1, r3
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800631e:	4b36      	ldr	r3, [pc, #216]	@ (80063f8 <UART_SetConfig+0x2d4>)
 8006320:	fba3 2302 	umull	r2, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800632c:	441c      	add	r4, r3
 800632e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800633c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	1891      	adds	r1, r2, r2
 8006346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006348:	415b      	adcs	r3, r3
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800634c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006350:	4641      	mov	r1, r8
 8006352:	1851      	adds	r1, r2, r1
 8006354:	6339      	str	r1, [r7, #48]	@ 0x30
 8006356:	4649      	mov	r1, r9
 8006358:	414b      	adcs	r3, r1
 800635a:	637b      	str	r3, [r7, #52]	@ 0x34
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006368:	4659      	mov	r1, fp
 800636a:	00cb      	lsls	r3, r1, #3
 800636c:	4651      	mov	r1, sl
 800636e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006372:	4651      	mov	r1, sl
 8006374:	00ca      	lsls	r2, r1, #3
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	4603      	mov	r3, r0
 800637c:	4642      	mov	r2, r8
 800637e:	189b      	adds	r3, r3, r2
 8006380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006384:	464b      	mov	r3, r9
 8006386:	460a      	mov	r2, r1
 8006388:	eb42 0303 	adc.w	r3, r2, r3
 800638c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800639c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063a4:	460b      	mov	r3, r1
 80063a6:	18db      	adds	r3, r3, r3
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063aa:	4613      	mov	r3, r2
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063ba:	f7fa f935 	bl	8000628 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <UART_SetConfig+0x2d4>)
 80063c4:	fba3 1302 	umull	r1, r3, r3, r2
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	2164      	movs	r1, #100	@ 0x64
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	3332      	adds	r3, #50	@ 0x32
 80063d6:	4a08      	ldr	r2, [pc, #32]	@ (80063f8 <UART_SetConfig+0x2d4>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	f003 0207 	and.w	r2, r3, #7
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4422      	add	r2, r4
 80063ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063ec:	e106      	b.n	80065fc <UART_SetConfig+0x4d8>
 80063ee:	bf00      	nop
 80063f0:	40011000 	.word	0x40011000
 80063f4:	40011400 	.word	0x40011400
 80063f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006400:	2200      	movs	r2, #0
 8006402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800640a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800640e:	4642      	mov	r2, r8
 8006410:	464b      	mov	r3, r9
 8006412:	1891      	adds	r1, r2, r2
 8006414:	6239      	str	r1, [r7, #32]
 8006416:	415b      	adcs	r3, r3
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
 800641a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800641e:	4641      	mov	r1, r8
 8006420:	1854      	adds	r4, r2, r1
 8006422:	4649      	mov	r1, r9
 8006424:	eb43 0501 	adc.w	r5, r3, r1
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	00eb      	lsls	r3, r5, #3
 8006432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006436:	00e2      	lsls	r2, r4, #3
 8006438:	4614      	mov	r4, r2
 800643a:	461d      	mov	r5, r3
 800643c:	4643      	mov	r3, r8
 800643e:	18e3      	adds	r3, r4, r3
 8006440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006444:	464b      	mov	r3, r9
 8006446:	eb45 0303 	adc.w	r3, r5, r3
 800644a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800645a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800646a:	4629      	mov	r1, r5
 800646c:	008b      	lsls	r3, r1, #2
 800646e:	4621      	mov	r1, r4
 8006470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006474:	4621      	mov	r1, r4
 8006476:	008a      	lsls	r2, r1, #2
 8006478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800647c:	f7fa f8d4 	bl	8000628 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4b60      	ldr	r3, [pc, #384]	@ (8006608 <UART_SetConfig+0x4e4>)
 8006486:	fba3 2302 	umull	r2, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	011c      	lsls	r4, r3, #4
 800648e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800649c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	61b9      	str	r1, [r7, #24]
 80064a8:	415b      	adcs	r3, r3
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6139      	str	r1, [r7, #16]
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064e4:	464b      	mov	r3, r9
 80064e6:	460a      	mov	r2, r1
 80064e8:	eb42 0303 	adc.w	r3, r2, r3
 80064ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006508:	4649      	mov	r1, r9
 800650a:	008b      	lsls	r3, r1, #2
 800650c:	4641      	mov	r1, r8
 800650e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006512:	4641      	mov	r1, r8
 8006514:	008a      	lsls	r2, r1, #2
 8006516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800651a:	f7fa f885 	bl	8000628 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4611      	mov	r1, r2
 8006524:	4b38      	ldr	r3, [pc, #224]	@ (8006608 <UART_SetConfig+0x4e4>)
 8006526:	fba3 2301 	umull	r2, r3, r3, r1
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	2264      	movs	r2, #100	@ 0x64
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	1acb      	subs	r3, r1, r3
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	3332      	adds	r3, #50	@ 0x32
 8006538:	4a33      	ldr	r2, [pc, #204]	@ (8006608 <UART_SetConfig+0x4e4>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006544:	441c      	add	r4, r3
 8006546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800654a:	2200      	movs	r2, #0
 800654c:	673b      	str	r3, [r7, #112]	@ 0x70
 800654e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	1891      	adds	r1, r2, r2
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	415b      	adcs	r3, r3
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006564:	4641      	mov	r1, r8
 8006566:	1851      	adds	r1, r2, r1
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	4649      	mov	r1, r9
 800656c:	414b      	adcs	r3, r1
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800657c:	4659      	mov	r1, fp
 800657e:	00cb      	lsls	r3, r1, #3
 8006580:	4651      	mov	r1, sl
 8006582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006586:	4651      	mov	r1, sl
 8006588:	00ca      	lsls	r2, r1, #3
 800658a:	4610      	mov	r0, r2
 800658c:	4619      	mov	r1, r3
 800658e:	4603      	mov	r3, r0
 8006590:	4642      	mov	r2, r8
 8006592:	189b      	adds	r3, r3, r2
 8006594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006596:	464b      	mov	r3, r9
 8006598:	460a      	mov	r2, r1
 800659a:	eb42 0303 	adc.w	r3, r2, r3
 800659e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80065aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065b8:	4649      	mov	r1, r9
 80065ba:	008b      	lsls	r3, r1, #2
 80065bc:	4641      	mov	r1, r8
 80065be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c2:	4641      	mov	r1, r8
 80065c4:	008a      	lsls	r2, r1, #2
 80065c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065ca:	f7fa f82d 	bl	8000628 <__aeabi_uldivmod>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <UART_SetConfig+0x4e4>)
 80065d4:	fba3 1302 	umull	r1, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	2164      	movs	r1, #100	@ 0x64
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	3332      	adds	r3, #50	@ 0x32
 80065e6:	4a08      	ldr	r2, [pc, #32]	@ (8006608 <UART_SetConfig+0x4e4>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4422      	add	r2, r4
 80065fa:	609a      	str	r2, [r3, #8]
}
 80065fc:	bf00      	nop
 80065fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006608:	51eb851f 	.word	0x51eb851f

0800660c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006610:	4904      	ldr	r1, [pc, #16]	@ (8006624 <MX_FATFS_Init+0x18>)
 8006612:	4805      	ldr	r0, [pc, #20]	@ (8006628 <MX_FATFS_Init+0x1c>)
 8006614:	f000 f858 	bl	80066c8 <FATFS_LinkDriver>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	4b03      	ldr	r3, [pc, #12]	@ (800662c <MX_FATFS_Init+0x20>)
 800661e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006620:	bf00      	nop
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000710 	.word	0x20000710
 8006628:	0800aa18 	.word	0x0800aa18
 800662c:	2000070c 	.word	0x2000070c

08006630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800663e:	2301      	movs	r3, #1
 8006640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006646:	4b1f      	ldr	r3, [pc, #124]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006648:	7a5b      	ldrb	r3, [r3, #9]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d131      	bne.n	80066b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006650:	4b1c      	ldr	r3, [pc, #112]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006652:	7a5b      	ldrb	r3, [r3, #9]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	4b1a      	ldr	r3, [pc, #104]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 800665a:	2100      	movs	r1, #0
 800665c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800665e:	4b19      	ldr	r3, [pc, #100]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006660:	7a5b      	ldrb	r3, [r3, #9]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	4a17      	ldr	r2, [pc, #92]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800666e:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006670:	7a5b      	ldrb	r3, [r3, #9]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	4b13      	ldr	r3, [pc, #76]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006678:	4413      	add	r3, r2
 800667a:	79fa      	ldrb	r2, [r7, #7]
 800667c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800667e:	4b11      	ldr	r3, [pc, #68]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 8006680:	7a5b      	ldrb	r3, [r3, #9]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	b2d1      	uxtb	r1, r2
 8006688:	4a0e      	ldr	r2, [pc, #56]	@ (80066c4 <FATFS_LinkDriverEx+0x94>)
 800668a:	7251      	strb	r1, [r2, #9]
 800668c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800668e:	7dbb      	ldrb	r3, [r7, #22]
 8006690:	3330      	adds	r3, #48	@ 0x30
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	3301      	adds	r3, #1
 800669c:	223a      	movs	r2, #58	@ 0x3a
 800669e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3302      	adds	r3, #2
 80066a4:	222f      	movs	r2, #47	@ 0x2f
 80066a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3303      	adds	r3, #3
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000714 	.word	0x20000714

080066c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80066d2:	2200      	movs	r2, #0
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ffaa 	bl	8006630 <FATFS_LinkDriverEx>
 80066dc:	4603      	mov	r3, r0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <__NVIC_SetPriority>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	6039      	str	r1, [r7, #0]
 80066f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	db0a      	blt.n	8006712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	490c      	ldr	r1, [pc, #48]	@ (8006734 <__NVIC_SetPriority+0x4c>)
 8006702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006706:	0112      	lsls	r2, r2, #4
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	440b      	add	r3, r1
 800670c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006710:	e00a      	b.n	8006728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	4908      	ldr	r1, [pc, #32]	@ (8006738 <__NVIC_SetPriority+0x50>)
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	3b04      	subs	r3, #4
 8006720:	0112      	lsls	r2, r2, #4
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	440b      	add	r3, r1
 8006726:	761a      	strb	r2, [r3, #24]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	e000e100 	.word	0xe000e100
 8006738:	e000ed00 	.word	0xe000ed00

0800673c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006740:	2100      	movs	r1, #0
 8006742:	f06f 0004 	mvn.w	r0, #4
 8006746:	f7ff ffcf 	bl	80066e8 <__NVIC_SetPriority>
#endif
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006756:	f3ef 8305 	mrs	r3, IPSR
 800675a:	603b      	str	r3, [r7, #0]
  return(result);
 800675c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006762:	f06f 0305 	mvn.w	r3, #5
 8006766:	607b      	str	r3, [r7, #4]
 8006768:	e00c      	b.n	8006784 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800676a:	4b0a      	ldr	r3, [pc, #40]	@ (8006794 <osKernelInitialize+0x44>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006772:	4b08      	ldr	r3, [pc, #32]	@ (8006794 <osKernelInitialize+0x44>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006778:	2300      	movs	r3, #0
 800677a:	607b      	str	r3, [r7, #4]
 800677c:	e002      	b.n	8006784 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006784:	687b      	ldr	r3, [r7, #4]
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000720 	.word	0x20000720

08006798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800679e:	f3ef 8305 	mrs	r3, IPSR
 80067a2:	603b      	str	r3, [r7, #0]
  return(result);
 80067a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80067aa:	f06f 0305 	mvn.w	r3, #5
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	e010      	b.n	80067d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067b2:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <osKernelStart+0x48>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d109      	bne.n	80067ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067ba:	f7ff ffbf 	bl	800673c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067be:	4b08      	ldr	r3, [pc, #32]	@ (80067e0 <osKernelStart+0x48>)
 80067c0:	2202      	movs	r2, #2
 80067c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067c4:	f001 fa96 	bl	8007cf4 <vTaskStartScheduler>
      stat = osOK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	e002      	b.n	80067d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067d4:	687b      	ldr	r3, [r7, #4]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000720 	.word	0x20000720

080067e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	@ 0x38
 80067e8:	af04      	add	r7, sp, #16
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f4:	f3ef 8305 	mrs	r3, IPSR
 80067f8:	617b      	str	r3, [r7, #20]
  return(result);
 80067fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d17e      	bne.n	80068fe <osThreadNew+0x11a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d07b      	beq.n	80068fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006806:	2380      	movs	r3, #128	@ 0x80
 8006808:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800680a:	2318      	movs	r3, #24
 800680c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d045      	beq.n	80068aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <osThreadNew+0x48>
        name = attr->name;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <osThreadNew+0x6e>
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	2b38      	cmp	r3, #56	@ 0x38
 8006844:	d805      	bhi.n	8006852 <osThreadNew+0x6e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <osThreadNew+0x72>
        return (NULL);
 8006852:	2300      	movs	r3, #0
 8006854:	e054      	b.n	8006900 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <osThreadNew+0xa8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b5b      	cmp	r3, #91	@ 0x5b
 8006874:	d90a      	bls.n	800688c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800687a:	2b00      	cmp	r3, #0
 800687c:	d006      	beq.n	800688c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <osThreadNew+0xa8>
        mem = 1;
 8006886:	2301      	movs	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	e010      	b.n	80068ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10c      	bne.n	80068ae <osThreadNew+0xca>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <osThreadNew+0xca>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <osThreadNew+0xca>
          mem = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	e001      	b.n	80068ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068bc:	9202      	str	r2, [sp, #8]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f001 f836 	bl	800793c <xTaskCreateStatic>
 80068d0:	4603      	mov	r3, r0
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	e013      	b.n	80068fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d110      	bne.n	80068fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f107 0310 	add.w	r3, r7, #16
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f001 f884 	bl	80079fc <xTaskCreate>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <osThreadNew+0x11a>
            hTask = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068fe:	693b      	ldr	r3, [r7, #16]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	@ 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006910:	f3ef 8305 	mrs	r3, IPSR
 8006914:	60bb      	str	r3, [r7, #8]
  return(result);
 8006916:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <osDelay+0x1c>
    stat = osErrorISR;
 800691c:	f06f 0305 	mvn.w	r3, #5
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e007      	b.n	8006934 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <osDelay+0x2c>
      vTaskDelay(ticks);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 f9aa 	bl	8007c88 <vTaskDelay>
    }
  }

  return (stat);
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800695c:	f3ef 8305 	mrs	r3, IPSR
 8006960:	60bb      	str	r3, [r7, #8]
  return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006968:	f06f 0305 	mvn.w	r3, #5
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e02c      	b.n	80069ca <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006976:	f06f 0303 	mvn.w	r3, #3
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e025      	b.n	80069ca <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d011      	beq.n	80069a8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6938      	ldr	r0, [r7, #16]
 8006988:	f000 fa89 	bl	8006e9e <xQueueTakeMutexRecursive>
 800698c:	4603      	mov	r3, r0
 800698e:	2b01      	cmp	r3, #1
 8006990:	d01b      	beq.n	80069ca <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006998:	f06f 0301 	mvn.w	r3, #1
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e014      	b.n	80069ca <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80069a0:	f06f 0302 	mvn.w	r3, #2
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e010      	b.n	80069ca <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	f000 fd30 	bl	8007410 <xQueueSemaphoreTake>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d009      	beq.n	80069ca <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80069bc:	f06f 0301 	mvn.w	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e002      	b.n	80069ca <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80069c4:	f06f 0302 	mvn.w	r3, #2
 80069c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80069ca:	697b      	ldr	r3, [r7, #20]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f0:	f3ef 8305 	mrs	r3, IPSR
 80069f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80069f6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <osMutexRelease+0x30>
    stat = osErrorISR;
 80069fc:	f06f 0305 	mvn.w	r3, #5
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e01f      	b.n	8006a44 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006a0a:	f06f 0303 	mvn.w	r3, #3
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e018      	b.n	8006a44 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006a18:	6938      	ldr	r0, [r7, #16]
 8006a1a:	f000 fa0b 	bl	8006e34 <xQueueGiveMutexRecursive>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d00f      	beq.n	8006a44 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006a24:	f06f 0302 	mvn.w	r3, #2
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e00b      	b.n	8006a44 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2100      	movs	r1, #0
 8006a32:	6938      	ldr	r0, [r7, #16]
 8006a34:	f000 fa6a 	bl	8006f0c <xQueueGenericSend>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d002      	beq.n	8006a44 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006a3e:	f06f 0302 	mvn.w	r3, #2
 8006a42:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006a44:	697b      	ldr	r3, [r7, #20]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a07      	ldr	r2, [pc, #28]	@ (8006a7c <vApplicationGetIdleTaskMemory+0x2c>)
 8006a60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4a06      	ldr	r2, [pc, #24]	@ (8006a80 <vApplicationGetIdleTaskMemory+0x30>)
 8006a66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2280      	movs	r2, #128	@ 0x80
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000724 	.word	0x20000724
 8006a80:	20000780 	.word	0x20000780

08006a84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a07      	ldr	r2, [pc, #28]	@ (8006ab0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a06      	ldr	r2, [pc, #24]	@ (8006ab4 <vApplicationGetTimerTaskMemory+0x30>)
 8006a9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aa2:	601a      	str	r2, [r3, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000980 	.word	0x20000980
 8006ab4:	200009dc 	.word	0x200009dc

08006ab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f103 0208 	add.w	r2, r3, #8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f103 0208 	add.w	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f103 0208 	add.w	r2, r3, #8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d103      	bne.n	8006b7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e00c      	b.n	8006b94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e002      	b.n	8006b88 <vListInsert+0x2e>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d2f6      	bcs.n	8006b82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6892      	ldr	r2, [r2, #8]
 8006be2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6852      	ldr	r2, [r2, #4]
 8006bec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d103      	bne.n	8006c00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1e5a      	subs	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10b      	bne.n	8006c4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	e7fd      	b.n	8006c48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c4c:	f002 fb1c 	bl	8009288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c58:	68f9      	ldr	r1, [r7, #12]
 8006c5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	441a      	add	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	441a      	add	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	22ff      	movs	r2, #255	@ 0xff
 8006c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	22ff      	movs	r2, #255	@ 0xff
 8006c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d114      	bne.n	8006ccc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01a      	beq.n	8006ce0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3310      	adds	r3, #16
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 faae 	bl	8008210 <xTaskRemoveFromEventList>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d012      	beq.n	8006ce0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <xQueueGenericReset+0xd0>)
 8006cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	e009      	b.n	8006ce0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3310      	adds	r3, #16
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fef1 	bl	8006ab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3324      	adds	r3, #36	@ 0x24
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff feec 	bl	8006ab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ce0:	f002 fb04 	bl	80092ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ce4:	2301      	movs	r3, #1
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	@ 0x38
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10b      	bne.n	8006d20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10b      	bne.n	8006d3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <xQueueGenericCreateStatic+0x56>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <xQueueGenericCreateStatic+0x5a>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <xQueueGenericCreateStatic+0x5c>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10b      	bne.n	8006d6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	623b      	str	r3, [r7, #32]
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <xQueueGenericCreateStatic+0x84>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueGenericCreateStatic+0x88>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueGenericCreateStatic+0x8a>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61fb      	str	r3, [r7, #28]
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	e7fd      	b.n	8006d96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d9a:	2350      	movs	r3, #80	@ 0x50
 8006d9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b50      	cmp	r3, #80	@ 0x50
 8006da2:	d00b      	beq.n	8006dbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	61bb      	str	r3, [r7, #24]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f805 	bl	8006dee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3730      	adds	r7, #48	@ 0x30
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e002      	b.n	8006e10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	69b8      	ldr	r0, [r7, #24]
 8006e20:	f7ff fefe 	bl	8006c20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	60fb      	str	r3, [r7, #12]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	689c      	ldr	r4, [r3, #8]
 8006e62:	f001 fb95 	bl	8008590 <xTaskGetCurrentTaskHandle>
 8006e66:	4603      	mov	r3, r0
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	d111      	bne.n	8006e90 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2200      	movs	r2, #0
 8006e82:	2100      	movs	r1, #0
 8006e84:	6938      	ldr	r0, [r7, #16]
 8006e86:	f000 f841 	bl	8006f0c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e001      	b.n	8006e94 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006e94:	697b      	ldr	r3, [r7, #20]
	}
 8006e96:	4618      	mov	r0, r3
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd90      	pop	{r4, r7, pc}

08006e9e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006e9e:	b590      	push	{r4, r7, lr}
 8006ea0:	b087      	sub	sp, #28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10b      	bne.n	8006eca <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60fb      	str	r3, [r7, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	e7fd      	b.n	8006ec6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	689c      	ldr	r4, [r3, #8]
 8006ece:	f001 fb5f 	bl	8008590 <xTaskGetCurrentTaskHandle>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d107      	bne.n	8006ee8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e00c      	b.n	8006f02 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 fa90 	bl	8007410 <xQueueSemaphoreTake>
 8006ef0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006f02:	697b      	ldr	r3, [r7, #20]
	}
 8006f04:	4618      	mov	r0, r3
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd90      	pop	{r4, r7, pc}

08006f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08e      	sub	sp, #56	@ 0x38
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <xQueueGenericSend+0x34>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <xQueueGenericSend+0x42>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <xQueueGenericSend+0x46>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueGenericSend+0x48>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <xQueueGenericSend+0x64>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d103      	bne.n	8006f7e <xQueueGenericSend+0x72>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <xQueueGenericSend+0x76>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xQueueGenericSend+0x78>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <xQueueGenericSend+0x94>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	623b      	str	r3, [r7, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	e7fd      	b.n	8006f9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fa0:	f001 fb06 	bl	80085b0 <xTaskGetSchedulerState>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <xQueueGenericSend+0xa4>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <xQueueGenericSend+0xa8>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <xQueueGenericSend+0xaa>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	61fb      	str	r3, [r7, #28]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fd2:	f002 f959 	bl	8009288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <xQueueGenericSend+0xdc>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d129      	bne.n	800703c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fee:	f000 fb37 	bl	8007660 <prvCopyDataToQueue>
 8006ff2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d010      	beq.n	800701e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	3324      	adds	r3, #36	@ 0x24
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f905 	bl	8008210 <xTaskRemoveFromEventList>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d013      	beq.n	8007034 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800700c:	4b3f      	ldr	r3, [pc, #252]	@ (800710c <xQueueGenericSend+0x200>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	e00a      	b.n	8007034 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007024:	4b39      	ldr	r3, [pc, #228]	@ (800710c <xQueueGenericSend+0x200>)
 8007026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007034:	f002 f95a 	bl	80092ec <vPortExitCritical>
				return pdPASS;
 8007038:	2301      	movs	r3, #1
 800703a:	e063      	b.n	8007104 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007042:	f002 f953 	bl	80092ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007046:	2300      	movs	r3, #0
 8007048:	e05c      	b.n	8007104 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800704a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007050:	f107 0314 	add.w	r3, r7, #20
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f93f 	bl	80082d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800705a:	2301      	movs	r3, #1
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800705e:	f002 f945 	bl	80092ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007062:	f000 feaf 	bl	8007dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007066:	f002 f90f 	bl	8009288 <vPortEnterCritical>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007070:	b25b      	sxtb	r3, r3
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d103      	bne.n	8007080 <xQueueGenericSend+0x174>
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007086:	b25b      	sxtb	r3, r3
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d103      	bne.n	8007096 <xQueueGenericSend+0x18a>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007096:	f002 f929 	bl	80092ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800709a:	1d3a      	adds	r2, r7, #4
 800709c:	f107 0314 	add.w	r3, r7, #20
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 f92e 	bl	8008304 <xTaskCheckForTimeOut>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d124      	bne.n	80070f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070b0:	f000 fbce 	bl	8007850 <prvIsQueueFull>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d018      	beq.n	80070ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	3310      	adds	r3, #16
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f852 	bl	800816c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070ca:	f000 fb59 	bl	8007780 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070ce:	f000 fe87 	bl	8007de0 <xTaskResumeAll>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f47f af7c 	bne.w	8006fd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80070da:	4b0c      	ldr	r3, [pc, #48]	@ (800710c <xQueueGenericSend+0x200>)
 80070dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	e772      	b.n	8006fd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070ee:	f000 fb47 	bl	8007780 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070f2:	f000 fe75 	bl	8007de0 <xTaskResumeAll>
 80070f6:	e76c      	b.n	8006fd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070fa:	f000 fb41 	bl	8007780 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070fe:	f000 fe6f 	bl	8007de0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007104:	4618      	mov	r0, r3
 8007106:	3738      	adds	r7, #56	@ 0x38
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b090      	sub	sp, #64	@ 0x40
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10b      	bne.n	8007140 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <xQueueGenericSendFromISR+0x3e>
 8007146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <xQueueGenericSendFromISR+0x42>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <xQueueGenericSendFromISR+0x44>
 8007152:	2300      	movs	r3, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d103      	bne.n	800717e <xQueueGenericSendFromISR+0x6e>
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <xQueueGenericSendFromISR+0x72>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <xQueueGenericSendFromISR+0x74>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	623b      	str	r3, [r7, #32]
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071a0:	f002 f952 	bl	8009448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071a4:	f3ef 8211 	mrs	r2, BASEPRI
 80071a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	61fa      	str	r2, [r7, #28]
 80071ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d302      	bcc.n	80071d2 <xQueueGenericSendFromISR+0xc2>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d12f      	bne.n	8007232 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071e8:	f000 fa3a 	bl	8007660 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d112      	bne.n	800721c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d016      	beq.n	800722c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	3324      	adds	r3, #36	@ 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f804 	bl	8008210 <xTaskRemoveFromEventList>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00e      	beq.n	800722c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e007      	b.n	800722c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800721c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007220:	3301      	adds	r3, #1
 8007222:	b2db      	uxtb	r3, r3
 8007224:	b25a      	sxtb	r2, r3
 8007226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007230:	e001      	b.n	8007236 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007232:	2300      	movs	r3, #0
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007238:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007244:	4618      	mov	r0, r3
 8007246:	3740      	adds	r7, #64	@ 0x40
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	@ 0x30
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007258:	2300      	movs	r3, #0
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <xQueueReceive+0x32>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	623b      	str	r3, [r7, #32]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <xQueueReceive+0x40>
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <xQueueReceive+0x44>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <xQueueReceive+0x46>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <xQueueReceive+0x62>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	61fb      	str	r3, [r7, #28]
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	e7fd      	b.n	80072aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ae:	f001 f97f 	bl	80085b0 <xTaskGetSchedulerState>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <xQueueReceive+0x72>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <xQueueReceive+0x76>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <xQueueReceive+0x78>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10b      	bne.n	80072e0 <xQueueReceive+0x94>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	61bb      	str	r3, [r7, #24]
}
 80072da:	bf00      	nop
 80072dc:	bf00      	nop
 80072de:	e7fd      	b.n	80072dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072e0:	f001 ffd2 	bl	8009288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01f      	beq.n	8007330 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072f4:	f000 fa1e 	bl	8007734 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	1e5a      	subs	r2, r3, #1
 80072fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00f      	beq.n	8007328 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	3310      	adds	r3, #16
 800730c:	4618      	mov	r0, r3
 800730e:	f000 ff7f 	bl	8008210 <xTaskRemoveFromEventList>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007318:	4b3c      	ldr	r3, [pc, #240]	@ (800740c <xQueueReceive+0x1c0>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007328:	f001 ffe0 	bl	80092ec <vPortExitCritical>
				return pdPASS;
 800732c:	2301      	movs	r3, #1
 800732e:	e069      	b.n	8007404 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d103      	bne.n	800733e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007336:	f001 ffd9 	bl	80092ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800733a:	2300      	movs	r3, #0
 800733c:	e062      	b.n	8007404 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	4618      	mov	r0, r3
 800734a:	f000 ffc5 	bl	80082d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800734e:	2301      	movs	r3, #1
 8007350:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007352:	f001 ffcb 	bl	80092ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007356:	f000 fd35 	bl	8007dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800735a:	f001 ff95 	bl	8009288 <vPortEnterCritical>
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007364:	b25b      	sxtb	r3, r3
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d103      	bne.n	8007374 <xQueueReceive+0x128>
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800737a:	b25b      	sxtb	r3, r3
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d103      	bne.n	800738a <xQueueReceive+0x13e>
 8007382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800738a:	f001 ffaf 	bl	80092ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800738e:	1d3a      	adds	r2, r7, #4
 8007390:	f107 0310 	add.w	r3, r7, #16
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f000 ffb4 	bl	8008304 <xTaskCheckForTimeOut>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d123      	bne.n	80073ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073a4:	f000 fa3e 	bl	8007824 <prvIsQueueEmpty>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d017      	beq.n	80073de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b0:	3324      	adds	r3, #36	@ 0x24
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fed8 	bl	800816c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073be:	f000 f9df 	bl	8007780 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073c2:	f000 fd0d 	bl	8007de0 <xTaskResumeAll>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d189      	bne.n	80072e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80073cc:	4b0f      	ldr	r3, [pc, #60]	@ (800740c <xQueueReceive+0x1c0>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	e780      	b.n	80072e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073e0:	f000 f9ce 	bl	8007780 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073e4:	f000 fcfc 	bl	8007de0 <xTaskResumeAll>
 80073e8:	e77a      	b.n	80072e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ec:	f000 f9c8 	bl	8007780 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073f0:	f000 fcf6 	bl	8007de0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f6:	f000 fa15 	bl	8007824 <prvIsQueueEmpty>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f43f af6f 	beq.w	80072e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007402:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007404:	4618      	mov	r0, r3
 8007406:	3730      	adds	r7, #48	@ 0x30
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08e      	sub	sp, #56	@ 0x38
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007422:	2300      	movs	r3, #0
 8007424:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	623b      	str	r3, [r7, #32]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	61fb      	str	r3, [r7, #28]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007464:	f001 f8a4 	bl	80085b0 <xTaskGetSchedulerState>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <xQueueSemaphoreTake+0x64>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueSemaphoreTake+0x68>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueSemaphoreTake+0x6a>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61bb      	str	r3, [r7, #24]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007496:	f001 fef7 	bl	8009288 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800749a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d024      	beq.n	80074f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	1e5a      	subs	r2, r3, #1
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074b6:	f001 f9f5 	bl	80088a4 <pvTaskIncrementMutexHeldCount>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00f      	beq.n	80074e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	3310      	adds	r3, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fe9f 	bl	8008210 <xTaskRemoveFromEventList>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074d8:	4b54      	ldr	r3, [pc, #336]	@ (800762c <xQueueSemaphoreTake+0x21c>)
 80074da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074e8:	f001 ff00 	bl	80092ec <vPortExitCritical>
				return pdPASS;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e098      	b.n	8007622 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d112      	bne.n	800751c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	617b      	str	r3, [r7, #20]
}
 800750e:	bf00      	nop
 8007510:	bf00      	nop
 8007512:	e7fd      	b.n	8007510 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007514:	f001 feea 	bl	80092ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007518:	2300      	movs	r3, #0
 800751a:	e082      	b.n	8007622 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800751c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fed6 	bl	80082d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007530:	f001 fedc 	bl	80092ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007534:	f000 fc46 	bl	8007dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007538:	f001 fea6 	bl	8009288 <vPortEnterCritical>
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007542:	b25b      	sxtb	r3, r3
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d103      	bne.n	8007552 <xQueueSemaphoreTake+0x142>
 800754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007558:	b25b      	sxtb	r3, r3
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d103      	bne.n	8007568 <xQueueSemaphoreTake+0x158>
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007568:	f001 fec0 	bl	80092ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800756c:	463a      	mov	r2, r7
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fec5 	bl	8008304 <xTaskCheckForTimeOut>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d132      	bne.n	80075e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007580:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007582:	f000 f94f 	bl	8007824 <prvIsQueueEmpty>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d026      	beq.n	80075da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007594:	f001 fe78 	bl	8009288 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4618      	mov	r0, r3
 800759e:	f001 f825 	bl	80085ec <xTaskPriorityInherit>
 80075a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80075a4:	f001 fea2 	bl	80092ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	3324      	adds	r3, #36	@ 0x24
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fddb 	bl	800816c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075b8:	f000 f8e2 	bl	8007780 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075bc:	f000 fc10 	bl	8007de0 <xTaskResumeAll>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f47f af67 	bne.w	8007496 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80075c8:	4b18      	ldr	r3, [pc, #96]	@ (800762c <xQueueSemaphoreTake+0x21c>)
 80075ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	e75d      	b.n	8007496 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075dc:	f000 f8d0 	bl	8007780 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075e0:	f000 fbfe 	bl	8007de0 <xTaskResumeAll>
 80075e4:	e757      	b.n	8007496 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80075e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075e8:	f000 f8ca 	bl	8007780 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075ec:	f000 fbf8 	bl	8007de0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075f2:	f000 f917 	bl	8007824 <prvIsQueueEmpty>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f43f af4c 	beq.w	8007496 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00d      	beq.n	8007620 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007604:	f001 fe40 	bl	8009288 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007608:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800760a:	f000 f811 	bl	8007630 <prvGetDisinheritPriorityAfterTimeout>
 800760e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007616:	4618      	mov	r0, r3
 8007618:	f001 f8c0 	bl	800879c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800761c:	f001 fe66 	bl	80092ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007620:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007622:	4618      	mov	r0, r3
 8007624:	3738      	adds	r7, #56	@ 0x38
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e001      	b.n	8007652 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007652:	68fb      	ldr	r3, [r7, #12]
	}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d14d      	bne.n	8007722 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f001 f816 	bl	80086bc <xTaskPriorityDisinherit>
 8007690:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	e043      	b.n	8007722 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d119      	bne.n	80076d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6858      	ldr	r0, [r3, #4]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	461a      	mov	r2, r3
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	f002 fc3f 	bl	8009f2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	441a      	add	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d32b      	bcc.n	8007722 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
 80076d2:	e026      	b.n	8007722 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68d8      	ldr	r0, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076dc:	461a      	mov	r2, r3
 80076de:	68b9      	ldr	r1, [r7, #8]
 80076e0:	f002 fc25 	bl	8009f2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ec:	425b      	negs	r3, r3
 80076ee:	441a      	add	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d207      	bcs.n	8007710 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007708:	425b      	negs	r3, r3
 800770a:	441a      	add	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d105      	bne.n	8007722 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	3b01      	subs	r3, #1
 8007720:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800772a:	697b      	ldr	r3, [r7, #20]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	429a      	cmp	r2, r3
 800775e:	d303      	bcc.n	8007768 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68d9      	ldr	r1, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007770:	461a      	mov	r2, r3
 8007772:	6838      	ldr	r0, [r7, #0]
 8007774:	f002 fbdb 	bl	8009f2e <memcpy>
	}
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007788:	f001 fd7e 	bl	8009288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007792:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007794:	e011      	b.n	80077ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779a:	2b00      	cmp	r3, #0
 800779c:	d012      	beq.n	80077c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3324      	adds	r3, #36	@ 0x24
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fd34 	bl	8008210 <xTaskRemoveFromEventList>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077ae:	f000 fe0d 	bl	80083cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dce9      	bgt.n	8007796 <prvUnlockQueue+0x16>
 80077c2:	e000      	b.n	80077c6 <prvUnlockQueue+0x46>
					break;
 80077c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	22ff      	movs	r2, #255	@ 0xff
 80077ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80077ce:	f001 fd8d 	bl	80092ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077d2:	f001 fd59 	bl	8009288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077de:	e011      	b.n	8007804 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d012      	beq.n	800780e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3310      	adds	r3, #16
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fd0f 	bl	8008210 <xTaskRemoveFromEventList>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077f8:	f000 fde8 	bl	80083cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	3b01      	subs	r3, #1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dce9      	bgt.n	80077e0 <prvUnlockQueue+0x60>
 800780c:	e000      	b.n	8007810 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800780e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	22ff      	movs	r2, #255	@ 0xff
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007818:	f001 fd68 	bl	80092ec <vPortExitCritical>
}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800782c:	f001 fd2c 	bl	8009288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e001      	b.n	8007842 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007842:	f001 fd53 	bl	80092ec <vPortExitCritical>

	return xReturn;
 8007846:	68fb      	ldr	r3, [r7, #12]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007858:	f001 fd16 	bl	8009288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007864:	429a      	cmp	r2, r3
 8007866:	d102      	bne.n	800786e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e001      	b.n	8007872 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007872:	f001 fd3b 	bl	80092ec <vPortExitCritical>

	return xReturn;
 8007876:	68fb      	ldr	r3, [r7, #12]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e014      	b.n	80078ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007890:	4a0f      	ldr	r2, [pc, #60]	@ (80078d0 <vQueueAddToRegistry+0x50>)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800789c:	490c      	ldr	r1, [pc, #48]	@ (80078d0 <vQueueAddToRegistry+0x50>)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078a6:	4a0a      	ldr	r2, [pc, #40]	@ (80078d0 <vQueueAddToRegistry+0x50>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	4413      	add	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078b2:	e006      	b.n	80078c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b07      	cmp	r3, #7
 80078be:	d9e7      	bls.n	8007890 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000ddc 	.word	0x20000ddc

080078d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078e4:	f001 fcd0 	bl	8009288 <vPortEnterCritical>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078ee:	b25b      	sxtb	r3, r3
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d103      	bne.n	80078fe <vQueueWaitForMessageRestricted+0x2a>
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007904:	b25b      	sxtb	r3, r3
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	d103      	bne.n	8007914 <vQueueWaitForMessageRestricted+0x40>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007914:	f001 fcea 	bl	80092ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	d106      	bne.n	800792e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3324      	adds	r3, #36	@ 0x24
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fc45 	bl	80081b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f7ff ff26 	bl	8007780 <prvUnlockQueue>
	}
 8007934:	bf00      	nop
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08e      	sub	sp, #56	@ 0x38
 8007940:	af04      	add	r7, sp, #16
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800794a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	623b      	str	r3, [r7, #32]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <xTaskCreateStatic+0x4a>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	61fb      	str	r3, [r7, #28]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007986:	235c      	movs	r3, #92	@ 0x5c
 8007988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b5c      	cmp	r3, #92	@ 0x5c
 800798e:	d00b      	beq.n	80079a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	61bb      	str	r3, [r7, #24]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01e      	beq.n	80079ee <xTaskCreateStatic+0xb2>
 80079b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01b      	beq.n	80079ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079c8:	2300      	movs	r3, #0
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	9302      	str	r3, [sp, #8]
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f850 	bl	8007a86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079e8:	f000 f8de 	bl	8007ba8 <prvAddNewTaskToReadyList>
 80079ec:	e001      	b.n	80079f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079f2:	697b      	ldr	r3, [r7, #20]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3728      	adds	r7, #40	@ 0x28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	@ 0x30
 8007a00:	af04      	add	r7, sp, #16
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 fd5b 	bl	80094cc <pvPortMalloc>
 8007a16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a1e:	205c      	movs	r0, #92	@ 0x5c
 8007a20:	f001 fd54 	bl	80094cc <pvPortMalloc>
 8007a24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a32:	e005      	b.n	8007a40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a34:	6978      	ldr	r0, [r7, #20]
 8007a36:	f001 fe17 	bl	8009668 <vPortFree>
 8007a3a:	e001      	b.n	8007a40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d017      	beq.n	8007a76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	2300      	movs	r3, #0
 8007a52:	9303      	str	r3, [sp, #12]
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9302      	str	r3, [sp, #8]
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f80e 	bl	8007a86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a6a:	69f8      	ldr	r0, [r7, #28]
 8007a6c:	f000 f89c 	bl	8007ba8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a70:	2301      	movs	r3, #1
 8007a72:	61bb      	str	r3, [r7, #24]
 8007a74:	e002      	b.n	8007a7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a76:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b088      	sub	sp, #32
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	21a5      	movs	r1, #165	@ 0xa5
 8007aa0:	f002 f9ba 	bl	8009e18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f023 0307 	bic.w	r3, r3, #7
 8007abc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	617b      	str	r3, [r7, #20]
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	e7fd      	b.n	8007adc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01f      	beq.n	8007b26 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	e012      	b.n	8007b12 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4413      	add	r3, r2
 8007af2:	7819      	ldrb	r1, [r3, #0]
 8007af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	3334      	adds	r3, #52	@ 0x34
 8007afc:	460a      	mov	r2, r1
 8007afe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	2b0f      	cmp	r3, #15
 8007b16:	d9e9      	bls.n	8007aec <prvInitialiseNewTask+0x66>
 8007b18:	e000      	b.n	8007b1c <prvInitialiseNewTask+0x96>
			{
				break;
 8007b1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b24:	e003      	b.n	8007b2e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	2b37      	cmp	r3, #55	@ 0x37
 8007b32:	d901      	bls.n	8007b38 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b34:	2337      	movs	r3, #55	@ 0x37
 8007b36:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b42:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	2200      	movs	r2, #0
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe ffd2 	bl	8006af8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	3318      	adds	r3, #24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe ffcd 	bl	8006af8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b72:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	2200      	movs	r2, #0
 8007b78:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	68f9      	ldr	r1, [r7, #12]
 8007b86:	69b8      	ldr	r0, [r7, #24]
 8007b88:	f001 fa4e 	bl	8009028 <pxPortInitialiseStack>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b9e:	bf00      	nop
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bb0:	f001 fb6a 	bl	8009288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8007c6c <prvAddNewTaskToReadyList+0xc4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	4a2c      	ldr	r2, [pc, #176]	@ (8007c6c <prvAddNewTaskToReadyList+0xc4>)
 8007bbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8007c70 <prvAddNewTaskToReadyList+0xc8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c70 <prvAddNewTaskToReadyList+0xc8>)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bcc:	4b27      	ldr	r3, [pc, #156]	@ (8007c6c <prvAddNewTaskToReadyList+0xc4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d110      	bne.n	8007bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bd4:	f000 fc1e 	bl	8008414 <prvInitialiseTaskLists>
 8007bd8:	e00d      	b.n	8007bf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bda:	4b26      	ldr	r3, [pc, #152]	@ (8007c74 <prvAddNewTaskToReadyList+0xcc>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007be2:	4b23      	ldr	r3, [pc, #140]	@ (8007c70 <prvAddNewTaskToReadyList+0xc8>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d802      	bhi.n	8007bf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8007c70 <prvAddNewTaskToReadyList+0xc8>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bf6:	4b20      	ldr	r3, [pc, #128]	@ (8007c78 <prvAddNewTaskToReadyList+0xd0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c78 <prvAddNewTaskToReadyList+0xd0>)
 8007bfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c00:	4b1d      	ldr	r3, [pc, #116]	@ (8007c78 <prvAddNewTaskToReadyList+0xd0>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c7c <prvAddNewTaskToReadyList+0xd4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d903      	bls.n	8007c1c <prvAddNewTaskToReadyList+0x74>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	4a18      	ldr	r2, [pc, #96]	@ (8007c7c <prvAddNewTaskToReadyList+0xd4>)
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4a15      	ldr	r2, [pc, #84]	@ (8007c80 <prvAddNewTaskToReadyList+0xd8>)
 8007c2a:	441a      	add	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fe ff6d 	bl	8006b12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c38:	f001 fb58 	bl	80092ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <prvAddNewTaskToReadyList+0xcc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c44:	4b0a      	ldr	r3, [pc, #40]	@ (8007c70 <prvAddNewTaskToReadyList+0xc8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d207      	bcs.n	8007c62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c52:	4b0c      	ldr	r3, [pc, #48]	@ (8007c84 <prvAddNewTaskToReadyList+0xdc>)
 8007c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	200012f0 	.word	0x200012f0
 8007c70:	20000e1c 	.word	0x20000e1c
 8007c74:	200012fc 	.word	0x200012fc
 8007c78:	2000130c 	.word	0x2000130c
 8007c7c:	200012f8 	.word	0x200012f8
 8007c80:	20000e20 	.word	0x20000e20
 8007c84:	e000ed04 	.word	0xe000ed04

08007c88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d018      	beq.n	8007ccc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c9a:	4b14      	ldr	r3, [pc, #80]	@ (8007cec <vTaskDelay+0x64>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00b      	beq.n	8007cba <vTaskDelay+0x32>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	60bb      	str	r3, [r7, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cba:	f000 f883 	bl	8007dc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fe03 	bl	80088cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cc6:	f000 f88b 	bl	8007de0 <xTaskResumeAll>
 8007cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d107      	bne.n	8007ce2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007cd2:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <vTaskDelay+0x68>)
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ce2:	bf00      	nop
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20001318 	.word	0x20001318
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08a      	sub	sp, #40	@ 0x28
 8007cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d02:	463a      	mov	r2, r7
 8007d04:	1d39      	adds	r1, r7, #4
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fea0 	bl	8006a50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	9202      	str	r2, [sp, #8]
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	460a      	mov	r2, r1
 8007d22:	4922      	ldr	r1, [pc, #136]	@ (8007dac <vTaskStartScheduler+0xb8>)
 8007d24:	4822      	ldr	r0, [pc, #136]	@ (8007db0 <vTaskStartScheduler+0xbc>)
 8007d26:	f7ff fe09 	bl	800793c <xTaskCreateStatic>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4a21      	ldr	r2, [pc, #132]	@ (8007db4 <vTaskStartScheduler+0xc0>)
 8007d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d30:	4b20      	ldr	r3, [pc, #128]	@ (8007db4 <vTaskStartScheduler+0xc0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e001      	b.n	8007d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d102      	bne.n	8007d4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d48:	f000 fe14 	bl	8008974 <xTimerCreateTimerTask>
 8007d4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d116      	bne.n	8007d82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	613b      	str	r3, [r7, #16]
}
 8007d66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d68:	4b13      	ldr	r3, [pc, #76]	@ (8007db8 <vTaskStartScheduler+0xc4>)
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d70:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <vTaskStartScheduler+0xc8>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d76:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <vTaskStartScheduler+0xcc>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d7c:	f001 f9e0 	bl	8009140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d80:	e00f      	b.n	8007da2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d10b      	bne.n	8007da2 <vTaskStartScheduler+0xae>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	60fb      	str	r3, [r7, #12]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <vTaskStartScheduler+0xaa>
}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	0800aa00 	.word	0x0800aa00
 8007db0:	080083e5 	.word	0x080083e5
 8007db4:	20001314 	.word	0x20001314
 8007db8:	20001310 	.word	0x20001310
 8007dbc:	200012fc 	.word	0x200012fc
 8007dc0:	200012f4 	.word	0x200012f4

08007dc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007dc8:	4b04      	ldr	r3, [pc, #16]	@ (8007ddc <vTaskSuspendAll+0x18>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	4a03      	ldr	r2, [pc, #12]	@ (8007ddc <vTaskSuspendAll+0x18>)
 8007dd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007dd2:	bf00      	nop
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	20001318 	.word	0x20001318

08007de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007dee:	4b42      	ldr	r3, [pc, #264]	@ (8007ef8 <xTaskResumeAll+0x118>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <xTaskResumeAll+0x2e>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	603b      	str	r3, [r7, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e0e:	f001 fa3b 	bl	8009288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e12:	4b39      	ldr	r3, [pc, #228]	@ (8007ef8 <xTaskResumeAll+0x118>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	4a37      	ldr	r2, [pc, #220]	@ (8007ef8 <xTaskResumeAll+0x118>)
 8007e1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e1c:	4b36      	ldr	r3, [pc, #216]	@ (8007ef8 <xTaskResumeAll+0x118>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d162      	bne.n	8007eea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e24:	4b35      	ldr	r3, [pc, #212]	@ (8007efc <xTaskResumeAll+0x11c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d05e      	beq.n	8007eea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e2c:	e02f      	b.n	8007e8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2e:	4b34      	ldr	r3, [pc, #208]	@ (8007f00 <xTaskResumeAll+0x120>)
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3318      	adds	r3, #24
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fec6 	bl	8006bcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fec1 	bl	8006bcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007f04 <xTaskResumeAll+0x124>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d903      	bls.n	8007e5e <xTaskResumeAll+0x7e>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8007f04 <xTaskResumeAll+0x124>)
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4a27      	ldr	r2, [pc, #156]	@ (8007f08 <xTaskResumeAll+0x128>)
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f7fe fe4c 	bl	8006b12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	4b23      	ldr	r3, [pc, #140]	@ (8007f0c <xTaskResumeAll+0x12c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007e88:	4b21      	ldr	r3, [pc, #132]	@ (8007f10 <xTaskResumeAll+0x130>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007f00 <xTaskResumeAll+0x120>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1cb      	bne.n	8007e2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e9c:	f000 fb58 	bl	8008550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f14 <xTaskResumeAll+0x134>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d010      	beq.n	8007ece <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007eac:	f000 f846 	bl	8007f3c <xTaskIncrementTick>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007eb6:	4b16      	ldr	r3, [pc, #88]	@ (8007f10 <xTaskResumeAll+0x130>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f1      	bne.n	8007eac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007ec8:	4b12      	ldr	r3, [pc, #72]	@ (8007f14 <xTaskResumeAll+0x134>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ece:	4b10      	ldr	r3, [pc, #64]	@ (8007f10 <xTaskResumeAll+0x130>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007eda:	4b0f      	ldr	r3, [pc, #60]	@ (8007f18 <xTaskResumeAll+0x138>)
 8007edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f001 f9ff 	bl	80092ec <vPortExitCritical>

	return xAlreadyYielded;
 8007eee:	68bb      	ldr	r3, [r7, #8]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20001318 	.word	0x20001318
 8007efc:	200012f0 	.word	0x200012f0
 8007f00:	200012b0 	.word	0x200012b0
 8007f04:	200012f8 	.word	0x200012f8
 8007f08:	20000e20 	.word	0x20000e20
 8007f0c:	20000e1c 	.word	0x20000e1c
 8007f10:	20001304 	.word	0x20001304
 8007f14:	20001300 	.word	0x20001300
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f22:	4b05      	ldr	r3, [pc, #20]	@ (8007f38 <xTaskGetTickCount+0x1c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f28:	687b      	ldr	r3, [r7, #4]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	200012f4 	.word	0x200012f4

08007f3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f46:	4b4f      	ldr	r3, [pc, #316]	@ (8008084 <xTaskIncrementTick+0x148>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 8090 	bne.w	8008070 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f50:	4b4d      	ldr	r3, [pc, #308]	@ (8008088 <xTaskIncrementTick+0x14c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f58:	4a4b      	ldr	r2, [pc, #300]	@ (8008088 <xTaskIncrementTick+0x14c>)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d121      	bne.n	8007fa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f64:	4b49      	ldr	r3, [pc, #292]	@ (800808c <xTaskIncrementTick+0x150>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	603b      	str	r3, [r7, #0]
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <xTaskIncrementTick+0x46>
 8007f86:	4b41      	ldr	r3, [pc, #260]	@ (800808c <xTaskIncrementTick+0x150>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	4b40      	ldr	r3, [pc, #256]	@ (8008090 <xTaskIncrementTick+0x154>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a3e      	ldr	r2, [pc, #248]	@ (800808c <xTaskIncrementTick+0x150>)
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	4a3e      	ldr	r2, [pc, #248]	@ (8008090 <xTaskIncrementTick+0x154>)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8008094 <xTaskIncrementTick+0x158>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8008094 <xTaskIncrementTick+0x158>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	f000 fad4 	bl	8008550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8008098 <xTaskIncrementTick+0x15c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d349      	bcc.n	8008046 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fb2:	4b36      	ldr	r3, [pc, #216]	@ (800808c <xTaskIncrementTick+0x150>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbc:	4b36      	ldr	r3, [pc, #216]	@ (8008098 <xTaskIncrementTick+0x15c>)
 8007fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc2:	601a      	str	r2, [r3, #0]
					break;
 8007fc4:	e03f      	b.n	8008046 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc6:	4b31      	ldr	r3, [pc, #196]	@ (800808c <xTaskIncrementTick+0x150>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d203      	bcs.n	8007fe6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fde:	4a2e      	ldr	r2, [pc, #184]	@ (8008098 <xTaskIncrementTick+0x15c>)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007fe4:	e02f      	b.n	8008046 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fdee 	bl	8006bcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3318      	adds	r3, #24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe fde5 	bl	8006bcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008006:	4b25      	ldr	r3, [pc, #148]	@ (800809c <xTaskIncrementTick+0x160>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d903      	bls.n	8008016 <xTaskIncrementTick+0xda>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	4a22      	ldr	r2, [pc, #136]	@ (800809c <xTaskIncrementTick+0x160>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4a1f      	ldr	r2, [pc, #124]	@ (80080a0 <xTaskIncrementTick+0x164>)
 8008024:	441a      	add	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	3304      	adds	r3, #4
 800802a:	4619      	mov	r1, r3
 800802c:	4610      	mov	r0, r2
 800802e:	f7fe fd70 	bl	8006b12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008036:	4b1b      	ldr	r3, [pc, #108]	@ (80080a4 <xTaskIncrementTick+0x168>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d3b8      	bcc.n	8007fb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008044:	e7b5      	b.n	8007fb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008046:	4b17      	ldr	r3, [pc, #92]	@ (80080a4 <xTaskIncrementTick+0x168>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800804c:	4914      	ldr	r1, [pc, #80]	@ (80080a0 <xTaskIncrementTick+0x164>)
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d901      	bls.n	8008062 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008062:	4b11      	ldr	r3, [pc, #68]	@ (80080a8 <xTaskIncrementTick+0x16c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800806a:	2301      	movs	r3, #1
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	e004      	b.n	800807a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008070:	4b0e      	ldr	r3, [pc, #56]	@ (80080ac <xTaskIncrementTick+0x170>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	4a0d      	ldr	r2, [pc, #52]	@ (80080ac <xTaskIncrementTick+0x170>)
 8008078:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800807a:	697b      	ldr	r3, [r7, #20]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20001318 	.word	0x20001318
 8008088:	200012f4 	.word	0x200012f4
 800808c:	200012a8 	.word	0x200012a8
 8008090:	200012ac 	.word	0x200012ac
 8008094:	20001308 	.word	0x20001308
 8008098:	20001310 	.word	0x20001310
 800809c:	200012f8 	.word	0x200012f8
 80080a0:	20000e20 	.word	0x20000e20
 80080a4:	20000e1c 	.word	0x20000e1c
 80080a8:	20001304 	.word	0x20001304
 80080ac:	20001300 	.word	0x20001300

080080b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080b6:	4b28      	ldr	r3, [pc, #160]	@ (8008158 <vTaskSwitchContext+0xa8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080be:	4b27      	ldr	r3, [pc, #156]	@ (800815c <vTaskSwitchContext+0xac>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080c4:	e042      	b.n	800814c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80080c6:	4b25      	ldr	r3, [pc, #148]	@ (800815c <vTaskSwitchContext+0xac>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080cc:	4b24      	ldr	r3, [pc, #144]	@ (8008160 <vTaskSwitchContext+0xb0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e011      	b.n	80080f8 <vTaskSwitchContext+0x48>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	607b      	str	r3, [r7, #4]
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	e7fd      	b.n	80080ee <vTaskSwitchContext+0x3e>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	491a      	ldr	r1, [pc, #104]	@ (8008164 <vTaskSwitchContext+0xb4>)
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0e3      	beq.n	80080d4 <vTaskSwitchContext+0x24>
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4a13      	ldr	r2, [pc, #76]	@ (8008164 <vTaskSwitchContext+0xb4>)
 8008118:	4413      	add	r3, r2
 800811a:	60bb      	str	r3, [r7, #8]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3308      	adds	r3, #8
 800812e:	429a      	cmp	r2, r3
 8008130:	d104      	bne.n	800813c <vTaskSwitchContext+0x8c>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	4a09      	ldr	r2, [pc, #36]	@ (8008168 <vTaskSwitchContext+0xb8>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	4a06      	ldr	r2, [pc, #24]	@ (8008160 <vTaskSwitchContext+0xb0>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6013      	str	r3, [r2, #0]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	20001318 	.word	0x20001318
 800815c:	20001304 	.word	0x20001304
 8008160:	200012f8 	.word	0x200012f8
 8008164:	20000e20 	.word	0x20000e20
 8008168:	20000e1c 	.word	0x20000e1c

0800816c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	e7fd      	b.n	8008190 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008194:	4b07      	ldr	r3, [pc, #28]	@ (80081b4 <vTaskPlaceOnEventList+0x48>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3318      	adds	r3, #24
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fe fcdc 	bl	8006b5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081a2:	2101      	movs	r1, #1
 80081a4:	6838      	ldr	r0, [r7, #0]
 80081a6:	f000 fb91 	bl	80088cc <prvAddCurrentTaskToDelayedList>
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000e1c 	.word	0x20000e1c

080081b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	617b      	str	r3, [r7, #20]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <vTaskPlaceOnEventListRestricted+0x54>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3318      	adds	r3, #24
 80081e8:	4619      	mov	r1, r3
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7fe fc91 	bl	8006b12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
 80081fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	68b8      	ldr	r0, [r7, #8]
 8008200:	f000 fb64 	bl	80088cc <prvAddCurrentTaskToDelayedList>
	}
 8008204:	bf00      	nop
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20000e1c 	.word	0x20000e1c

08008210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10b      	bne.n	800823e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60fb      	str	r3, [r7, #12]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3318      	adds	r3, #24
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe fcc2 	bl	8006bcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008248:	4b1d      	ldr	r3, [pc, #116]	@ (80082c0 <xTaskRemoveFromEventList+0xb0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11d      	bne.n	800828c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fcb9 	bl	8006bcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800825e:	4b19      	ldr	r3, [pc, #100]	@ (80082c4 <xTaskRemoveFromEventList+0xb4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d903      	bls.n	800826e <xTaskRemoveFromEventList+0x5e>
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826a:	4a16      	ldr	r2, [pc, #88]	@ (80082c4 <xTaskRemoveFromEventList+0xb4>)
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4a13      	ldr	r2, [pc, #76]	@ (80082c8 <xTaskRemoveFromEventList+0xb8>)
 800827c:	441a      	add	r2, r3
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	3304      	adds	r3, #4
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f7fe fc44 	bl	8006b12 <vListInsertEnd>
 800828a:	e005      	b.n	8008298 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	3318      	adds	r3, #24
 8008290:	4619      	mov	r1, r3
 8008292:	480e      	ldr	r0, [pc, #56]	@ (80082cc <xTaskRemoveFromEventList+0xbc>)
 8008294:	f7fe fc3d 	bl	8006b12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829c:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <xTaskRemoveFromEventList+0xc0>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d905      	bls.n	80082b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082a6:	2301      	movs	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082aa:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <xTaskRemoveFromEventList+0xc4>)
 80082ac:	2201      	movs	r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e001      	b.n	80082b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082b6:	697b      	ldr	r3, [r7, #20]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20001318 	.word	0x20001318
 80082c4:	200012f8 	.word	0x200012f8
 80082c8:	20000e20 	.word	0x20000e20
 80082cc:	200012b0 	.word	0x200012b0
 80082d0:	20000e1c 	.word	0x20000e1c
 80082d4:	20001304 	.word	0x20001304

080082d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082e0:	4b06      	ldr	r3, [pc, #24]	@ (80082fc <vTaskInternalSetTimeOutState+0x24>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082e8:	4b05      	ldr	r3, [pc, #20]	@ (8008300 <vTaskInternalSetTimeOutState+0x28>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	605a      	str	r2, [r3, #4]
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20001308 	.word	0x20001308
 8008300:	200012f4 	.word	0x200012f4

08008304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10b      	bne.n	800832c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	613b      	str	r3, [r7, #16]
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10b      	bne.n	800834a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	60fb      	str	r3, [r7, #12]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800834a:	f000 ff9d 	bl	8009288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800834e:	4b1d      	ldr	r3, [pc, #116]	@ (80083c4 <xTaskCheckForTimeOut+0xc0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d102      	bne.n	800836e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e023      	b.n	80083b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <xTaskCheckForTimeOut+0xc4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d007      	beq.n	800838a <xTaskCheckForTimeOut+0x86>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	429a      	cmp	r2, r3
 8008382:	d302      	bcc.n	800838a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	e015      	b.n	80083b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	429a      	cmp	r2, r3
 8008392:	d20b      	bcs.n	80083ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff ff99 	bl	80082d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	e004      	b.n	80083b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083b2:	2301      	movs	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083b6:	f000 ff99 	bl	80092ec <vPortExitCritical>

	return xReturn;
 80083ba:	69fb      	ldr	r3, [r7, #28]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	200012f4 	.word	0x200012f4
 80083c8:	20001308 	.word	0x20001308

080083cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083d0:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <vTaskMissedYield+0x14>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
}
 80083d6:	bf00      	nop
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20001304 	.word	0x20001304

080083e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083ec:	f000 f852 	bl	8008494 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083f0:	4b06      	ldr	r3, [pc, #24]	@ (800840c <prvIdleTask+0x28>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d9f9      	bls.n	80083ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80083f8:	4b05      	ldr	r3, [pc, #20]	@ (8008410 <prvIdleTask+0x2c>)
 80083fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008408:	e7f0      	b.n	80083ec <prvIdleTask+0x8>
 800840a:	bf00      	nop
 800840c:	20000e20 	.word	0x20000e20
 8008410:	e000ed04 	.word	0xe000ed04

08008414 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800841a:	2300      	movs	r3, #0
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	e00c      	b.n	800843a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4a12      	ldr	r2, [pc, #72]	@ (8008474 <prvInitialiseTaskLists+0x60>)
 800842c:	4413      	add	r3, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fb42 	bl	8006ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3301      	adds	r3, #1
 8008438:	607b      	str	r3, [r7, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b37      	cmp	r3, #55	@ 0x37
 800843e:	d9ef      	bls.n	8008420 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008440:	480d      	ldr	r0, [pc, #52]	@ (8008478 <prvInitialiseTaskLists+0x64>)
 8008442:	f7fe fb39 	bl	8006ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008446:	480d      	ldr	r0, [pc, #52]	@ (800847c <prvInitialiseTaskLists+0x68>)
 8008448:	f7fe fb36 	bl	8006ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800844c:	480c      	ldr	r0, [pc, #48]	@ (8008480 <prvInitialiseTaskLists+0x6c>)
 800844e:	f7fe fb33 	bl	8006ab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008452:	480c      	ldr	r0, [pc, #48]	@ (8008484 <prvInitialiseTaskLists+0x70>)
 8008454:	f7fe fb30 	bl	8006ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008458:	480b      	ldr	r0, [pc, #44]	@ (8008488 <prvInitialiseTaskLists+0x74>)
 800845a:	f7fe fb2d 	bl	8006ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800845e:	4b0b      	ldr	r3, [pc, #44]	@ (800848c <prvInitialiseTaskLists+0x78>)
 8008460:	4a05      	ldr	r2, [pc, #20]	@ (8008478 <prvInitialiseTaskLists+0x64>)
 8008462:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008464:	4b0a      	ldr	r3, [pc, #40]	@ (8008490 <prvInitialiseTaskLists+0x7c>)
 8008466:	4a05      	ldr	r2, [pc, #20]	@ (800847c <prvInitialiseTaskLists+0x68>)
 8008468:	601a      	str	r2, [r3, #0]
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000e20 	.word	0x20000e20
 8008478:	20001280 	.word	0x20001280
 800847c:	20001294 	.word	0x20001294
 8008480:	200012b0 	.word	0x200012b0
 8008484:	200012c4 	.word	0x200012c4
 8008488:	200012dc 	.word	0x200012dc
 800848c:	200012a8 	.word	0x200012a8
 8008490:	200012ac 	.word	0x200012ac

08008494 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800849a:	e019      	b.n	80084d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800849c:	f000 fef4 	bl	8009288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a0:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <prvCheckTasksWaitingTermination+0x50>)
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe fb8d 	bl	8006bcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084b2:	4b0d      	ldr	r3, [pc, #52]	@ (80084e8 <prvCheckTasksWaitingTermination+0x54>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	4a0b      	ldr	r2, [pc, #44]	@ (80084e8 <prvCheckTasksWaitingTermination+0x54>)
 80084ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084bc:	4b0b      	ldr	r3, [pc, #44]	@ (80084ec <prvCheckTasksWaitingTermination+0x58>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	4a0a      	ldr	r2, [pc, #40]	@ (80084ec <prvCheckTasksWaitingTermination+0x58>)
 80084c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084c6:	f000 ff11 	bl	80092ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f810 	bl	80084f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084d0:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <prvCheckTasksWaitingTermination+0x58>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e1      	bne.n	800849c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200012c4 	.word	0x200012c4
 80084e8:	200012f0 	.word	0x200012f0
 80084ec:	200012d8 	.word	0x200012d8

080084f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d108      	bne.n	8008514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	4618      	mov	r0, r3
 8008508:	f001 f8ae 	bl	8009668 <vPortFree>
				vPortFree( pxTCB );
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 f8ab 	bl	8009668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008512:	e019      	b.n	8008548 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800851a:	2b01      	cmp	r3, #1
 800851c:	d103      	bne.n	8008526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 f8a2 	bl	8009668 <vPortFree>
	}
 8008524:	e010      	b.n	8008548 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800852c:	2b02      	cmp	r3, #2
 800852e:	d00b      	beq.n	8008548 <prvDeleteTCB+0x58>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <prvDeleteTCB+0x54>
	}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008556:	4b0c      	ldr	r3, [pc, #48]	@ (8008588 <prvResetNextTaskUnblockTime+0x38>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008560:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <prvResetNextTaskUnblockTime+0x3c>)
 8008562:	f04f 32ff 	mov.w	r2, #4294967295
 8008566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008568:	e008      	b.n	800857c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856a:	4b07      	ldr	r3, [pc, #28]	@ (8008588 <prvResetNextTaskUnblockTime+0x38>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4a04      	ldr	r2, [pc, #16]	@ (800858c <prvResetNextTaskUnblockTime+0x3c>)
 800857a:	6013      	str	r3, [r2, #0]
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	200012a8 	.word	0x200012a8
 800858c:	20001310 	.word	0x20001310

08008590 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008596:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <xTaskGetCurrentTaskHandle+0x1c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800859c:	687b      	ldr	r3, [r7, #4]
	}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000e1c 	.word	0x20000e1c

080085b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085b6:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <xTaskGetSchedulerState+0x34>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085be:	2301      	movs	r3, #1
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e008      	b.n	80085d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c4:	4b08      	ldr	r3, [pc, #32]	@ (80085e8 <xTaskGetSchedulerState+0x38>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085cc:	2302      	movs	r3, #2
 80085ce:	607b      	str	r3, [r7, #4]
 80085d0:	e001      	b.n	80085d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085d2:	2300      	movs	r3, #0
 80085d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085d6:	687b      	ldr	r3, [r7, #4]
	}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	200012fc 	.word	0x200012fc
 80085e8:	20001318 	.word	0x20001318

080085ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d051      	beq.n	80086a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4b2a      	ldr	r3, [pc, #168]	@ (80086b0 <xTaskPriorityInherit+0xc4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d241      	bcs.n	8008694 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	db06      	blt.n	8008626 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008618:	4b25      	ldr	r3, [pc, #148]	@ (80086b0 <xTaskPriorityInherit+0xc4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6959      	ldr	r1, [r3, #20]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4a1f      	ldr	r2, [pc, #124]	@ (80086b4 <xTaskPriorityInherit+0xc8>)
 8008638:	4413      	add	r3, r2
 800863a:	4299      	cmp	r1, r3
 800863c:	d122      	bne.n	8008684 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fac2 	bl	8006bcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008648:	4b19      	ldr	r3, [pc, #100]	@ (80086b0 <xTaskPriorityInherit+0xc4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008656:	4b18      	ldr	r3, [pc, #96]	@ (80086b8 <xTaskPriorityInherit+0xcc>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d903      	bls.n	8008666 <xTaskPriorityInherit+0x7a>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008662:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <xTaskPriorityInherit+0xcc>)
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4a10      	ldr	r2, [pc, #64]	@ (80086b4 <xTaskPriorityInherit+0xc8>)
 8008674:	441a      	add	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7fe fa48 	bl	8006b12 <vListInsertEnd>
 8008682:	e004      	b.n	800868e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008684:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <xTaskPriorityInherit+0xc4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800868e:	2301      	movs	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e008      	b.n	80086a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008698:	4b05      	ldr	r3, [pc, #20]	@ (80086b0 <xTaskPriorityInherit+0xc4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869e:	429a      	cmp	r2, r3
 80086a0:	d201      	bcs.n	80086a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086a2:	2301      	movs	r3, #1
 80086a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086a6:	68fb      	ldr	r3, [r7, #12]
	}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000e1c 	.word	0x20000e1c
 80086b4:	20000e20 	.word	0x20000e20
 80086b8:	200012f8 	.word	0x200012f8

080086bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d058      	beq.n	8008784 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008790 <xTaskPriorityDisinherit+0xd4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d00b      	beq.n	80086f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10b      	bne.n	8008714 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	60bb      	str	r3, [r7, #8]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008718:	1e5a      	subs	r2, r3, #1
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008726:	429a      	cmp	r2, r3
 8008728:	d02c      	beq.n	8008784 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800872e:	2b00      	cmp	r3, #0
 8008730:	d128      	bne.n	8008784 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fa48 	bl	8006bcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	4b0f      	ldr	r3, [pc, #60]	@ (8008794 <xTaskPriorityDisinherit+0xd8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d903      	bls.n	8008764 <xTaskPriorityDisinherit+0xa8>
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008760:	4a0c      	ldr	r2, [pc, #48]	@ (8008794 <xTaskPriorityDisinherit+0xd8>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a09      	ldr	r2, [pc, #36]	@ (8008798 <xTaskPriorityDisinherit+0xdc>)
 8008772:	441a      	add	r2, r3
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe f9c9 	bl	8006b12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008784:	697b      	ldr	r3, [r7, #20]
	}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000e1c 	.word	0x20000e1c
 8008794:	200012f8 	.word	0x200012f8
 8008798:	20000e20 	.word	0x20000e20

0800879c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d06c      	beq.n	800888e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10b      	bne.n	80087d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60fb      	str	r3, [r7, #12]
}
 80087ce:	bf00      	nop
 80087d0:	bf00      	nop
 80087d2:	e7fd      	b.n	80087d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d902      	bls.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e002      	b.n	80087ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d04c      	beq.n	800888e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d147      	bne.n	800888e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087fe:	4b26      	ldr	r3, [pc, #152]	@ (8008898 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d10b      	bne.n	8008820 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	60bb      	str	r3, [r7, #8]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008824:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	69fa      	ldr	r2, [r7, #28]
 800882a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	db04      	blt.n	800883e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	6959      	ldr	r1, [r3, #20]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a13      	ldr	r2, [pc, #76]	@ (800889c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800884e:	4413      	add	r3, r2
 8008850:	4299      	cmp	r1, r3
 8008852:	d11c      	bne.n	800888e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe f9b7 	bl	8006bcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008862:	4b0f      	ldr	r3, [pc, #60]	@ (80088a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d903      	bls.n	8008872 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	4a0c      	ldr	r2, [pc, #48]	@ (80088a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4a07      	ldr	r2, [pc, #28]	@ (800889c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008880:	441a      	add	r2, r3
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fe f942 	bl	8006b12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800888e:	bf00      	nop
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000e1c 	.word	0x20000e1c
 800889c:	20000e20 	.word	0x20000e20
 80088a0:	200012f8 	.word	0x200012f8

080088a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088a8:	4b07      	ldr	r3, [pc, #28]	@ (80088c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088b0:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088b6:	3201      	adds	r2, #1
 80088b8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80088ba:	4b03      	ldr	r3, [pc, #12]	@ (80088c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80088bc:	681b      	ldr	r3, [r3, #0]
	}
 80088be:	4618      	mov	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	20000e1c 	.word	0x20000e1c

080088cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088d6:	4b21      	ldr	r3, [pc, #132]	@ (800895c <prvAddCurrentTaskToDelayedList+0x90>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088dc:	4b20      	ldr	r3, [pc, #128]	@ (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe f972 	bl	8006bcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d10a      	bne.n	8008906 <prvAddCurrentTaskToDelayedList+0x3a>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4819      	ldr	r0, [pc, #100]	@ (8008964 <prvAddCurrentTaskToDelayedList+0x98>)
 8008900:	f7fe f907 	bl	8006b12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008904:	e026      	b.n	8008954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800890e:	4b14      	ldr	r3, [pc, #80]	@ (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	429a      	cmp	r2, r3
 800891c:	d209      	bcs.n	8008932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800891e:	4b12      	ldr	r3, [pc, #72]	@ (8008968 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4b0f      	ldr	r3, [pc, #60]	@ (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe f915 	bl	8006b5a <vListInsert>
}
 8008930:	e010      	b.n	8008954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008932:	4b0e      	ldr	r3, [pc, #56]	@ (800896c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7fe f90b 	bl	8006b5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008944:	4b0a      	ldr	r3, [pc, #40]	@ (8008970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d202      	bcs.n	8008954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800894e:	4a08      	ldr	r2, [pc, #32]	@ (8008970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6013      	str	r3, [r2, #0]
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	200012f4 	.word	0x200012f4
 8008960:	20000e1c 	.word	0x20000e1c
 8008964:	200012dc 	.word	0x200012dc
 8008968:	200012ac 	.word	0x200012ac
 800896c:	200012a8 	.word	0x200012a8
 8008970:	20001310 	.word	0x20001310

08008974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	@ 0x28
 8008978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800897e:	f000 fb13 	bl	8008fa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008982:	4b1d      	ldr	r3, [pc, #116]	@ (80089f8 <xTimerCreateTimerTask+0x84>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d021      	beq.n	80089ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008992:	1d3a      	adds	r2, r7, #4
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	f107 030c 	add.w	r3, r7, #12
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe f871 	bl	8006a84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	9202      	str	r2, [sp, #8]
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	2302      	movs	r3, #2
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	460a      	mov	r2, r1
 80089b4:	4911      	ldr	r1, [pc, #68]	@ (80089fc <xTimerCreateTimerTask+0x88>)
 80089b6:	4812      	ldr	r0, [pc, #72]	@ (8008a00 <xTimerCreateTimerTask+0x8c>)
 80089b8:	f7fe ffc0 	bl	800793c <xTaskCreateStatic>
 80089bc:	4603      	mov	r3, r0
 80089be:	4a11      	ldr	r2, [pc, #68]	@ (8008a04 <xTimerCreateTimerTask+0x90>)
 80089c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089c2:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <xTimerCreateTimerTask+0x90>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089ca:	2301      	movs	r3, #1
 80089cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	613b      	str	r3, [r7, #16]
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089ec:	697b      	ldr	r3, [r7, #20]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	2000134c 	.word	0x2000134c
 80089fc:	0800aa08 	.word	0x0800aa08
 8008a00:	08008b41 	.word	0x08008b41
 8008a04:	20001350 	.word	0x20001350

08008a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	@ 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	623b      	str	r3, [r7, #32]
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a38:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <xTimerGenericCommand+0x98>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d02a      	beq.n	8008a96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	dc18      	bgt.n	8008a84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a52:	f7ff fdad 	bl	80085b0 <xTaskGetSchedulerState>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d109      	bne.n	8008a70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a5c:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <xTimerGenericCommand+0x98>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	f107 0110 	add.w	r1, r7, #16
 8008a64:	2300      	movs	r3, #0
 8008a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a68:	f7fe fa50 	bl	8006f0c <xQueueGenericSend>
 8008a6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a6e:	e012      	b.n	8008a96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a70:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <xTimerGenericCommand+0x98>)
 8008a72:	6818      	ldr	r0, [r3, #0]
 8008a74:	f107 0110 	add.w	r1, r7, #16
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f7fe fa46 	bl	8006f0c <xQueueGenericSend>
 8008a80:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a82:	e008      	b.n	8008a96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a84:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <xTimerGenericCommand+0x98>)
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	f107 0110 	add.w	r1, r7, #16
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	f7fe fb3e 	bl	8007110 <xQueueGenericSendFromISR>
 8008a94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3728      	adds	r7, #40	@ 0x28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	2000134c 	.word	0x2000134c

08008aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aae:	4b23      	ldr	r3, [pc, #140]	@ (8008b3c <prvProcessExpiredTimer+0x98>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe f885 	bl	8006bcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d023      	beq.n	8008b18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	18d1      	adds	r1, r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	6978      	ldr	r0, [r7, #20]
 8008ade:	f000 f8d5 	bl	8008c8c <prvInsertTimerInActiveList>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d020      	beq.n	8008b2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	2300      	movs	r3, #0
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	2100      	movs	r1, #0
 8008af2:	6978      	ldr	r0, [r7, #20]
 8008af4:	f7ff ff88 	bl	8008a08 <xTimerGenericCommand>
 8008af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d114      	bne.n	8008b2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60fb      	str	r3, [r7, #12]
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	e7fd      	b.n	8008b14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	6978      	ldr	r0, [r7, #20]
 8008b30:	4798      	blx	r3
}
 8008b32:	bf00      	nop
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20001344 	.word	0x20001344

08008b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f859 	bl	8008c04 <prvGetNextExpireTime>
 8008b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4619      	mov	r1, r3
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f805 	bl	8008b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b5e:	f000 f8d7 	bl	8008d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b62:	bf00      	nop
 8008b64:	e7f0      	b.n	8008b48 <prvTimerTask+0x8>
	...

08008b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b72:	f7ff f927 	bl	8007dc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b76:	f107 0308 	add.w	r3, r7, #8
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f866 	bl	8008c4c <prvSampleTimeNow>
 8008b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d130      	bne.n	8008bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <prvProcessTimerOrBlockTask+0x3c>
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d806      	bhi.n	8008ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b96:	f7ff f923 	bl	8007de0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff ff81 	bl	8008aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ba2:	e024      	b.n	8008bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d008      	beq.n	8008bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008baa:	4b13      	ldr	r3, [pc, #76]	@ (8008bf8 <prvProcessTimerOrBlockTask+0x90>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <prvProcessTimerOrBlockTask+0x50>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e000      	b.n	8008bba <prvProcessTimerOrBlockTask+0x52>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008bfc <prvProcessTimerOrBlockTask+0x94>)
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7fe fe83 	bl	80078d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bce:	f7ff f907 	bl	8007de0 <xTaskResumeAll>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008bd8:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <prvProcessTimerOrBlockTask+0x98>)
 8008bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	f3bf 8f6f 	isb	sy
}
 8008be8:	e001      	b.n	8008bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bea:	f7ff f8f9 	bl	8007de0 <xTaskResumeAll>
}
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20001348 	.word	0x20001348
 8008bfc:	2000134c 	.word	0x2000134c
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <prvGetNextExpireTime+0x44>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <prvGetNextExpireTime+0x16>
 8008c16:	2201      	movs	r2, #1
 8008c18:	e000      	b.n	8008c1c <prvGetNextExpireTime+0x18>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c28:	4b07      	ldr	r3, [pc, #28]	@ (8008c48 <prvGetNextExpireTime+0x44>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	e001      	b.n	8008c38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c38:	68fb      	ldr	r3, [r7, #12]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20001344 	.word	0x20001344

08008c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c54:	f7ff f962 	bl	8007f1c <xTaskGetTickCount>
 8008c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c88 <prvSampleTimeNow+0x3c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d205      	bcs.n	8008c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c64:	f000 f93a 	bl	8008edc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c76:	4a04      	ldr	r2, [pc, #16]	@ (8008c88 <prvSampleTimeNow+0x3c>)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20001354 	.word	0x20001354

08008c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d812      	bhi.n	8008cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d302      	bcc.n	8008cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e01b      	b.n	8008cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cc6:	4b10      	ldr	r3, [pc, #64]	@ (8008d08 <prvInsertTimerInActiveList+0x7c>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f7fd ff42 	bl	8006b5a <vListInsert>
 8008cd6:	e012      	b.n	8008cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d206      	bcs.n	8008cee <prvInsertTimerInActiveList+0x62>
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d302      	bcc.n	8008cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e007      	b.n	8008cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cee:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <prvInsertTimerInActiveList+0x80>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	f7fd ff2e 	bl	8006b5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cfe:	697b      	ldr	r3, [r7, #20]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20001348 	.word	0x20001348
 8008d0c:	20001344 	.word	0x20001344

08008d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08e      	sub	sp, #56	@ 0x38
 8008d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d16:	e0ce      	b.n	8008eb6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da19      	bge.n	8008d52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	3304      	adds	r3, #4
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	61fb      	str	r3, [r7, #28]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d48:	6850      	ldr	r0, [r2, #4]
 8008d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d4c:	6892      	ldr	r2, [r2, #8]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f2c0 80ae 	blt.w	8008eb6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d004      	beq.n	8008d70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fd ff2e 	bl	8006bcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d70:	463b      	mov	r3, r7
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff ff6a 	bl	8008c4c <prvSampleTimeNow>
 8008d78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	f200 8097 	bhi.w	8008eb0 <prvProcessReceivedCommands+0x1a0>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <prvProcessReceivedCommands+0x78>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008db1 	.word	0x08008db1
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db1 	.word	0x08008db1
 8008d94:	08008e27 	.word	0x08008e27
 8008d98:	08008e3b 	.word	0x08008e3b
 8008d9c:	08008e87 	.word	0x08008e87
 8008da0:	08008db1 	.word	0x08008db1
 8008da4:	08008db1 	.word	0x08008db1
 8008da8:	08008e27 	.word	0x08008e27
 8008dac:	08008e3b 	.word	0x08008e3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008db6:	f043 0301 	orr.w	r3, r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	18d1      	adds	r1, r2, r3
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dd0:	f7ff ff5c 	bl	8008c8c <prvInsertTimerInActiveList>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d06c      	beq.n	8008eb4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008de0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d061      	beq.n	8008eb4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	441a      	add	r2, r3
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	2100      	movs	r1, #0
 8008e00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e02:	f7ff fe01 	bl	8008a08 <xTimerGenericCommand>
 8008e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d152      	bne.n	8008eb4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	61bb      	str	r3, [r7, #24]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e38:	e03d      	b.n	8008eb6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10b      	bne.n	8008e72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	617b      	str	r3, [r7, #20]
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	e7fd      	b.n	8008e6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	699a      	ldr	r2, [r3, #24]
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	18d1      	adds	r1, r2, r3
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e80:	f7ff ff04 	bl	8008c8c <prvInsertTimerInActiveList>
					break;
 8008e84:	e017      	b.n	8008eb6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d103      	bne.n	8008e9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e96:	f000 fbe7 	bl	8009668 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e9a:	e00c      	b.n	8008eb6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ea2:	f023 0301 	bic.w	r3, r3, #1
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008eae:	e002      	b.n	8008eb6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008eb0:	bf00      	nop
 8008eb2:	e000      	b.n	8008eb6 <prvProcessReceivedCommands+0x1a6>
					break;
 8008eb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eb6:	4b08      	ldr	r3, [pc, #32]	@ (8008ed8 <prvProcessReceivedCommands+0x1c8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	1d39      	adds	r1, r7, #4
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe f9c4 	bl	800724c <xQueueReceive>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f47f af26 	bne.w	8008d18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	3730      	adds	r7, #48	@ 0x30
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	2000134c 	.word	0x2000134c

08008edc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ee2:	e049      	b.n	8008f78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8008fa0 <prvSwitchTimerLists+0xc4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eee:	4b2c      	ldr	r3, [pc, #176]	@ (8008fa0 <prvSwitchTimerLists+0xc4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fd fe65 	bl	8006bcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d02f      	beq.n	8008f78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4413      	add	r3, r2
 8008f20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d90e      	bls.n	8008f48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f36:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa0 <prvSwitchTimerLists+0xc4>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7fd fe0a 	bl	8006b5a <vListInsert>
 8008f46:	e017      	b.n	8008f78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	2100      	movs	r1, #0
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7ff fd58 	bl	8008a08 <xTimerGenericCommand>
 8008f58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	603b      	str	r3, [r7, #0]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f78:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <prvSwitchTimerLists+0xc4>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1b0      	bne.n	8008ee4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f82:	4b07      	ldr	r3, [pc, #28]	@ (8008fa0 <prvSwitchTimerLists+0xc4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f88:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <prvSwitchTimerLists+0xc8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a04      	ldr	r2, [pc, #16]	@ (8008fa0 <prvSwitchTimerLists+0xc4>)
 8008f8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f90:	4a04      	ldr	r2, [pc, #16]	@ (8008fa4 <prvSwitchTimerLists+0xc8>)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	6013      	str	r3, [r2, #0]
}
 8008f96:	bf00      	nop
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001344 	.word	0x20001344
 8008fa4:	20001348 	.word	0x20001348

08008fa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fae:	f000 f96b 	bl	8009288 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fb2:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d120      	bne.n	8008ffc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fba:	4814      	ldr	r0, [pc, #80]	@ (800900c <prvCheckForValidListAndQueue+0x64>)
 8008fbc:	f7fd fd7c 	bl	8006ab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fc0:	4813      	ldr	r0, [pc, #76]	@ (8009010 <prvCheckForValidListAndQueue+0x68>)
 8008fc2:	f7fd fd79 	bl	8006ab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fc6:	4b13      	ldr	r3, [pc, #76]	@ (8009014 <prvCheckForValidListAndQueue+0x6c>)
 8008fc8:	4a10      	ldr	r2, [pc, #64]	@ (800900c <prvCheckForValidListAndQueue+0x64>)
 8008fca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fcc:	4b12      	ldr	r3, [pc, #72]	@ (8009018 <prvCheckForValidListAndQueue+0x70>)
 8008fce:	4a10      	ldr	r2, [pc, #64]	@ (8009010 <prvCheckForValidListAndQueue+0x68>)
 8008fd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4b11      	ldr	r3, [pc, #68]	@ (800901c <prvCheckForValidListAndQueue+0x74>)
 8008fd8:	4a11      	ldr	r2, [pc, #68]	@ (8009020 <prvCheckForValidListAndQueue+0x78>)
 8008fda:	2110      	movs	r1, #16
 8008fdc:	200a      	movs	r0, #10
 8008fde:	f7fd fe89 	bl	8006cf4 <xQueueGenericCreateStatic>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4a08      	ldr	r2, [pc, #32]	@ (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008fe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fe8:	4b07      	ldr	r3, [pc, #28]	@ (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ff0:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	490b      	ldr	r1, [pc, #44]	@ (8009024 <prvCheckForValidListAndQueue+0x7c>)
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fc42 	bl	8007880 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ffc:	f000 f976 	bl	80092ec <vPortExitCritical>
}
 8009000:	bf00      	nop
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	2000134c 	.word	0x2000134c
 800900c:	2000131c 	.word	0x2000131c
 8009010:	20001330 	.word	0x20001330
 8009014:	20001344 	.word	0x20001344
 8009018:	20001348 	.word	0x20001348
 800901c:	200013f8 	.word	0x200013f8
 8009020:	20001358 	.word	0x20001358
 8009024:	0800aa10 	.word	0x0800aa10

08009028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3b04      	subs	r3, #4
 8009038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3b04      	subs	r3, #4
 8009046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f023 0201 	bic.w	r2, r3, #1
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b04      	subs	r3, #4
 8009056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009058:	4a0c      	ldr	r2, [pc, #48]	@ (800908c <pxPortInitialiseStack+0x64>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3b14      	subs	r3, #20
 8009062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3b04      	subs	r3, #4
 800906e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f06f 0202 	mvn.w	r2, #2
 8009076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3b20      	subs	r3, #32
 800907c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800907e:	68fb      	ldr	r3, [r7, #12]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	08009091 	.word	0x08009091

08009090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800909a:	4b13      	ldr	r3, [pc, #76]	@ (80090e8 <prvTaskExitError+0x58>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d00b      	beq.n	80090bc <prvTaskExitError+0x2c>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	60fb      	str	r3, [r7, #12]
}
 80090b6:	bf00      	nop
 80090b8:	bf00      	nop
 80090ba:	e7fd      	b.n	80090b8 <prvTaskExitError+0x28>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	60bb      	str	r3, [r7, #8]
}
 80090ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090d0:	bf00      	nop
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0fc      	beq.n	80090d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000010 	.word	0x20000010
 80090ec:	00000000 	.word	0x00000000

080090f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090f0:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <pxCurrentTCBConst2>)
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	6808      	ldr	r0, [r1, #0]
 80090f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	f380 8809 	msr	PSP, r0
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f04f 0000 	mov.w	r0, #0
 8009106:	f380 8811 	msr	BASEPRI, r0
 800910a:	4770      	bx	lr
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst2>:
 8009110:	20000e1c 	.word	0x20000e1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009118:	4808      	ldr	r0, [pc, #32]	@ (800913c <prvPortStartFirstTask+0x24>)
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	6800      	ldr	r0, [r0, #0]
 800911e:	f380 8808 	msr	MSP, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8814 	msr	CONTROL, r0
 800912a:	b662      	cpsie	i
 800912c:	b661      	cpsie	f
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	df00      	svc	0
 8009138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800913a:	bf00      	nop
 800913c:	e000ed08 	.word	0xe000ed08

08009140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009146:	4b47      	ldr	r3, [pc, #284]	@ (8009264 <xPortStartScheduler+0x124>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a47      	ldr	r2, [pc, #284]	@ (8009268 <xPortStartScheduler+0x128>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d10b      	bne.n	8009168 <xPortStartScheduler+0x28>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60fb      	str	r3, [r7, #12]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009168:	4b3e      	ldr	r3, [pc, #248]	@ (8009264 <xPortStartScheduler+0x124>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a3f      	ldr	r2, [pc, #252]	@ (800926c <xPortStartScheduler+0x12c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d10b      	bne.n	800918a <xPortStartScheduler+0x4a>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	613b      	str	r3, [r7, #16]
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	e7fd      	b.n	8009186 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800918a:	4b39      	ldr	r3, [pc, #228]	@ (8009270 <xPortStartScheduler+0x130>)
 800918c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	22ff      	movs	r2, #255	@ 0xff
 800919a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b31      	ldr	r3, [pc, #196]	@ (8009274 <xPortStartScheduler+0x134>)
 80091b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091b2:	4b31      	ldr	r3, [pc, #196]	@ (8009278 <xPortStartScheduler+0x138>)
 80091b4:	2207      	movs	r2, #7
 80091b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091b8:	e009      	b.n	80091ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80091ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009278 <xPortStartScheduler+0x138>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3b01      	subs	r3, #1
 80091c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009278 <xPortStartScheduler+0x138>)
 80091c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d6:	2b80      	cmp	r3, #128	@ 0x80
 80091d8:	d0ef      	beq.n	80091ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091da:	4b27      	ldr	r3, [pc, #156]	@ (8009278 <xPortStartScheduler+0x138>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1c3 0307 	rsb	r3, r3, #7
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d00b      	beq.n	80091fe <xPortStartScheduler+0xbe>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60bb      	str	r3, [r7, #8]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009278 <xPortStartScheduler+0x138>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <xPortStartScheduler+0x138>)
 8009206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009208:	4b1b      	ldr	r3, [pc, #108]	@ (8009278 <xPortStartScheduler+0x138>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009210:	4a19      	ldr	r2, [pc, #100]	@ (8009278 <xPortStartScheduler+0x138>)
 8009212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	b2da      	uxtb	r2, r3
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800921c:	4b17      	ldr	r3, [pc, #92]	@ (800927c <xPortStartScheduler+0x13c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a16      	ldr	r2, [pc, #88]	@ (800927c <xPortStartScheduler+0x13c>)
 8009222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009228:	4b14      	ldr	r3, [pc, #80]	@ (800927c <xPortStartScheduler+0x13c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a13      	ldr	r2, [pc, #76]	@ (800927c <xPortStartScheduler+0x13c>)
 800922e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009234:	f000 f8da 	bl	80093ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009238:	4b11      	ldr	r3, [pc, #68]	@ (8009280 <xPortStartScheduler+0x140>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800923e:	f000 f8f9 	bl	8009434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009242:	4b10      	ldr	r3, [pc, #64]	@ (8009284 <xPortStartScheduler+0x144>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a0f      	ldr	r2, [pc, #60]	@ (8009284 <xPortStartScheduler+0x144>)
 8009248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800924c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800924e:	f7ff ff63 	bl	8009118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009252:	f7fe ff2d 	bl	80080b0 <vTaskSwitchContext>
	prvTaskExitError();
 8009256:	f7ff ff1b 	bl	8009090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	e000ed00 	.word	0xe000ed00
 8009268:	410fc271 	.word	0x410fc271
 800926c:	410fc270 	.word	0x410fc270
 8009270:	e000e400 	.word	0xe000e400
 8009274:	20001448 	.word	0x20001448
 8009278:	2000144c 	.word	0x2000144c
 800927c:	e000ed20 	.word	0xe000ed20
 8009280:	20000010 	.word	0x20000010
 8009284:	e000ef34 	.word	0xe000ef34

08009288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	607b      	str	r3, [r7, #4]
}
 80092a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <vPortEnterCritical+0x5c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3301      	adds	r3, #1
 80092a8:	4a0e      	ldr	r2, [pc, #56]	@ (80092e4 <vPortEnterCritical+0x5c>)
 80092aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092ac:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <vPortEnterCritical+0x5c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d110      	bne.n	80092d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092b4:	4b0c      	ldr	r3, [pc, #48]	@ (80092e8 <vPortEnterCritical+0x60>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	603b      	str	r3, [r7, #0]
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	e7fd      	b.n	80092d2 <vPortEnterCritical+0x4a>
	}
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20000010 	.word	0x20000010
 80092e8:	e000ed04 	.word	0xe000ed04

080092ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092f2:	4b12      	ldr	r3, [pc, #72]	@ (800933c <vPortExitCritical+0x50>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <vPortExitCritical+0x26>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	607b      	str	r3, [r7, #4]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009312:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <vPortExitCritical+0x50>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3b01      	subs	r3, #1
 8009318:	4a08      	ldr	r2, [pc, #32]	@ (800933c <vPortExitCritical+0x50>)
 800931a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800931c:	4b07      	ldr	r3, [pc, #28]	@ (800933c <vPortExitCritical+0x50>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <vPortExitCritical+0x44>
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
}
 800932e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20000010 	.word	0x20000010

08009340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009340:	f3ef 8009 	mrs	r0, PSP
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <pxCurrentTCBConst>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	f01e 0f10 	tst.w	lr, #16
 8009350:	bf08      	it	eq
 8009352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	6010      	str	r0, [r2, #0]
 800935c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009364:	f380 8811 	msr	BASEPRI, r0
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f7fe fe9e 	bl	80080b0 <vTaskSwitchContext>
 8009374:	f04f 0000 	mov.w	r0, #0
 8009378:	f380 8811 	msr	BASEPRI, r0
 800937c:	bc09      	pop	{r0, r3}
 800937e:	6819      	ldr	r1, [r3, #0]
 8009380:	6808      	ldr	r0, [r1, #0]
 8009382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009386:	f01e 0f10 	tst.w	lr, #16
 800938a:	bf08      	it	eq
 800938c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009390:	f380 8809 	msr	PSP, r0
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w

080093a0 <pxCurrentTCBConst>:
 80093a0:	20000e1c 	.word	0x20000e1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop

080093a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	607b      	str	r3, [r7, #4]
}
 80093c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093c2:	f7fe fdbb 	bl	8007f3c <xTaskIncrementTick>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093cc:	4b06      	ldr	r3, [pc, #24]	@ (80093e8 <xPortSysTickHandler+0x40>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f383 8811 	msr	BASEPRI, r3
}
 80093de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	e000ed04 	.word	0xe000ed04

080093ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009420 <vPortSetupTimerInterrupt+0x34>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <vPortSetupTimerInterrupt+0x38>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <vPortSetupTimerInterrupt+0x3c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0a      	ldr	r2, [pc, #40]	@ (800942c <vPortSetupTimerInterrupt+0x40>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	099b      	lsrs	r3, r3, #6
 8009408:	4a09      	ldr	r2, [pc, #36]	@ (8009430 <vPortSetupTimerInterrupt+0x44>)
 800940a:	3b01      	subs	r3, #1
 800940c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800940e:	4b04      	ldr	r3, [pc, #16]	@ (8009420 <vPortSetupTimerInterrupt+0x34>)
 8009410:	2207      	movs	r2, #7
 8009412:	601a      	str	r2, [r3, #0]
}
 8009414:	bf00      	nop
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	e000e010 	.word	0xe000e010
 8009424:	e000e018 	.word	0xe000e018
 8009428:	20000004 	.word	0x20000004
 800942c:	10624dd3 	.word	0x10624dd3
 8009430:	e000e014 	.word	0xe000e014

08009434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009444 <vPortEnableVFP+0x10>
 8009438:	6801      	ldr	r1, [r0, #0]
 800943a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800943e:	6001      	str	r1, [r0, #0]
 8009440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009442:	bf00      	nop
 8009444:	e000ed88 	.word	0xe000ed88

08009448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800944e:	f3ef 8305 	mrs	r3, IPSR
 8009452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b0f      	cmp	r3, #15
 8009458:	d915      	bls.n	8009486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800945a:	4a18      	ldr	r2, [pc, #96]	@ (80094bc <vPortValidateInterruptPriority+0x74>)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009464:	4b16      	ldr	r3, [pc, #88]	@ (80094c0 <vPortValidateInterruptPriority+0x78>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	7afa      	ldrb	r2, [r7, #11]
 800946a:	429a      	cmp	r2, r3
 800946c:	d20b      	bcs.n	8009486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009486:	4b0f      	ldr	r3, [pc, #60]	@ (80094c4 <vPortValidateInterruptPriority+0x7c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800948e:	4b0e      	ldr	r3, [pc, #56]	@ (80094c8 <vPortValidateInterruptPriority+0x80>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d90b      	bls.n	80094ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	603b      	str	r3, [r7, #0]
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <vPortValidateInterruptPriority+0x62>
	}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	e000e3f0 	.word	0xe000e3f0
 80094c0:	20001448 	.word	0x20001448
 80094c4:	e000ed0c 	.word	0xe000ed0c
 80094c8:	2000144c 	.word	0x2000144c

080094cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	@ 0x28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094d8:	f7fe fc74 	bl	8007dc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009650 <pvPortMalloc+0x184>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094e4:	f000 f924 	bl	8009730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009654 <pvPortMalloc+0x188>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4013      	ands	r3, r2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 8095 	bne.w	8009620 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01e      	beq.n	800953a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80094fc:	2208      	movs	r2, #8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4413      	add	r3, r2
 8009502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	2b00      	cmp	r3, #0
 800950c:	d015      	beq.n	800953a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f023 0307 	bic.w	r3, r3, #7
 8009514:	3308      	adds	r3, #8
 8009516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <pvPortMalloc+0x6e>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	617b      	str	r3, [r7, #20]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d06f      	beq.n	8009620 <pvPortMalloc+0x154>
 8009540:	4b45      	ldr	r3, [pc, #276]	@ (8009658 <pvPortMalloc+0x18c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d86a      	bhi.n	8009620 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800954a:	4b44      	ldr	r3, [pc, #272]	@ (800965c <pvPortMalloc+0x190>)
 800954c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800954e:	4b43      	ldr	r3, [pc, #268]	@ (800965c <pvPortMalloc+0x190>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009554:	e004      	b.n	8009560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800955a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d903      	bls.n	8009572 <pvPortMalloc+0xa6>
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f1      	bne.n	8009556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009572:	4b37      	ldr	r3, [pc, #220]	@ (8009650 <pvPortMalloc+0x184>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009578:	429a      	cmp	r2, r3
 800957a:	d051      	beq.n	8009620 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2208      	movs	r2, #8
 8009582:	4413      	add	r3, r2
 8009584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	1ad2      	subs	r2, r2, r3
 8009596:	2308      	movs	r3, #8
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	429a      	cmp	r2, r3
 800959c:	d920      	bls.n	80095e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800959e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4413      	add	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <pvPortMalloc+0xfc>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095da:	69b8      	ldr	r0, [r7, #24]
 80095dc:	f000 f90a 	bl	80097f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009658 <pvPortMalloc+0x18c>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009658 <pvPortMalloc+0x18c>)
 80095ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <pvPortMalloc+0x18c>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009660 <pvPortMalloc+0x194>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d203      	bcs.n	8009602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095fa:	4b17      	ldr	r3, [pc, #92]	@ (8009658 <pvPortMalloc+0x18c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a18      	ldr	r2, [pc, #96]	@ (8009660 <pvPortMalloc+0x194>)
 8009600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <pvPortMalloc+0x188>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	431a      	orrs	r2, r3
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009616:	4b13      	ldr	r3, [pc, #76]	@ (8009664 <pvPortMalloc+0x198>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	4a11      	ldr	r2, [pc, #68]	@ (8009664 <pvPortMalloc+0x198>)
 800961e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009620:	f7fe fbde 	bl	8007de0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <pvPortMalloc+0x17a>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	60fb      	str	r3, [r7, #12]
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	e7fd      	b.n	8009642 <pvPortMalloc+0x176>
	return pvReturn;
 8009646:	69fb      	ldr	r3, [r7, #28]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3728      	adds	r7, #40	@ 0x28
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20005058 	.word	0x20005058
 8009654:	2000506c 	.word	0x2000506c
 8009658:	2000505c 	.word	0x2000505c
 800965c:	20005050 	.word	0x20005050
 8009660:	20005060 	.word	0x20005060
 8009664:	20005064 	.word	0x20005064

08009668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d04f      	beq.n	800971a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800967a:	2308      	movs	r3, #8
 800967c:	425b      	negs	r3, r3
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4413      	add	r3, r2
 8009682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	4b25      	ldr	r3, [pc, #148]	@ (8009724 <vPortFree+0xbc>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4013      	ands	r3, r2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10b      	bne.n	80096ae <vPortFree+0x46>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	60fb      	str	r3, [r7, #12]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00b      	beq.n	80096ce <vPortFree+0x66>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	4b14      	ldr	r3, [pc, #80]	@ (8009724 <vPortFree+0xbc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4013      	ands	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01e      	beq.n	800971a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d11a      	bne.n	800971a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009724 <vPortFree+0xbc>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	43db      	mvns	r3, r3
 80096ee:	401a      	ands	r2, r3
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096f4:	f7fe fb66 	bl	8007dc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <vPortFree+0xc0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4413      	add	r3, r2
 8009702:	4a09      	ldr	r2, [pc, #36]	@ (8009728 <vPortFree+0xc0>)
 8009704:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f000 f874 	bl	80097f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800970c:	4b07      	ldr	r3, [pc, #28]	@ (800972c <vPortFree+0xc4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	4a06      	ldr	r2, [pc, #24]	@ (800972c <vPortFree+0xc4>)
 8009714:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009716:	f7fe fb63 	bl	8007de0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800971a:	bf00      	nop
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	2000506c 	.word	0x2000506c
 8009728:	2000505c 	.word	0x2000505c
 800972c:	20005068 	.word	0x20005068

08009730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009736:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800973a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800973c:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <prvHeapInit+0xac>)
 800973e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3307      	adds	r3, #7
 800974e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	4a1f      	ldr	r2, [pc, #124]	@ (80097dc <prvHeapInit+0xac>)
 8009760:	4413      	add	r3, r2
 8009762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009768:	4a1d      	ldr	r2, [pc, #116]	@ (80097e0 <prvHeapInit+0xb0>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800976e:	4b1c      	ldr	r3, [pc, #112]	@ (80097e0 <prvHeapInit+0xb0>)
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	4413      	add	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800977c:	2208      	movs	r2, #8
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4a15      	ldr	r2, [pc, #84]	@ (80097e4 <prvHeapInit+0xb4>)
 8009790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009792:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <prvHeapInit+0xb4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2200      	movs	r2, #0
 8009798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800979a:	4b12      	ldr	r3, [pc, #72]	@ (80097e4 <prvHeapInit+0xb4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097b0:	4b0c      	ldr	r3, [pc, #48]	@ (80097e4 <prvHeapInit+0xb4>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4a0a      	ldr	r2, [pc, #40]	@ (80097e8 <prvHeapInit+0xb8>)
 80097be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	4a09      	ldr	r2, [pc, #36]	@ (80097ec <prvHeapInit+0xbc>)
 80097c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097c8:	4b09      	ldr	r3, [pc, #36]	@ (80097f0 <prvHeapInit+0xc0>)
 80097ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80097ce:	601a      	str	r2, [r3, #0]
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20001450 	.word	0x20001450
 80097e0:	20005050 	.word	0x20005050
 80097e4:	20005058 	.word	0x20005058
 80097e8:	20005060 	.word	0x20005060
 80097ec:	2000505c 	.word	0x2000505c
 80097f0:	2000506c 	.word	0x2000506c

080097f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097fc:	4b28      	ldr	r3, [pc, #160]	@ (80098a0 <prvInsertBlockIntoFreeList+0xac>)
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	e002      	b.n	8009808 <prvInsertBlockIntoFreeList+0x14>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d8f7      	bhi.n	8009802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	4413      	add	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d108      	bne.n	8009836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	441a      	add	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	441a      	add	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d118      	bne.n	800987c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4b15      	ldr	r3, [pc, #84]	@ (80098a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d00d      	beq.n	8009872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	441a      	add	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	e008      	b.n	8009884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009872:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	e003      	b.n	8009884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	d002      	beq.n	8009892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20005050 	.word	0x20005050
 80098a4:	20005058 	.word	0x20005058

080098a8 <sbrk_aligned>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4e0f      	ldr	r6, [pc, #60]	@ (80098e8 <sbrk_aligned+0x40>)
 80098ac:	460c      	mov	r4, r1
 80098ae:	6831      	ldr	r1, [r6, #0]
 80098b0:	4605      	mov	r5, r0
 80098b2:	b911      	cbnz	r1, 80098ba <sbrk_aligned+0x12>
 80098b4:	f000 faec 	bl	8009e90 <_sbrk_r>
 80098b8:	6030      	str	r0, [r6, #0]
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 fae7 	bl	8009e90 <_sbrk_r>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d103      	bne.n	80098ce <sbrk_aligned+0x26>
 80098c6:	f04f 34ff 	mov.w	r4, #4294967295
 80098ca:	4620      	mov	r0, r4
 80098cc:	bd70      	pop	{r4, r5, r6, pc}
 80098ce:	1cc4      	adds	r4, r0, #3
 80098d0:	f024 0403 	bic.w	r4, r4, #3
 80098d4:	42a0      	cmp	r0, r4
 80098d6:	d0f8      	beq.n	80098ca <sbrk_aligned+0x22>
 80098d8:	1a21      	subs	r1, r4, r0
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 fad8 	bl	8009e90 <_sbrk_r>
 80098e0:	3001      	adds	r0, #1
 80098e2:	d1f2      	bne.n	80098ca <sbrk_aligned+0x22>
 80098e4:	e7ef      	b.n	80098c6 <sbrk_aligned+0x1e>
 80098e6:	bf00      	nop
 80098e8:	20005070 	.word	0x20005070

080098ec <_malloc_r>:
 80098ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f0:	1ccd      	adds	r5, r1, #3
 80098f2:	f025 0503 	bic.w	r5, r5, #3
 80098f6:	3508      	adds	r5, #8
 80098f8:	2d0c      	cmp	r5, #12
 80098fa:	bf38      	it	cc
 80098fc:	250c      	movcc	r5, #12
 80098fe:	2d00      	cmp	r5, #0
 8009900:	4606      	mov	r6, r0
 8009902:	db01      	blt.n	8009908 <_malloc_r+0x1c>
 8009904:	42a9      	cmp	r1, r5
 8009906:	d904      	bls.n	8009912 <_malloc_r+0x26>
 8009908:	230c      	movs	r3, #12
 800990a:	6033      	str	r3, [r6, #0]
 800990c:	2000      	movs	r0, #0
 800990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099e8 <_malloc_r+0xfc>
 8009916:	f000 f869 	bl	80099ec <__malloc_lock>
 800991a:	f8d8 3000 	ldr.w	r3, [r8]
 800991e:	461c      	mov	r4, r3
 8009920:	bb44      	cbnz	r4, 8009974 <_malloc_r+0x88>
 8009922:	4629      	mov	r1, r5
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff ffbf 	bl	80098a8 <sbrk_aligned>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	4604      	mov	r4, r0
 800992e:	d158      	bne.n	80099e2 <_malloc_r+0xf6>
 8009930:	f8d8 4000 	ldr.w	r4, [r8]
 8009934:	4627      	mov	r7, r4
 8009936:	2f00      	cmp	r7, #0
 8009938:	d143      	bne.n	80099c2 <_malloc_r+0xd6>
 800993a:	2c00      	cmp	r4, #0
 800993c:	d04b      	beq.n	80099d6 <_malloc_r+0xea>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	4639      	mov	r1, r7
 8009942:	4630      	mov	r0, r6
 8009944:	eb04 0903 	add.w	r9, r4, r3
 8009948:	f000 faa2 	bl	8009e90 <_sbrk_r>
 800994c:	4581      	cmp	r9, r0
 800994e:	d142      	bne.n	80099d6 <_malloc_r+0xea>
 8009950:	6821      	ldr	r1, [r4, #0]
 8009952:	1a6d      	subs	r5, r5, r1
 8009954:	4629      	mov	r1, r5
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ffa6 	bl	80098a8 <sbrk_aligned>
 800995c:	3001      	adds	r0, #1
 800995e:	d03a      	beq.n	80099d6 <_malloc_r+0xea>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	442b      	add	r3, r5
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	f8d8 3000 	ldr.w	r3, [r8]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	bb62      	cbnz	r2, 80099c8 <_malloc_r+0xdc>
 800996e:	f8c8 7000 	str.w	r7, [r8]
 8009972:	e00f      	b.n	8009994 <_malloc_r+0xa8>
 8009974:	6822      	ldr	r2, [r4, #0]
 8009976:	1b52      	subs	r2, r2, r5
 8009978:	d420      	bmi.n	80099bc <_malloc_r+0xd0>
 800997a:	2a0b      	cmp	r2, #11
 800997c:	d917      	bls.n	80099ae <_malloc_r+0xc2>
 800997e:	1961      	adds	r1, r4, r5
 8009980:	42a3      	cmp	r3, r4
 8009982:	6025      	str	r5, [r4, #0]
 8009984:	bf18      	it	ne
 8009986:	6059      	strne	r1, [r3, #4]
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	bf08      	it	eq
 800998c:	f8c8 1000 	streq.w	r1, [r8]
 8009990:	5162      	str	r2, [r4, r5]
 8009992:	604b      	str	r3, [r1, #4]
 8009994:	4630      	mov	r0, r6
 8009996:	f000 f82f 	bl	80099f8 <__malloc_unlock>
 800999a:	f104 000b 	add.w	r0, r4, #11
 800999e:	1d23      	adds	r3, r4, #4
 80099a0:	f020 0007 	bic.w	r0, r0, #7
 80099a4:	1ac2      	subs	r2, r0, r3
 80099a6:	bf1c      	itt	ne
 80099a8:	1a1b      	subne	r3, r3, r0
 80099aa:	50a3      	strne	r3, [r4, r2]
 80099ac:	e7af      	b.n	800990e <_malloc_r+0x22>
 80099ae:	6862      	ldr	r2, [r4, #4]
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	bf0c      	ite	eq
 80099b4:	f8c8 2000 	streq.w	r2, [r8]
 80099b8:	605a      	strne	r2, [r3, #4]
 80099ba:	e7eb      	b.n	8009994 <_malloc_r+0xa8>
 80099bc:	4623      	mov	r3, r4
 80099be:	6864      	ldr	r4, [r4, #4]
 80099c0:	e7ae      	b.n	8009920 <_malloc_r+0x34>
 80099c2:	463c      	mov	r4, r7
 80099c4:	687f      	ldr	r7, [r7, #4]
 80099c6:	e7b6      	b.n	8009936 <_malloc_r+0x4a>
 80099c8:	461a      	mov	r2, r3
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d1fb      	bne.n	80099c8 <_malloc_r+0xdc>
 80099d0:	2300      	movs	r3, #0
 80099d2:	6053      	str	r3, [r2, #4]
 80099d4:	e7de      	b.n	8009994 <_malloc_r+0xa8>
 80099d6:	230c      	movs	r3, #12
 80099d8:	6033      	str	r3, [r6, #0]
 80099da:	4630      	mov	r0, r6
 80099dc:	f000 f80c 	bl	80099f8 <__malloc_unlock>
 80099e0:	e794      	b.n	800990c <_malloc_r+0x20>
 80099e2:	6005      	str	r5, [r0, #0]
 80099e4:	e7d6      	b.n	8009994 <_malloc_r+0xa8>
 80099e6:	bf00      	nop
 80099e8:	20005074 	.word	0x20005074

080099ec <__malloc_lock>:
 80099ec:	4801      	ldr	r0, [pc, #4]	@ (80099f4 <__malloc_lock+0x8>)
 80099ee:	f000 ba9c 	b.w	8009f2a <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	200051b8 	.word	0x200051b8

080099f8 <__malloc_unlock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	@ (8009a00 <__malloc_unlock+0x8>)
 80099fa:	f000 ba97 	b.w	8009f2c <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	200051b8 	.word	0x200051b8

08009a04 <std>:
 8009a04:	2300      	movs	r3, #0
 8009a06:	b510      	push	{r4, lr}
 8009a08:	4604      	mov	r4, r0
 8009a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a12:	6083      	str	r3, [r0, #8]
 8009a14:	8181      	strh	r1, [r0, #12]
 8009a16:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a18:	81c2      	strh	r2, [r0, #14]
 8009a1a:	6183      	str	r3, [r0, #24]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	2208      	movs	r2, #8
 8009a20:	305c      	adds	r0, #92	@ 0x5c
 8009a22:	f000 f9f9 	bl	8009e18 <memset>
 8009a26:	4b0d      	ldr	r3, [pc, #52]	@ (8009a5c <std+0x58>)
 8009a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <std+0x5c>)
 8009a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a64 <std+0x60>)
 8009a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a32:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <std+0x64>)
 8009a34:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a36:	4b0d      	ldr	r3, [pc, #52]	@ (8009a6c <std+0x68>)
 8009a38:	6224      	str	r4, [r4, #32]
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d006      	beq.n	8009a4c <std+0x48>
 8009a3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a42:	4294      	cmp	r4, r2
 8009a44:	d002      	beq.n	8009a4c <std+0x48>
 8009a46:	33d0      	adds	r3, #208	@ 0xd0
 8009a48:	429c      	cmp	r4, r3
 8009a4a:	d105      	bne.n	8009a58 <std+0x54>
 8009a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a54:	f000 ba68 	b.w	8009f28 <__retarget_lock_init_recursive>
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	bf00      	nop
 8009a5c:	08009c69 	.word	0x08009c69
 8009a60:	08009c8b 	.word	0x08009c8b
 8009a64:	08009cc3 	.word	0x08009cc3
 8009a68:	08009ce7 	.word	0x08009ce7
 8009a6c:	20005078 	.word	0x20005078

08009a70 <stdio_exit_handler>:
 8009a70:	4a02      	ldr	r2, [pc, #8]	@ (8009a7c <stdio_exit_handler+0xc>)
 8009a72:	4903      	ldr	r1, [pc, #12]	@ (8009a80 <stdio_exit_handler+0x10>)
 8009a74:	4803      	ldr	r0, [pc, #12]	@ (8009a84 <stdio_exit_handler+0x14>)
 8009a76:	f000 b869 	b.w	8009b4c <_fwalk_sglue>
 8009a7a:	bf00      	nop
 8009a7c:	20000014 	.word	0x20000014
 8009a80:	0800a685 	.word	0x0800a685
 8009a84:	20000024 	.word	0x20000024

08009a88 <cleanup_stdio>:
 8009a88:	6841      	ldr	r1, [r0, #4]
 8009a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009abc <cleanup_stdio+0x34>)
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	4604      	mov	r4, r0
 8009a92:	d001      	beq.n	8009a98 <cleanup_stdio+0x10>
 8009a94:	f000 fdf6 	bl	800a684 <_fflush_r>
 8009a98:	68a1      	ldr	r1, [r4, #8]
 8009a9a:	4b09      	ldr	r3, [pc, #36]	@ (8009ac0 <cleanup_stdio+0x38>)
 8009a9c:	4299      	cmp	r1, r3
 8009a9e:	d002      	beq.n	8009aa6 <cleanup_stdio+0x1e>
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fdef 	bl	800a684 <_fflush_r>
 8009aa6:	68e1      	ldr	r1, [r4, #12]
 8009aa8:	4b06      	ldr	r3, [pc, #24]	@ (8009ac4 <cleanup_stdio+0x3c>)
 8009aaa:	4299      	cmp	r1, r3
 8009aac:	d004      	beq.n	8009ab8 <cleanup_stdio+0x30>
 8009aae:	4620      	mov	r0, r4
 8009ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab4:	f000 bde6 	b.w	800a684 <_fflush_r>
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	20005078 	.word	0x20005078
 8009ac0:	200050e0 	.word	0x200050e0
 8009ac4:	20005148 	.word	0x20005148

08009ac8 <global_stdio_init.part.0>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	4b0b      	ldr	r3, [pc, #44]	@ (8009af8 <global_stdio_init.part.0+0x30>)
 8009acc:	4c0b      	ldr	r4, [pc, #44]	@ (8009afc <global_stdio_init.part.0+0x34>)
 8009ace:	4a0c      	ldr	r2, [pc, #48]	@ (8009b00 <global_stdio_init.part.0+0x38>)
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2104      	movs	r1, #4
 8009ad8:	f7ff ff94 	bl	8009a04 <std>
 8009adc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	2109      	movs	r1, #9
 8009ae4:	f7ff ff8e 	bl	8009a04 <std>
 8009ae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009aec:	2202      	movs	r2, #2
 8009aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af2:	2112      	movs	r1, #18
 8009af4:	f7ff bf86 	b.w	8009a04 <std>
 8009af8:	200051b0 	.word	0x200051b0
 8009afc:	20005078 	.word	0x20005078
 8009b00:	08009a71 	.word	0x08009a71

08009b04 <__sfp_lock_acquire>:
 8009b04:	4801      	ldr	r0, [pc, #4]	@ (8009b0c <__sfp_lock_acquire+0x8>)
 8009b06:	f000 ba10 	b.w	8009f2a <__retarget_lock_acquire_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	200051b9 	.word	0x200051b9

08009b10 <__sfp_lock_release>:
 8009b10:	4801      	ldr	r0, [pc, #4]	@ (8009b18 <__sfp_lock_release+0x8>)
 8009b12:	f000 ba0b 	b.w	8009f2c <__retarget_lock_release_recursive>
 8009b16:	bf00      	nop
 8009b18:	200051b9 	.word	0x200051b9

08009b1c <__sinit>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4604      	mov	r4, r0
 8009b20:	f7ff fff0 	bl	8009b04 <__sfp_lock_acquire>
 8009b24:	6a23      	ldr	r3, [r4, #32]
 8009b26:	b11b      	cbz	r3, 8009b30 <__sinit+0x14>
 8009b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b2c:	f7ff bff0 	b.w	8009b10 <__sfp_lock_release>
 8009b30:	4b04      	ldr	r3, [pc, #16]	@ (8009b44 <__sinit+0x28>)
 8009b32:	6223      	str	r3, [r4, #32]
 8009b34:	4b04      	ldr	r3, [pc, #16]	@ (8009b48 <__sinit+0x2c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f5      	bne.n	8009b28 <__sinit+0xc>
 8009b3c:	f7ff ffc4 	bl	8009ac8 <global_stdio_init.part.0>
 8009b40:	e7f2      	b.n	8009b28 <__sinit+0xc>
 8009b42:	bf00      	nop
 8009b44:	08009a89 	.word	0x08009a89
 8009b48:	200051b0 	.word	0x200051b0

08009b4c <_fwalk_sglue>:
 8009b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b50:	4607      	mov	r7, r0
 8009b52:	4688      	mov	r8, r1
 8009b54:	4614      	mov	r4, r2
 8009b56:	2600      	movs	r6, #0
 8009b58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b5c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b60:	d505      	bpl.n	8009b6e <_fwalk_sglue+0x22>
 8009b62:	6824      	ldr	r4, [r4, #0]
 8009b64:	2c00      	cmp	r4, #0
 8009b66:	d1f7      	bne.n	8009b58 <_fwalk_sglue+0xc>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6e:	89ab      	ldrh	r3, [r5, #12]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d907      	bls.n	8009b84 <_fwalk_sglue+0x38>
 8009b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	d003      	beq.n	8009b84 <_fwalk_sglue+0x38>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4638      	mov	r0, r7
 8009b80:	47c0      	blx	r8
 8009b82:	4306      	orrs	r6, r0
 8009b84:	3568      	adds	r5, #104	@ 0x68
 8009b86:	e7e9      	b.n	8009b5c <_fwalk_sglue+0x10>

08009b88 <iprintf>:
 8009b88:	b40f      	push	{r0, r1, r2, r3}
 8009b8a:	b507      	push	{r0, r1, r2, lr}
 8009b8c:	4906      	ldr	r1, [pc, #24]	@ (8009ba8 <iprintf+0x20>)
 8009b8e:	ab04      	add	r3, sp, #16
 8009b90:	6808      	ldr	r0, [r1, #0]
 8009b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b96:	6881      	ldr	r1, [r0, #8]
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	f000 fa4b 	bl	800a034 <_vfiprintf_r>
 8009b9e:	b003      	add	sp, #12
 8009ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba4:	b004      	add	sp, #16
 8009ba6:	4770      	bx	lr
 8009ba8:	20000020 	.word	0x20000020

08009bac <_puts_r>:
 8009bac:	6a03      	ldr	r3, [r0, #32]
 8009bae:	b570      	push	{r4, r5, r6, lr}
 8009bb0:	6884      	ldr	r4, [r0, #8]
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	b90b      	cbnz	r3, 8009bbc <_puts_r+0x10>
 8009bb8:	f7ff ffb0 	bl	8009b1c <__sinit>
 8009bbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bbe:	07db      	lsls	r3, r3, #31
 8009bc0:	d405      	bmi.n	8009bce <_puts_r+0x22>
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	0598      	lsls	r0, r3, #22
 8009bc6:	d402      	bmi.n	8009bce <_puts_r+0x22>
 8009bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bca:	f000 f9ae 	bl	8009f2a <__retarget_lock_acquire_recursive>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	0719      	lsls	r1, r3, #28
 8009bd2:	d502      	bpl.n	8009bda <_puts_r+0x2e>
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d135      	bne.n	8009c46 <_puts_r+0x9a>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4628      	mov	r0, r5
 8009bde:	f000 f8c5 	bl	8009d6c <__swsetup_r>
 8009be2:	b380      	cbz	r0, 8009c46 <_puts_r+0x9a>
 8009be4:	f04f 35ff 	mov.w	r5, #4294967295
 8009be8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bea:	07da      	lsls	r2, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_puts_r+0x4e>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	059b      	lsls	r3, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_puts_r+0x4e>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf6:	f000 f999 	bl	8009f2c <__retarget_lock_release_recursive>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	da04      	bge.n	8009c0c <_puts_r+0x60>
 8009c02:	69a2      	ldr	r2, [r4, #24]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	dc17      	bgt.n	8009c38 <_puts_r+0x8c>
 8009c08:	290a      	cmp	r1, #10
 8009c0a:	d015      	beq.n	8009c38 <_puts_r+0x8c>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	6022      	str	r2, [r4, #0]
 8009c12:	7019      	strb	r1, [r3, #0]
 8009c14:	68a3      	ldr	r3, [r4, #8]
 8009c16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	d1ed      	bne.n	8009bfe <_puts_r+0x52>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da11      	bge.n	8009c4a <_puts_r+0x9e>
 8009c26:	4622      	mov	r2, r4
 8009c28:	210a      	movs	r1, #10
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 f85f 	bl	8009cee <__swbuf_r>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d0d7      	beq.n	8009be4 <_puts_r+0x38>
 8009c34:	250a      	movs	r5, #10
 8009c36:	e7d7      	b.n	8009be8 <_puts_r+0x3c>
 8009c38:	4622      	mov	r2, r4
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 f857 	bl	8009cee <__swbuf_r>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d1e7      	bne.n	8009c14 <_puts_r+0x68>
 8009c44:	e7ce      	b.n	8009be4 <_puts_r+0x38>
 8009c46:	3e01      	subs	r6, #1
 8009c48:	e7e4      	b.n	8009c14 <_puts_r+0x68>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	6022      	str	r2, [r4, #0]
 8009c50:	220a      	movs	r2, #10
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	e7ee      	b.n	8009c34 <_puts_r+0x88>
	...

08009c58 <puts>:
 8009c58:	4b02      	ldr	r3, [pc, #8]	@ (8009c64 <puts+0xc>)
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	6818      	ldr	r0, [r3, #0]
 8009c5e:	f7ff bfa5 	b.w	8009bac <_puts_r>
 8009c62:	bf00      	nop
 8009c64:	20000020 	.word	0x20000020

08009c68 <__sread>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c70:	f000 f8fc 	bl	8009e6c <_read_r>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	bfab      	itete	ge
 8009c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c7c:	181b      	addge	r3, r3, r0
 8009c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c82:	bfac      	ite	ge
 8009c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c86:	81a3      	strhlt	r3, [r4, #12]
 8009c88:	bd10      	pop	{r4, pc}

08009c8a <__swrite>:
 8009c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8e:	461f      	mov	r7, r3
 8009c90:	898b      	ldrh	r3, [r1, #12]
 8009c92:	05db      	lsls	r3, r3, #23
 8009c94:	4605      	mov	r5, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	4616      	mov	r6, r2
 8009c9a:	d505      	bpl.n	8009ca8 <__swrite+0x1e>
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f000 f8d0 	bl	8009e48 <_lseek_r>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cb2:	81a3      	strh	r3, [r4, #12]
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	4628      	mov	r0, r5
 8009cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	f000 b8f7 	b.w	8009eb0 <_write_r>

08009cc2 <__sseek>:
 8009cc2:	b510      	push	{r4, lr}
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cca:	f000 f8bd 	bl	8009e48 <_lseek_r>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	bf15      	itete	ne
 8009cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009cde:	81a3      	strheq	r3, [r4, #12]
 8009ce0:	bf18      	it	ne
 8009ce2:	81a3      	strhne	r3, [r4, #12]
 8009ce4:	bd10      	pop	{r4, pc}

08009ce6 <__sclose>:
 8009ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cea:	f000 b89d 	b.w	8009e28 <_close_r>

08009cee <__swbuf_r>:
 8009cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf0:	460e      	mov	r6, r1
 8009cf2:	4614      	mov	r4, r2
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	b118      	cbz	r0, 8009d00 <__swbuf_r+0x12>
 8009cf8:	6a03      	ldr	r3, [r0, #32]
 8009cfa:	b90b      	cbnz	r3, 8009d00 <__swbuf_r+0x12>
 8009cfc:	f7ff ff0e 	bl	8009b1c <__sinit>
 8009d00:	69a3      	ldr	r3, [r4, #24]
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	071a      	lsls	r2, r3, #28
 8009d08:	d501      	bpl.n	8009d0e <__swbuf_r+0x20>
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	b943      	cbnz	r3, 8009d20 <__swbuf_r+0x32>
 8009d0e:	4621      	mov	r1, r4
 8009d10:	4628      	mov	r0, r5
 8009d12:	f000 f82b 	bl	8009d6c <__swsetup_r>
 8009d16:	b118      	cbz	r0, 8009d20 <__swbuf_r+0x32>
 8009d18:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	6922      	ldr	r2, [r4, #16]
 8009d24:	1a98      	subs	r0, r3, r2
 8009d26:	6963      	ldr	r3, [r4, #20]
 8009d28:	b2f6      	uxtb	r6, r6
 8009d2a:	4283      	cmp	r3, r0
 8009d2c:	4637      	mov	r7, r6
 8009d2e:	dc05      	bgt.n	8009d3c <__swbuf_r+0x4e>
 8009d30:	4621      	mov	r1, r4
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 fca6 	bl	800a684 <_fflush_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1ed      	bne.n	8009d18 <__swbuf_r+0x2a>
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	6022      	str	r2, [r4, #0]
 8009d48:	701e      	strb	r6, [r3, #0]
 8009d4a:	6962      	ldr	r2, [r4, #20]
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d004      	beq.n	8009d5c <__swbuf_r+0x6e>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	07db      	lsls	r3, r3, #31
 8009d56:	d5e1      	bpl.n	8009d1c <__swbuf_r+0x2e>
 8009d58:	2e0a      	cmp	r6, #10
 8009d5a:	d1df      	bne.n	8009d1c <__swbuf_r+0x2e>
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 fc90 	bl	800a684 <_fflush_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d0d9      	beq.n	8009d1c <__swbuf_r+0x2e>
 8009d68:	e7d6      	b.n	8009d18 <__swbuf_r+0x2a>
	...

08009d6c <__swsetup_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4b29      	ldr	r3, [pc, #164]	@ (8009e14 <__swsetup_r+0xa8>)
 8009d70:	4605      	mov	r5, r0
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	460c      	mov	r4, r1
 8009d76:	b118      	cbz	r0, 8009d80 <__swsetup_r+0x14>
 8009d78:	6a03      	ldr	r3, [r0, #32]
 8009d7a:	b90b      	cbnz	r3, 8009d80 <__swsetup_r+0x14>
 8009d7c:	f7ff fece 	bl	8009b1c <__sinit>
 8009d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	d422      	bmi.n	8009dce <__swsetup_r+0x62>
 8009d88:	06da      	lsls	r2, r3, #27
 8009d8a:	d407      	bmi.n	8009d9c <__swsetup_r+0x30>
 8009d8c:	2209      	movs	r2, #9
 8009d8e:	602a      	str	r2, [r5, #0]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	e033      	b.n	8009e04 <__swsetup_r+0x98>
 8009d9c:	0758      	lsls	r0, r3, #29
 8009d9e:	d512      	bpl.n	8009dc6 <__swsetup_r+0x5a>
 8009da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009da2:	b141      	cbz	r1, 8009db6 <__swsetup_r+0x4a>
 8009da4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009da8:	4299      	cmp	r1, r3
 8009daa:	d002      	beq.n	8009db2 <__swsetup_r+0x46>
 8009dac:	4628      	mov	r0, r5
 8009dae:	f000 f8cd 	bl	8009f4c <_free_r>
 8009db2:	2300      	movs	r3, #0
 8009db4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f043 0308 	orr.w	r3, r3, #8
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	b94b      	cbnz	r3, 8009de6 <__swsetup_r+0x7a>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ddc:	d003      	beq.n	8009de6 <__swsetup_r+0x7a>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 fc9d 	bl	800a720 <__smakebuf_r>
 8009de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dea:	f013 0201 	ands.w	r2, r3, #1
 8009dee:	d00a      	beq.n	8009e06 <__swsetup_r+0x9a>
 8009df0:	2200      	movs	r2, #0
 8009df2:	60a2      	str	r2, [r4, #8]
 8009df4:	6962      	ldr	r2, [r4, #20]
 8009df6:	4252      	negs	r2, r2
 8009df8:	61a2      	str	r2, [r4, #24]
 8009dfa:	6922      	ldr	r2, [r4, #16]
 8009dfc:	b942      	cbnz	r2, 8009e10 <__swsetup_r+0xa4>
 8009dfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e02:	d1c5      	bne.n	8009d90 <__swsetup_r+0x24>
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	0799      	lsls	r1, r3, #30
 8009e08:	bf58      	it	pl
 8009e0a:	6962      	ldrpl	r2, [r4, #20]
 8009e0c:	60a2      	str	r2, [r4, #8]
 8009e0e:	e7f4      	b.n	8009dfa <__swsetup_r+0x8e>
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7f7      	b.n	8009e04 <__swsetup_r+0x98>
 8009e14:	20000020 	.word	0x20000020

08009e18 <memset>:
 8009e18:	4402      	add	r2, r0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d100      	bne.n	8009e22 <memset+0xa>
 8009e20:	4770      	bx	lr
 8009e22:	f803 1b01 	strb.w	r1, [r3], #1
 8009e26:	e7f9      	b.n	8009e1c <memset+0x4>

08009e28 <_close_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d06      	ldr	r5, [pc, #24]	@ (8009e44 <_close_r+0x1c>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f7f8 feb5 	bl	8002ba2 <_close>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_close_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_close_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	200051b4 	.word	0x200051b4

08009e48 <_lseek_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	@ (8009e68 <_lseek_r+0x20>)
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f8 feca 	bl	8002bf0 <_lseek>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_lseek_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_lseek_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	200051b4 	.word	0x200051b4

08009e6c <_read_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d07      	ldr	r5, [pc, #28]	@ (8009e8c <_read_r+0x20>)
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	4611      	mov	r1, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	602a      	str	r2, [r5, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f7f8 fe58 	bl	8002b30 <_read>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_read_r+0x1e>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_read_r+0x1e>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	200051b4 	.word	0x200051b4

08009e90 <_sbrk_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4d06      	ldr	r5, [pc, #24]	@ (8009eac <_sbrk_r+0x1c>)
 8009e94:	2300      	movs	r3, #0
 8009e96:	4604      	mov	r4, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	602b      	str	r3, [r5, #0]
 8009e9c:	f7f8 feb6 	bl	8002c0c <_sbrk>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_sbrk_r+0x1a>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_sbrk_r+0x1a>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	200051b4 	.word	0x200051b4

08009eb0 <_write_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d07      	ldr	r5, [pc, #28]	@ (8009ed0 <_write_r+0x20>)
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	4611      	mov	r1, r2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	602a      	str	r2, [r5, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f7f8 fe53 	bl	8002b6a <_write>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_write_r+0x1e>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_write_r+0x1e>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	200051b4 	.word	0x200051b4

08009ed4 <__errno>:
 8009ed4:	4b01      	ldr	r3, [pc, #4]	@ (8009edc <__errno+0x8>)
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000020 	.word	0x20000020

08009ee0 <__libc_init_array>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8009f18 <__libc_init_array+0x38>)
 8009ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8009f1c <__libc_init_array+0x3c>)
 8009ee6:	1b64      	subs	r4, r4, r5
 8009ee8:	10a4      	asrs	r4, r4, #2
 8009eea:	2600      	movs	r6, #0
 8009eec:	42a6      	cmp	r6, r4
 8009eee:	d109      	bne.n	8009f04 <__libc_init_array+0x24>
 8009ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8009f20 <__libc_init_array+0x40>)
 8009ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8009f24 <__libc_init_array+0x44>)
 8009ef4:	f000 fc72 	bl	800a7dc <_init>
 8009ef8:	1b64      	subs	r4, r4, r5
 8009efa:	10a4      	asrs	r4, r4, #2
 8009efc:	2600      	movs	r6, #0
 8009efe:	42a6      	cmp	r6, r4
 8009f00:	d105      	bne.n	8009f0e <__libc_init_array+0x2e>
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f08:	4798      	blx	r3
 8009f0a:	3601      	adds	r6, #1
 8009f0c:	e7ee      	b.n	8009eec <__libc_init_array+0xc>
 8009f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f12:	4798      	blx	r3
 8009f14:	3601      	adds	r6, #1
 8009f16:	e7f2      	b.n	8009efe <__libc_init_array+0x1e>
 8009f18:	0800aba0 	.word	0x0800aba0
 8009f1c:	0800aba0 	.word	0x0800aba0
 8009f20:	0800aba0 	.word	0x0800aba0
 8009f24:	0800aba4 	.word	0x0800aba4

08009f28 <__retarget_lock_init_recursive>:
 8009f28:	4770      	bx	lr

08009f2a <__retarget_lock_acquire_recursive>:
 8009f2a:	4770      	bx	lr

08009f2c <__retarget_lock_release_recursive>:
 8009f2c:	4770      	bx	lr

08009f2e <memcpy>:
 8009f2e:	440a      	add	r2, r1
 8009f30:	4291      	cmp	r1, r2
 8009f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f36:	d100      	bne.n	8009f3a <memcpy+0xc>
 8009f38:	4770      	bx	lr
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f44:	4291      	cmp	r1, r2
 8009f46:	d1f9      	bne.n	8009f3c <memcpy+0xe>
 8009f48:	bd10      	pop	{r4, pc}
	...

08009f4c <_free_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4605      	mov	r5, r0
 8009f50:	2900      	cmp	r1, #0
 8009f52:	d041      	beq.n	8009fd8 <_free_r+0x8c>
 8009f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f58:	1f0c      	subs	r4, r1, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bfb8      	it	lt
 8009f5e:	18e4      	addlt	r4, r4, r3
 8009f60:	f7ff fd44 	bl	80099ec <__malloc_lock>
 8009f64:	4a1d      	ldr	r2, [pc, #116]	@ (8009fdc <_free_r+0x90>)
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	b933      	cbnz	r3, 8009f78 <_free_r+0x2c>
 8009f6a:	6063      	str	r3, [r4, #4]
 8009f6c:	6014      	str	r4, [r2, #0]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f74:	f7ff bd40 	b.w	80099f8 <__malloc_unlock>
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	d908      	bls.n	8009f8e <_free_r+0x42>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	1821      	adds	r1, r4, r0
 8009f80:	428b      	cmp	r3, r1
 8009f82:	bf01      	itttt	eq
 8009f84:	6819      	ldreq	r1, [r3, #0]
 8009f86:	685b      	ldreq	r3, [r3, #4]
 8009f88:	1809      	addeq	r1, r1, r0
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	e7ed      	b.n	8009f6a <_free_r+0x1e>
 8009f8e:	461a      	mov	r2, r3
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	b10b      	cbz	r3, 8009f98 <_free_r+0x4c>
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d9fa      	bls.n	8009f8e <_free_r+0x42>
 8009f98:	6811      	ldr	r1, [r2, #0]
 8009f9a:	1850      	adds	r0, r2, r1
 8009f9c:	42a0      	cmp	r0, r4
 8009f9e:	d10b      	bne.n	8009fb8 <_free_r+0x6c>
 8009fa0:	6820      	ldr	r0, [r4, #0]
 8009fa2:	4401      	add	r1, r0
 8009fa4:	1850      	adds	r0, r2, r1
 8009fa6:	4283      	cmp	r3, r0
 8009fa8:	6011      	str	r1, [r2, #0]
 8009faa:	d1e0      	bne.n	8009f6e <_free_r+0x22>
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	6053      	str	r3, [r2, #4]
 8009fb2:	4408      	add	r0, r1
 8009fb4:	6010      	str	r0, [r2, #0]
 8009fb6:	e7da      	b.n	8009f6e <_free_r+0x22>
 8009fb8:	d902      	bls.n	8009fc0 <_free_r+0x74>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	602b      	str	r3, [r5, #0]
 8009fbe:	e7d6      	b.n	8009f6e <_free_r+0x22>
 8009fc0:	6820      	ldr	r0, [r4, #0]
 8009fc2:	1821      	adds	r1, r4, r0
 8009fc4:	428b      	cmp	r3, r1
 8009fc6:	bf04      	itt	eq
 8009fc8:	6819      	ldreq	r1, [r3, #0]
 8009fca:	685b      	ldreq	r3, [r3, #4]
 8009fcc:	6063      	str	r3, [r4, #4]
 8009fce:	bf04      	itt	eq
 8009fd0:	1809      	addeq	r1, r1, r0
 8009fd2:	6021      	streq	r1, [r4, #0]
 8009fd4:	6054      	str	r4, [r2, #4]
 8009fd6:	e7ca      	b.n	8009f6e <_free_r+0x22>
 8009fd8:	bd38      	pop	{r3, r4, r5, pc}
 8009fda:	bf00      	nop
 8009fdc:	20005074 	.word	0x20005074

08009fe0 <__sfputc_r>:
 8009fe0:	6893      	ldr	r3, [r2, #8]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	b410      	push	{r4}
 8009fe8:	6093      	str	r3, [r2, #8]
 8009fea:	da08      	bge.n	8009ffe <__sfputc_r+0x1e>
 8009fec:	6994      	ldr	r4, [r2, #24]
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	db01      	blt.n	8009ff6 <__sfputc_r+0x16>
 8009ff2:	290a      	cmp	r1, #10
 8009ff4:	d103      	bne.n	8009ffe <__sfputc_r+0x1e>
 8009ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ffa:	f7ff be78 	b.w	8009cee <__swbuf_r>
 8009ffe:	6813      	ldr	r3, [r2, #0]
 800a000:	1c58      	adds	r0, r3, #1
 800a002:	6010      	str	r0, [r2, #0]
 800a004:	7019      	strb	r1, [r3, #0]
 800a006:	4608      	mov	r0, r1
 800a008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <__sfputs_r>:
 800a00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a010:	4606      	mov	r6, r0
 800a012:	460f      	mov	r7, r1
 800a014:	4614      	mov	r4, r2
 800a016:	18d5      	adds	r5, r2, r3
 800a018:	42ac      	cmp	r4, r5
 800a01a:	d101      	bne.n	800a020 <__sfputs_r+0x12>
 800a01c:	2000      	movs	r0, #0
 800a01e:	e007      	b.n	800a030 <__sfputs_r+0x22>
 800a020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a024:	463a      	mov	r2, r7
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff ffda 	bl	8009fe0 <__sfputc_r>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d1f3      	bne.n	800a018 <__sfputs_r+0xa>
 800a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a034 <_vfiprintf_r>:
 800a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	460d      	mov	r5, r1
 800a03a:	b09d      	sub	sp, #116	@ 0x74
 800a03c:	4614      	mov	r4, r2
 800a03e:	4698      	mov	r8, r3
 800a040:	4606      	mov	r6, r0
 800a042:	b118      	cbz	r0, 800a04c <_vfiprintf_r+0x18>
 800a044:	6a03      	ldr	r3, [r0, #32]
 800a046:	b90b      	cbnz	r3, 800a04c <_vfiprintf_r+0x18>
 800a048:	f7ff fd68 	bl	8009b1c <__sinit>
 800a04c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a04e:	07d9      	lsls	r1, r3, #31
 800a050:	d405      	bmi.n	800a05e <_vfiprintf_r+0x2a>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	059a      	lsls	r2, r3, #22
 800a056:	d402      	bmi.n	800a05e <_vfiprintf_r+0x2a>
 800a058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a05a:	f7ff ff66 	bl	8009f2a <__retarget_lock_acquire_recursive>
 800a05e:	89ab      	ldrh	r3, [r5, #12]
 800a060:	071b      	lsls	r3, r3, #28
 800a062:	d501      	bpl.n	800a068 <_vfiprintf_r+0x34>
 800a064:	692b      	ldr	r3, [r5, #16]
 800a066:	b99b      	cbnz	r3, 800a090 <_vfiprintf_r+0x5c>
 800a068:	4629      	mov	r1, r5
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7ff fe7e 	bl	8009d6c <__swsetup_r>
 800a070:	b170      	cbz	r0, 800a090 <_vfiprintf_r+0x5c>
 800a072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a074:	07dc      	lsls	r4, r3, #31
 800a076:	d504      	bpl.n	800a082 <_vfiprintf_r+0x4e>
 800a078:	f04f 30ff 	mov.w	r0, #4294967295
 800a07c:	b01d      	add	sp, #116	@ 0x74
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	89ab      	ldrh	r3, [r5, #12]
 800a084:	0598      	lsls	r0, r3, #22
 800a086:	d4f7      	bmi.n	800a078 <_vfiprintf_r+0x44>
 800a088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a08a:	f7ff ff4f 	bl	8009f2c <__retarget_lock_release_recursive>
 800a08e:	e7f3      	b.n	800a078 <_vfiprintf_r+0x44>
 800a090:	2300      	movs	r3, #0
 800a092:	9309      	str	r3, [sp, #36]	@ 0x24
 800a094:	2320      	movs	r3, #32
 800a096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a09a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09e:	2330      	movs	r3, #48	@ 0x30
 800a0a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a250 <_vfiprintf_r+0x21c>
 800a0a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0a8:	f04f 0901 	mov.w	r9, #1
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	469a      	mov	sl, r3
 800a0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b4:	b10a      	cbz	r2, 800a0ba <_vfiprintf_r+0x86>
 800a0b6:	2a25      	cmp	r2, #37	@ 0x25
 800a0b8:	d1f9      	bne.n	800a0ae <_vfiprintf_r+0x7a>
 800a0ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a0be:	d00b      	beq.n	800a0d8 <_vfiprintf_r+0xa4>
 800a0c0:	465b      	mov	r3, fp
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ffa1 	bl	800a00e <__sfputs_r>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f000 80a7 	beq.w	800a220 <_vfiprintf_r+0x1ec>
 800a0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d4:	445a      	add	r2, fp
 800a0d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 809f 	beq.w	800a220 <_vfiprintf_r+0x1ec>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ec:	f10a 0a01 	add.w	sl, sl, #1
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	9307      	str	r3, [sp, #28]
 800a0f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2205      	movs	r2, #5
 800a0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a102:	4853      	ldr	r0, [pc, #332]	@ (800a250 <_vfiprintf_r+0x21c>)
 800a104:	f7f6 f884 	bl	8000210 <memchr>
 800a108:	9a04      	ldr	r2, [sp, #16]
 800a10a:	b9d8      	cbnz	r0, 800a144 <_vfiprintf_r+0x110>
 800a10c:	06d1      	lsls	r1, r2, #27
 800a10e:	bf44      	itt	mi
 800a110:	2320      	movmi	r3, #32
 800a112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a116:	0713      	lsls	r3, r2, #28
 800a118:	bf44      	itt	mi
 800a11a:	232b      	movmi	r3, #43	@ 0x2b
 800a11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a120:	f89a 3000 	ldrb.w	r3, [sl]
 800a124:	2b2a      	cmp	r3, #42	@ 0x2a
 800a126:	d015      	beq.n	800a154 <_vfiprintf_r+0x120>
 800a128:	9a07      	ldr	r2, [sp, #28]
 800a12a:	4654      	mov	r4, sl
 800a12c:	2000      	movs	r0, #0
 800a12e:	f04f 0c0a 	mov.w	ip, #10
 800a132:	4621      	mov	r1, r4
 800a134:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a138:	3b30      	subs	r3, #48	@ 0x30
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	d94b      	bls.n	800a1d6 <_vfiprintf_r+0x1a2>
 800a13e:	b1b0      	cbz	r0, 800a16e <_vfiprintf_r+0x13a>
 800a140:	9207      	str	r2, [sp, #28]
 800a142:	e014      	b.n	800a16e <_vfiprintf_r+0x13a>
 800a144:	eba0 0308 	sub.w	r3, r0, r8
 800a148:	fa09 f303 	lsl.w	r3, r9, r3
 800a14c:	4313      	orrs	r3, r2
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	46a2      	mov	sl, r4
 800a152:	e7d2      	b.n	800a0fa <_vfiprintf_r+0xc6>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	1d19      	adds	r1, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9103      	str	r1, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfbb      	ittet	lt
 800a160:	425b      	neglt	r3, r3
 800a162:	f042 0202 	orrlt.w	r2, r2, #2
 800a166:	9307      	strge	r3, [sp, #28]
 800a168:	9307      	strlt	r3, [sp, #28]
 800a16a:	bfb8      	it	lt
 800a16c:	9204      	strlt	r2, [sp, #16]
 800a16e:	7823      	ldrb	r3, [r4, #0]
 800a170:	2b2e      	cmp	r3, #46	@ 0x2e
 800a172:	d10a      	bne.n	800a18a <_vfiprintf_r+0x156>
 800a174:	7863      	ldrb	r3, [r4, #1]
 800a176:	2b2a      	cmp	r3, #42	@ 0x2a
 800a178:	d132      	bne.n	800a1e0 <_vfiprintf_r+0x1ac>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d1a      	adds	r2, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9203      	str	r2, [sp, #12]
 800a182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a186:	3402      	adds	r4, #2
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a260 <_vfiprintf_r+0x22c>
 800a18e:	7821      	ldrb	r1, [r4, #0]
 800a190:	2203      	movs	r2, #3
 800a192:	4650      	mov	r0, sl
 800a194:	f7f6 f83c 	bl	8000210 <memchr>
 800a198:	b138      	cbz	r0, 800a1aa <_vfiprintf_r+0x176>
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	eba0 000a 	sub.w	r0, r0, sl
 800a1a0:	2240      	movs	r2, #64	@ 0x40
 800a1a2:	4082      	lsls	r2, r0
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	3401      	adds	r4, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ae:	4829      	ldr	r0, [pc, #164]	@ (800a254 <_vfiprintf_r+0x220>)
 800a1b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1b4:	2206      	movs	r2, #6
 800a1b6:	f7f6 f82b 	bl	8000210 <memchr>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d03f      	beq.n	800a23e <_vfiprintf_r+0x20a>
 800a1be:	4b26      	ldr	r3, [pc, #152]	@ (800a258 <_vfiprintf_r+0x224>)
 800a1c0:	bb1b      	cbnz	r3, 800a20a <_vfiprintf_r+0x1d6>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	f023 0307 	bic.w	r3, r3, #7
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d0:	443b      	add	r3, r7
 800a1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d4:	e76a      	b.n	800a0ac <_vfiprintf_r+0x78>
 800a1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1da:	460c      	mov	r4, r1
 800a1dc:	2001      	movs	r0, #1
 800a1de:	e7a8      	b.n	800a132 <_vfiprintf_r+0xfe>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	3401      	adds	r4, #1
 800a1e4:	9305      	str	r3, [sp, #20]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f04f 0c0a 	mov.w	ip, #10
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f2:	3a30      	subs	r2, #48	@ 0x30
 800a1f4:	2a09      	cmp	r2, #9
 800a1f6:	d903      	bls.n	800a200 <_vfiprintf_r+0x1cc>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0c6      	beq.n	800a18a <_vfiprintf_r+0x156>
 800a1fc:	9105      	str	r1, [sp, #20]
 800a1fe:	e7c4      	b.n	800a18a <_vfiprintf_r+0x156>
 800a200:	fb0c 2101 	mla	r1, ip, r1, r2
 800a204:	4604      	mov	r4, r0
 800a206:	2301      	movs	r3, #1
 800a208:	e7f0      	b.n	800a1ec <_vfiprintf_r+0x1b8>
 800a20a:	ab03      	add	r3, sp, #12
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	462a      	mov	r2, r5
 800a210:	4b12      	ldr	r3, [pc, #72]	@ (800a25c <_vfiprintf_r+0x228>)
 800a212:	a904      	add	r1, sp, #16
 800a214:	4630      	mov	r0, r6
 800a216:	f3af 8000 	nop.w
 800a21a:	4607      	mov	r7, r0
 800a21c:	1c78      	adds	r0, r7, #1
 800a21e:	d1d6      	bne.n	800a1ce <_vfiprintf_r+0x19a>
 800a220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a222:	07d9      	lsls	r1, r3, #31
 800a224:	d405      	bmi.n	800a232 <_vfiprintf_r+0x1fe>
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	059a      	lsls	r2, r3, #22
 800a22a:	d402      	bmi.n	800a232 <_vfiprintf_r+0x1fe>
 800a22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a22e:	f7ff fe7d 	bl	8009f2c <__retarget_lock_release_recursive>
 800a232:	89ab      	ldrh	r3, [r5, #12]
 800a234:	065b      	lsls	r3, r3, #25
 800a236:	f53f af1f 	bmi.w	800a078 <_vfiprintf_r+0x44>
 800a23a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a23c:	e71e      	b.n	800a07c <_vfiprintf_r+0x48>
 800a23e:	ab03      	add	r3, sp, #12
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	462a      	mov	r2, r5
 800a244:	4b05      	ldr	r3, [pc, #20]	@ (800a25c <_vfiprintf_r+0x228>)
 800a246:	a904      	add	r1, sp, #16
 800a248:	4630      	mov	r0, r6
 800a24a:	f000 f879 	bl	800a340 <_printf_i>
 800a24e:	e7e4      	b.n	800a21a <_vfiprintf_r+0x1e6>
 800a250:	0800ab64 	.word	0x0800ab64
 800a254:	0800ab6e 	.word	0x0800ab6e
 800a258:	00000000 	.word	0x00000000
 800a25c:	0800a00f 	.word	0x0800a00f
 800a260:	0800ab6a 	.word	0x0800ab6a

0800a264 <_printf_common>:
 800a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	4616      	mov	r6, r2
 800a26a:	4698      	mov	r8, r3
 800a26c:	688a      	ldr	r2, [r1, #8]
 800a26e:	690b      	ldr	r3, [r1, #16]
 800a270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a274:	4293      	cmp	r3, r2
 800a276:	bfb8      	it	lt
 800a278:	4613      	movlt	r3, r2
 800a27a:	6033      	str	r3, [r6, #0]
 800a27c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a280:	4607      	mov	r7, r0
 800a282:	460c      	mov	r4, r1
 800a284:	b10a      	cbz	r2, 800a28a <_printf_common+0x26>
 800a286:	3301      	adds	r3, #1
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	0699      	lsls	r1, r3, #26
 800a28e:	bf42      	ittt	mi
 800a290:	6833      	ldrmi	r3, [r6, #0]
 800a292:	3302      	addmi	r3, #2
 800a294:	6033      	strmi	r3, [r6, #0]
 800a296:	6825      	ldr	r5, [r4, #0]
 800a298:	f015 0506 	ands.w	r5, r5, #6
 800a29c:	d106      	bne.n	800a2ac <_printf_common+0x48>
 800a29e:	f104 0a19 	add.w	sl, r4, #25
 800a2a2:	68e3      	ldr	r3, [r4, #12]
 800a2a4:	6832      	ldr	r2, [r6, #0]
 800a2a6:	1a9b      	subs	r3, r3, r2
 800a2a8:	42ab      	cmp	r3, r5
 800a2aa:	dc26      	bgt.n	800a2fa <_printf_common+0x96>
 800a2ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2b0:	6822      	ldr	r2, [r4, #0]
 800a2b2:	3b00      	subs	r3, #0
 800a2b4:	bf18      	it	ne
 800a2b6:	2301      	movne	r3, #1
 800a2b8:	0692      	lsls	r2, r2, #26
 800a2ba:	d42b      	bmi.n	800a314 <_printf_common+0xb0>
 800a2bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	47c8      	blx	r9
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	d01e      	beq.n	800a308 <_printf_common+0xa4>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	6922      	ldr	r2, [r4, #16]
 800a2ce:	f003 0306 	and.w	r3, r3, #6
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	bf02      	ittt	eq
 800a2d6:	68e5      	ldreq	r5, [r4, #12]
 800a2d8:	6833      	ldreq	r3, [r6, #0]
 800a2da:	1aed      	subeq	r5, r5, r3
 800a2dc:	68a3      	ldr	r3, [r4, #8]
 800a2de:	bf0c      	ite	eq
 800a2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2e4:	2500      	movne	r5, #0
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	bfc4      	itt	gt
 800a2ea:	1a9b      	subgt	r3, r3, r2
 800a2ec:	18ed      	addgt	r5, r5, r3
 800a2ee:	2600      	movs	r6, #0
 800a2f0:	341a      	adds	r4, #26
 800a2f2:	42b5      	cmp	r5, r6
 800a2f4:	d11a      	bne.n	800a32c <_printf_common+0xc8>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e008      	b.n	800a30c <_printf_common+0xa8>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	4641      	mov	r1, r8
 800a300:	4638      	mov	r0, r7
 800a302:	47c8      	blx	r9
 800a304:	3001      	adds	r0, #1
 800a306:	d103      	bne.n	800a310 <_printf_common+0xac>
 800a308:	f04f 30ff 	mov.w	r0, #4294967295
 800a30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a310:	3501      	adds	r5, #1
 800a312:	e7c6      	b.n	800a2a2 <_printf_common+0x3e>
 800a314:	18e1      	adds	r1, r4, r3
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	2030      	movs	r0, #48	@ 0x30
 800a31a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a31e:	4422      	add	r2, r4
 800a320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a328:	3302      	adds	r3, #2
 800a32a:	e7c7      	b.n	800a2bc <_printf_common+0x58>
 800a32c:	2301      	movs	r3, #1
 800a32e:	4622      	mov	r2, r4
 800a330:	4641      	mov	r1, r8
 800a332:	4638      	mov	r0, r7
 800a334:	47c8      	blx	r9
 800a336:	3001      	adds	r0, #1
 800a338:	d0e6      	beq.n	800a308 <_printf_common+0xa4>
 800a33a:	3601      	adds	r6, #1
 800a33c:	e7d9      	b.n	800a2f2 <_printf_common+0x8e>
	...

0800a340 <_printf_i>:
 800a340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a344:	7e0f      	ldrb	r7, [r1, #24]
 800a346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a348:	2f78      	cmp	r7, #120	@ 0x78
 800a34a:	4691      	mov	r9, r2
 800a34c:	4680      	mov	r8, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	469a      	mov	sl, r3
 800a352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a356:	d807      	bhi.n	800a368 <_printf_i+0x28>
 800a358:	2f62      	cmp	r7, #98	@ 0x62
 800a35a:	d80a      	bhi.n	800a372 <_printf_i+0x32>
 800a35c:	2f00      	cmp	r7, #0
 800a35e:	f000 80d1 	beq.w	800a504 <_printf_i+0x1c4>
 800a362:	2f58      	cmp	r7, #88	@ 0x58
 800a364:	f000 80b8 	beq.w	800a4d8 <_printf_i+0x198>
 800a368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a36c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a370:	e03a      	b.n	800a3e8 <_printf_i+0xa8>
 800a372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a376:	2b15      	cmp	r3, #21
 800a378:	d8f6      	bhi.n	800a368 <_printf_i+0x28>
 800a37a:	a101      	add	r1, pc, #4	@ (adr r1, 800a380 <_printf_i+0x40>)
 800a37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a380:	0800a3d9 	.word	0x0800a3d9
 800a384:	0800a3ed 	.word	0x0800a3ed
 800a388:	0800a369 	.word	0x0800a369
 800a38c:	0800a369 	.word	0x0800a369
 800a390:	0800a369 	.word	0x0800a369
 800a394:	0800a369 	.word	0x0800a369
 800a398:	0800a3ed 	.word	0x0800a3ed
 800a39c:	0800a369 	.word	0x0800a369
 800a3a0:	0800a369 	.word	0x0800a369
 800a3a4:	0800a369 	.word	0x0800a369
 800a3a8:	0800a369 	.word	0x0800a369
 800a3ac:	0800a4eb 	.word	0x0800a4eb
 800a3b0:	0800a417 	.word	0x0800a417
 800a3b4:	0800a4a5 	.word	0x0800a4a5
 800a3b8:	0800a369 	.word	0x0800a369
 800a3bc:	0800a369 	.word	0x0800a369
 800a3c0:	0800a50d 	.word	0x0800a50d
 800a3c4:	0800a369 	.word	0x0800a369
 800a3c8:	0800a417 	.word	0x0800a417
 800a3cc:	0800a369 	.word	0x0800a369
 800a3d0:	0800a369 	.word	0x0800a369
 800a3d4:	0800a4ad 	.word	0x0800a4ad
 800a3d8:	6833      	ldr	r3, [r6, #0]
 800a3da:	1d1a      	adds	r2, r3, #4
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6032      	str	r2, [r6, #0]
 800a3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e09c      	b.n	800a526 <_printf_i+0x1e6>
 800a3ec:	6833      	ldr	r3, [r6, #0]
 800a3ee:	6820      	ldr	r0, [r4, #0]
 800a3f0:	1d19      	adds	r1, r3, #4
 800a3f2:	6031      	str	r1, [r6, #0]
 800a3f4:	0606      	lsls	r6, r0, #24
 800a3f6:	d501      	bpl.n	800a3fc <_printf_i+0xbc>
 800a3f8:	681d      	ldr	r5, [r3, #0]
 800a3fa:	e003      	b.n	800a404 <_printf_i+0xc4>
 800a3fc:	0645      	lsls	r5, r0, #25
 800a3fe:	d5fb      	bpl.n	800a3f8 <_printf_i+0xb8>
 800a400:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a404:	2d00      	cmp	r5, #0
 800a406:	da03      	bge.n	800a410 <_printf_i+0xd0>
 800a408:	232d      	movs	r3, #45	@ 0x2d
 800a40a:	426d      	negs	r5, r5
 800a40c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a410:	4858      	ldr	r0, [pc, #352]	@ (800a574 <_printf_i+0x234>)
 800a412:	230a      	movs	r3, #10
 800a414:	e011      	b.n	800a43a <_printf_i+0xfa>
 800a416:	6821      	ldr	r1, [r4, #0]
 800a418:	6833      	ldr	r3, [r6, #0]
 800a41a:	0608      	lsls	r0, r1, #24
 800a41c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a420:	d402      	bmi.n	800a428 <_printf_i+0xe8>
 800a422:	0649      	lsls	r1, r1, #25
 800a424:	bf48      	it	mi
 800a426:	b2ad      	uxthmi	r5, r5
 800a428:	2f6f      	cmp	r7, #111	@ 0x6f
 800a42a:	4852      	ldr	r0, [pc, #328]	@ (800a574 <_printf_i+0x234>)
 800a42c:	6033      	str	r3, [r6, #0]
 800a42e:	bf14      	ite	ne
 800a430:	230a      	movne	r3, #10
 800a432:	2308      	moveq	r3, #8
 800a434:	2100      	movs	r1, #0
 800a436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a43a:	6866      	ldr	r6, [r4, #4]
 800a43c:	60a6      	str	r6, [r4, #8]
 800a43e:	2e00      	cmp	r6, #0
 800a440:	db05      	blt.n	800a44e <_printf_i+0x10e>
 800a442:	6821      	ldr	r1, [r4, #0]
 800a444:	432e      	orrs	r6, r5
 800a446:	f021 0104 	bic.w	r1, r1, #4
 800a44a:	6021      	str	r1, [r4, #0]
 800a44c:	d04b      	beq.n	800a4e6 <_printf_i+0x1a6>
 800a44e:	4616      	mov	r6, r2
 800a450:	fbb5 f1f3 	udiv	r1, r5, r3
 800a454:	fb03 5711 	mls	r7, r3, r1, r5
 800a458:	5dc7      	ldrb	r7, [r0, r7]
 800a45a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a45e:	462f      	mov	r7, r5
 800a460:	42bb      	cmp	r3, r7
 800a462:	460d      	mov	r5, r1
 800a464:	d9f4      	bls.n	800a450 <_printf_i+0x110>
 800a466:	2b08      	cmp	r3, #8
 800a468:	d10b      	bne.n	800a482 <_printf_i+0x142>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	07df      	lsls	r7, r3, #31
 800a46e:	d508      	bpl.n	800a482 <_printf_i+0x142>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	6861      	ldr	r1, [r4, #4]
 800a474:	4299      	cmp	r1, r3
 800a476:	bfde      	ittt	le
 800a478:	2330      	movle	r3, #48	@ 0x30
 800a47a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a47e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a482:	1b92      	subs	r2, r2, r6
 800a484:	6122      	str	r2, [r4, #16]
 800a486:	f8cd a000 	str.w	sl, [sp]
 800a48a:	464b      	mov	r3, r9
 800a48c:	aa03      	add	r2, sp, #12
 800a48e:	4621      	mov	r1, r4
 800a490:	4640      	mov	r0, r8
 800a492:	f7ff fee7 	bl	800a264 <_printf_common>
 800a496:	3001      	adds	r0, #1
 800a498:	d14a      	bne.n	800a530 <_printf_i+0x1f0>
 800a49a:	f04f 30ff 	mov.w	r0, #4294967295
 800a49e:	b004      	add	sp, #16
 800a4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	f043 0320 	orr.w	r3, r3, #32
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	4832      	ldr	r0, [pc, #200]	@ (800a578 <_printf_i+0x238>)
 800a4ae:	2778      	movs	r7, #120	@ 0x78
 800a4b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	6831      	ldr	r1, [r6, #0]
 800a4b8:	061f      	lsls	r7, r3, #24
 800a4ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4be:	d402      	bmi.n	800a4c6 <_printf_i+0x186>
 800a4c0:	065f      	lsls	r7, r3, #25
 800a4c2:	bf48      	it	mi
 800a4c4:	b2ad      	uxthmi	r5, r5
 800a4c6:	6031      	str	r1, [r6, #0]
 800a4c8:	07d9      	lsls	r1, r3, #31
 800a4ca:	bf44      	itt	mi
 800a4cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a4d0:	6023      	strmi	r3, [r4, #0]
 800a4d2:	b11d      	cbz	r5, 800a4dc <_printf_i+0x19c>
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	e7ad      	b.n	800a434 <_printf_i+0xf4>
 800a4d8:	4826      	ldr	r0, [pc, #152]	@ (800a574 <_printf_i+0x234>)
 800a4da:	e7e9      	b.n	800a4b0 <_printf_i+0x170>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	f023 0320 	bic.w	r3, r3, #32
 800a4e2:	6023      	str	r3, [r4, #0]
 800a4e4:	e7f6      	b.n	800a4d4 <_printf_i+0x194>
 800a4e6:	4616      	mov	r6, r2
 800a4e8:	e7bd      	b.n	800a466 <_printf_i+0x126>
 800a4ea:	6833      	ldr	r3, [r6, #0]
 800a4ec:	6825      	ldr	r5, [r4, #0]
 800a4ee:	6961      	ldr	r1, [r4, #20]
 800a4f0:	1d18      	adds	r0, r3, #4
 800a4f2:	6030      	str	r0, [r6, #0]
 800a4f4:	062e      	lsls	r6, r5, #24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	d501      	bpl.n	800a4fe <_printf_i+0x1be>
 800a4fa:	6019      	str	r1, [r3, #0]
 800a4fc:	e002      	b.n	800a504 <_printf_i+0x1c4>
 800a4fe:	0668      	lsls	r0, r5, #25
 800a500:	d5fb      	bpl.n	800a4fa <_printf_i+0x1ba>
 800a502:	8019      	strh	r1, [r3, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	6123      	str	r3, [r4, #16]
 800a508:	4616      	mov	r6, r2
 800a50a:	e7bc      	b.n	800a486 <_printf_i+0x146>
 800a50c:	6833      	ldr	r3, [r6, #0]
 800a50e:	1d1a      	adds	r2, r3, #4
 800a510:	6032      	str	r2, [r6, #0]
 800a512:	681e      	ldr	r6, [r3, #0]
 800a514:	6862      	ldr	r2, [r4, #4]
 800a516:	2100      	movs	r1, #0
 800a518:	4630      	mov	r0, r6
 800a51a:	f7f5 fe79 	bl	8000210 <memchr>
 800a51e:	b108      	cbz	r0, 800a524 <_printf_i+0x1e4>
 800a520:	1b80      	subs	r0, r0, r6
 800a522:	6060      	str	r0, [r4, #4]
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	6123      	str	r3, [r4, #16]
 800a528:	2300      	movs	r3, #0
 800a52a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a52e:	e7aa      	b.n	800a486 <_printf_i+0x146>
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	4632      	mov	r2, r6
 800a534:	4649      	mov	r1, r9
 800a536:	4640      	mov	r0, r8
 800a538:	47d0      	blx	sl
 800a53a:	3001      	adds	r0, #1
 800a53c:	d0ad      	beq.n	800a49a <_printf_i+0x15a>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	079b      	lsls	r3, r3, #30
 800a542:	d413      	bmi.n	800a56c <_printf_i+0x22c>
 800a544:	68e0      	ldr	r0, [r4, #12]
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	4298      	cmp	r0, r3
 800a54a:	bfb8      	it	lt
 800a54c:	4618      	movlt	r0, r3
 800a54e:	e7a6      	b.n	800a49e <_printf_i+0x15e>
 800a550:	2301      	movs	r3, #1
 800a552:	4632      	mov	r2, r6
 800a554:	4649      	mov	r1, r9
 800a556:	4640      	mov	r0, r8
 800a558:	47d0      	blx	sl
 800a55a:	3001      	adds	r0, #1
 800a55c:	d09d      	beq.n	800a49a <_printf_i+0x15a>
 800a55e:	3501      	adds	r5, #1
 800a560:	68e3      	ldr	r3, [r4, #12]
 800a562:	9903      	ldr	r1, [sp, #12]
 800a564:	1a5b      	subs	r3, r3, r1
 800a566:	42ab      	cmp	r3, r5
 800a568:	dcf2      	bgt.n	800a550 <_printf_i+0x210>
 800a56a:	e7eb      	b.n	800a544 <_printf_i+0x204>
 800a56c:	2500      	movs	r5, #0
 800a56e:	f104 0619 	add.w	r6, r4, #25
 800a572:	e7f5      	b.n	800a560 <_printf_i+0x220>
 800a574:	0800ab75 	.word	0x0800ab75
 800a578:	0800ab86 	.word	0x0800ab86

0800a57c <__sflush_r>:
 800a57c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	0716      	lsls	r6, r2, #28
 800a586:	4605      	mov	r5, r0
 800a588:	460c      	mov	r4, r1
 800a58a:	d454      	bmi.n	800a636 <__sflush_r+0xba>
 800a58c:	684b      	ldr	r3, [r1, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dc02      	bgt.n	800a598 <__sflush_r+0x1c>
 800a592:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd48      	ble.n	800a62a <__sflush_r+0xae>
 800a598:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d045      	beq.n	800a62a <__sflush_r+0xae>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5a4:	682f      	ldr	r7, [r5, #0]
 800a5a6:	6a21      	ldr	r1, [r4, #32]
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	d030      	beq.n	800a60e <__sflush_r+0x92>
 800a5ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	0759      	lsls	r1, r3, #29
 800a5b2:	d505      	bpl.n	800a5c0 <__sflush_r+0x44>
 800a5b4:	6863      	ldr	r3, [r4, #4]
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5ba:	b10b      	cbz	r3, 800a5c0 <__sflush_r+0x44>
 800a5bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5c4:	6a21      	ldr	r1, [r4, #32]
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b0      	blx	r6
 800a5ca:	1c43      	adds	r3, r0, #1
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	d106      	bne.n	800a5de <__sflush_r+0x62>
 800a5d0:	6829      	ldr	r1, [r5, #0]
 800a5d2:	291d      	cmp	r1, #29
 800a5d4:	d82b      	bhi.n	800a62e <__sflush_r+0xb2>
 800a5d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a680 <__sflush_r+0x104>)
 800a5d8:	40ca      	lsrs	r2, r1
 800a5da:	07d6      	lsls	r6, r2, #31
 800a5dc:	d527      	bpl.n	800a62e <__sflush_r+0xb2>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	6062      	str	r2, [r4, #4]
 800a5e2:	04d9      	lsls	r1, r3, #19
 800a5e4:	6922      	ldr	r2, [r4, #16]
 800a5e6:	6022      	str	r2, [r4, #0]
 800a5e8:	d504      	bpl.n	800a5f4 <__sflush_r+0x78>
 800a5ea:	1c42      	adds	r2, r0, #1
 800a5ec:	d101      	bne.n	800a5f2 <__sflush_r+0x76>
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	b903      	cbnz	r3, 800a5f4 <__sflush_r+0x78>
 800a5f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5f6:	602f      	str	r7, [r5, #0]
 800a5f8:	b1b9      	cbz	r1, 800a62a <__sflush_r+0xae>
 800a5fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5fe:	4299      	cmp	r1, r3
 800a600:	d002      	beq.n	800a608 <__sflush_r+0x8c>
 800a602:	4628      	mov	r0, r5
 800a604:	f7ff fca2 	bl	8009f4c <_free_r>
 800a608:	2300      	movs	r3, #0
 800a60a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a60c:	e00d      	b.n	800a62a <__sflush_r+0xae>
 800a60e:	2301      	movs	r3, #1
 800a610:	4628      	mov	r0, r5
 800a612:	47b0      	blx	r6
 800a614:	4602      	mov	r2, r0
 800a616:	1c50      	adds	r0, r2, #1
 800a618:	d1c9      	bne.n	800a5ae <__sflush_r+0x32>
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d0c6      	beq.n	800a5ae <__sflush_r+0x32>
 800a620:	2b1d      	cmp	r3, #29
 800a622:	d001      	beq.n	800a628 <__sflush_r+0xac>
 800a624:	2b16      	cmp	r3, #22
 800a626:	d11e      	bne.n	800a666 <__sflush_r+0xea>
 800a628:	602f      	str	r7, [r5, #0]
 800a62a:	2000      	movs	r0, #0
 800a62c:	e022      	b.n	800a674 <__sflush_r+0xf8>
 800a62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a632:	b21b      	sxth	r3, r3
 800a634:	e01b      	b.n	800a66e <__sflush_r+0xf2>
 800a636:	690f      	ldr	r7, [r1, #16]
 800a638:	2f00      	cmp	r7, #0
 800a63a:	d0f6      	beq.n	800a62a <__sflush_r+0xae>
 800a63c:	0793      	lsls	r3, r2, #30
 800a63e:	680e      	ldr	r6, [r1, #0]
 800a640:	bf08      	it	eq
 800a642:	694b      	ldreq	r3, [r1, #20]
 800a644:	600f      	str	r7, [r1, #0]
 800a646:	bf18      	it	ne
 800a648:	2300      	movne	r3, #0
 800a64a:	eba6 0807 	sub.w	r8, r6, r7
 800a64e:	608b      	str	r3, [r1, #8]
 800a650:	f1b8 0f00 	cmp.w	r8, #0
 800a654:	dde9      	ble.n	800a62a <__sflush_r+0xae>
 800a656:	6a21      	ldr	r1, [r4, #32]
 800a658:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a65a:	4643      	mov	r3, r8
 800a65c:	463a      	mov	r2, r7
 800a65e:	4628      	mov	r0, r5
 800a660:	47b0      	blx	r6
 800a662:	2800      	cmp	r0, #0
 800a664:	dc08      	bgt.n	800a678 <__sflush_r+0xfc>
 800a666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	f04f 30ff 	mov.w	r0, #4294967295
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	4407      	add	r7, r0
 800a67a:	eba8 0800 	sub.w	r8, r8, r0
 800a67e:	e7e7      	b.n	800a650 <__sflush_r+0xd4>
 800a680:	20400001 	.word	0x20400001

0800a684 <_fflush_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	690b      	ldr	r3, [r1, #16]
 800a688:	4605      	mov	r5, r0
 800a68a:	460c      	mov	r4, r1
 800a68c:	b913      	cbnz	r3, 800a694 <_fflush_r+0x10>
 800a68e:	2500      	movs	r5, #0
 800a690:	4628      	mov	r0, r5
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	b118      	cbz	r0, 800a69e <_fflush_r+0x1a>
 800a696:	6a03      	ldr	r3, [r0, #32]
 800a698:	b90b      	cbnz	r3, 800a69e <_fflush_r+0x1a>
 800a69a:	f7ff fa3f 	bl	8009b1c <__sinit>
 800a69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0f3      	beq.n	800a68e <_fflush_r+0xa>
 800a6a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6a8:	07d0      	lsls	r0, r2, #31
 800a6aa:	d404      	bmi.n	800a6b6 <_fflush_r+0x32>
 800a6ac:	0599      	lsls	r1, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_fflush_r+0x32>
 800a6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6b2:	f7ff fc3a 	bl	8009f2a <__retarget_lock_acquire_recursive>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	f7ff ff5f 	bl	800a57c <__sflush_r>
 800a6be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6c0:	07da      	lsls	r2, r3, #31
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	d4e4      	bmi.n	800a690 <_fflush_r+0xc>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	059b      	lsls	r3, r3, #22
 800a6ca:	d4e1      	bmi.n	800a690 <_fflush_r+0xc>
 800a6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ce:	f7ff fc2d 	bl	8009f2c <__retarget_lock_release_recursive>
 800a6d2:	e7dd      	b.n	800a690 <_fflush_r+0xc>

0800a6d4 <__swhatbuf_r>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	b096      	sub	sp, #88	@ 0x58
 800a6e0:	4615      	mov	r5, r2
 800a6e2:	461e      	mov	r6, r3
 800a6e4:	da0d      	bge.n	800a702 <__swhatbuf_r+0x2e>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6ec:	f04f 0100 	mov.w	r1, #0
 800a6f0:	bf14      	ite	ne
 800a6f2:	2340      	movne	r3, #64	@ 0x40
 800a6f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	6031      	str	r1, [r6, #0]
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	b016      	add	sp, #88	@ 0x58
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	466a      	mov	r2, sp
 800a704:	f000 f848 	bl	800a798 <_fstat_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dbec      	blt.n	800a6e6 <__swhatbuf_r+0x12>
 800a70c:	9901      	ldr	r1, [sp, #4]
 800a70e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a716:	4259      	negs	r1, r3
 800a718:	4159      	adcs	r1, r3
 800a71a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71e:	e7eb      	b.n	800a6f8 <__swhatbuf_r+0x24>

0800a720 <__smakebuf_r>:
 800a720:	898b      	ldrh	r3, [r1, #12]
 800a722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a724:	079d      	lsls	r5, r3, #30
 800a726:	4606      	mov	r6, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	d507      	bpl.n	800a73c <__smakebuf_r+0x1c>
 800a72c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	2301      	movs	r3, #1
 800a736:	6163      	str	r3, [r4, #20]
 800a738:	b003      	add	sp, #12
 800a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73c:	ab01      	add	r3, sp, #4
 800a73e:	466a      	mov	r2, sp
 800a740:	f7ff ffc8 	bl	800a6d4 <__swhatbuf_r>
 800a744:	9f00      	ldr	r7, [sp, #0]
 800a746:	4605      	mov	r5, r0
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff f8ce 	bl	80098ec <_malloc_r>
 800a750:	b948      	cbnz	r0, 800a766 <__smakebuf_r+0x46>
 800a752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a756:	059a      	lsls	r2, r3, #22
 800a758:	d4ee      	bmi.n	800a738 <__smakebuf_r+0x18>
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	f043 0302 	orr.w	r3, r3, #2
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	e7e2      	b.n	800a72c <__smakebuf_r+0xc>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	6020      	str	r0, [r4, #0]
 800a76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a776:	b15b      	cbz	r3, 800a790 <__smakebuf_r+0x70>
 800a778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a77c:	4630      	mov	r0, r6
 800a77e:	f000 f81d 	bl	800a7bc <_isatty_r>
 800a782:	b128      	cbz	r0, 800a790 <__smakebuf_r+0x70>
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	f043 0301 	orr.w	r3, r3, #1
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	431d      	orrs	r5, r3
 800a794:	81a5      	strh	r5, [r4, #12]
 800a796:	e7cf      	b.n	800a738 <__smakebuf_r+0x18>

0800a798 <_fstat_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	@ (800a7b8 <_fstat_r+0x20>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	f7f8 fa08 	bl	8002bba <_fstat>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d102      	bne.n	800a7b4 <_fstat_r+0x1c>
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	b103      	cbz	r3, 800a7b4 <_fstat_r+0x1c>
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	bd38      	pop	{r3, r4, r5, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200051b4 	.word	0x200051b4

0800a7bc <_isatty_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	@ (800a7d8 <_isatty_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f8 fa07 	bl	8002bda <_isatty>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_isatty_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_isatty_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	200051b4 	.word	0x200051b4

0800a7dc <_init>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	bf00      	nop
 800a7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e2:	bc08      	pop	{r3}
 800a7e4:	469e      	mov	lr, r3
 800a7e6:	4770      	bx	lr

0800a7e8 <_fini>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	bf00      	nop
 800a7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ee:	bc08      	pop	{r3}
 800a7f0:	469e      	mov	lr, r3
 800a7f2:	4770      	bx	lr
